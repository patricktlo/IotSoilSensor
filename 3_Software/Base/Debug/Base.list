
Base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ef4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08002000  08002000  00012000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002074  08002074  00012074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002078  08002078  00012078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  0800207c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000a0  20000070  080020ec  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000110  080020ec  00020110  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000c9ab  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001e83  00000000  00000000  0002ca44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002d8d  00000000  00000000  0002e8c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000005a8  00000000  00000000  00031658  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000730  00000000  00000000  00031c00  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000037d7  00000000  00000000  00032330  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000023f8  00000000  00000000  00035b07  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00037eff  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000011ec  00000000  00000000  00037f7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08001fe8 	.word	0x08001fe8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08001fe8 	.word	0x08001fe8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800015c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800015e:	4b0e      	ldr	r3, [pc, #56]	; (8000198 <HAL_InitTick+0x3c>)
{
 8000160:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000162:	7818      	ldrb	r0, [r3, #0]
 8000164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000168:	fbb3 f3f0 	udiv	r3, r3, r0
 800016c:	4a0b      	ldr	r2, [pc, #44]	; (800019c <HAL_InitTick+0x40>)
 800016e:	6810      	ldr	r0, [r2, #0]
 8000170:	fbb0 f0f3 	udiv	r0, r0, r3
 8000174:	f000 fb0e 	bl	8000794 <HAL_SYSTICK_Config>
 8000178:	4604      	mov	r4, r0
 800017a:	b958      	cbnz	r0, 8000194 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800017c:	2d0f      	cmp	r5, #15
 800017e:	d809      	bhi.n	8000194 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000180:	4602      	mov	r2, r0
 8000182:	4629      	mov	r1, r5
 8000184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000188:	f000 fad0 	bl	800072c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <HAL_InitTick+0x44>)
 800018e:	4620      	mov	r0, r4
 8000190:	601d      	str	r5, [r3, #0]
 8000192:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000194:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000196:	bd38      	pop	{r3, r4, r5, pc}
 8000198:	20000000 	.word	0x20000000
 800019c:	20000008 	.word	0x20000008
 80001a0:	20000004 	.word	0x20000004

080001a4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a4:	4a07      	ldr	r2, [pc, #28]	; (80001c4 <HAL_Init+0x20>)
{
 80001a6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001aa:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001ac:	f043 0310 	orr.w	r3, r3, #16
 80001b0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001b2:	f000 faa9 	bl	8000708 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001b6:	2000      	movs	r0, #0
 80001b8:	f7ff ffd0 	bl	800015c <HAL_InitTick>
  HAL_MspInit();
 80001bc:	f001 f9be 	bl	800153c <HAL_MspInit>
}
 80001c0:	2000      	movs	r0, #0
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	40022000 	.word	0x40022000

080001c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001c8:	4a03      	ldr	r2, [pc, #12]	; (80001d8 <HAL_IncTick+0x10>)
 80001ca:	4b04      	ldr	r3, [pc, #16]	; (80001dc <HAL_IncTick+0x14>)
 80001cc:	6811      	ldr	r1, [r2, #0]
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	440b      	add	r3, r1
 80001d2:	6013      	str	r3, [r2, #0]
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000098 	.word	0x20000098
 80001dc:	20000000 	.word	0x20000000

080001e0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001e0:	4b01      	ldr	r3, [pc, #4]	; (80001e8 <HAL_GetTick+0x8>)
 80001e2:	6818      	ldr	r0, [r3, #0]
}
 80001e4:	4770      	bx	lr
 80001e6:	bf00      	nop
 80001e8:	20000098 	.word	0x20000098

080001ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001ec:	b538      	push	{r3, r4, r5, lr}
 80001ee:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001f0:	f7ff fff6 	bl	80001e0 <HAL_GetTick>
 80001f4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001f6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001f8:	bf1e      	ittt	ne
 80001fa:	4b04      	ldrne	r3, [pc, #16]	; (800020c <HAL_Delay+0x20>)
 80001fc:	781b      	ldrbne	r3, [r3, #0]
 80001fe:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000200:	f7ff ffee 	bl	80001e0 <HAL_GetTick>
 8000204:	1b40      	subs	r0, r0, r5
 8000206:	4284      	cmp	r4, r0
 8000208:	d8fa      	bhi.n	8000200 <HAL_Delay+0x14>
  {
  }
}
 800020a:	bd38      	pop	{r3, r4, r5, pc}
 800020c:	20000000 	.word	0x20000000

08000210 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000210:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000212:	2600      	movs	r6, #0
{
 8000214:	4604      	mov	r4, r0
 8000216:	460d      	mov	r5, r1
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000218:	9601      	str	r6, [sp, #4]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800021a:	f7ff ffe1 	bl	80001e0 <HAL_GetTick>
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800021e:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8000220:	4607      	mov	r7, r0
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000222:	689a      	ldr	r2, [r3, #8]
 8000224:	05d2      	lsls	r2, r2, #23
 8000226:	d508      	bpl.n	800023a <HAL_ADC_PollForConversion+0x2a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
    
    return HAL_ERROR;
 8000228:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800022a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 800022c:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000230:	f043 0320 	orr.w	r3, r3, #32
 8000234:	62a3      	str	r3, [r4, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
}
 8000236:	b003      	add	sp, #12
 8000238:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800023a:	685a      	ldr	r2, [r3, #4]
 800023c:	05d6      	lsls	r6, r2, #23
 800023e:	d403      	bmi.n	8000248 <HAL_ADC_PollForConversion+0x38>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000242:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 8000246:	d03b      	beq.n	80002c0 <HAL_ADC_PollForConversion+0xb0>
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000248:	4b3a      	ldr	r3, [pc, #232]	; (8000334 <HAL_ADC_PollForConversion+0x124>)
 800024a:	2002      	movs	r0, #2
 800024c:	681e      	ldr	r6, [r3, #0]
 800024e:	f000 febd 	bl	8000fcc <HAL_RCCEx_GetPeriphCLKFreq>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000252:	6823      	ldr	r3, [r4, #0]
 8000254:	4a38      	ldr	r2, [pc, #224]	; (8000338 <HAL_ADC_PollForConversion+0x128>)
 8000256:	6919      	ldr	r1, [r3, #16]
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000258:	fbb6 f0f0 	udiv	r0, r6, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800025c:	4211      	tst	r1, r2
 800025e:	4a37      	ldr	r2, [pc, #220]	; (800033c <HAL_ADC_PollForConversion+0x12c>)
 8000260:	d14f      	bne.n	8000302 <HAL_ADC_PollForConversion+0xf2>
 8000262:	68de      	ldr	r6, [r3, #12]
 8000264:	4936      	ldr	r1, [pc, #216]	; (8000340 <HAL_ADC_PollForConversion+0x130>)
 8000266:	420e      	tst	r6, r1
 8000268:	d14b      	bne.n	8000302 <HAL_ADC_PollForConversion+0xf2>
 800026a:	6919      	ldr	r1, [r3, #16]
 800026c:	4211      	tst	r1, r2
 800026e:	d159      	bne.n	8000324 <HAL_ADC_PollForConversion+0x114>
 8000270:	68da      	ldr	r2, [r3, #12]
 8000272:	4b34      	ldr	r3, [pc, #208]	; (8000344 <HAL_ADC_PollForConversion+0x134>)
 8000274:	421a      	tst	r2, r3
 8000276:	bf14      	ite	ne
 8000278:	2329      	movne	r3, #41	; 0x29
 800027a:	2314      	moveq	r3, #20
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800027c:	fb00 f603 	mul.w	r6, r0, r3
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000280:	9b01      	ldr	r3, [sp, #4]
 8000282:	429e      	cmp	r6, r3
 8000284:	d920      	bls.n	80002c8 <HAL_ADC_PollForConversion+0xb8>
      if(Timeout != HAL_MAX_DELAY)
 8000286:	1c6b      	adds	r3, r5, #1
 8000288:	d005      	beq.n	8000296 <HAL_ADC_PollForConversion+0x86>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800028a:	b15d      	cbz	r5, 80002a4 <HAL_ADC_PollForConversion+0x94>
 800028c:	f7ff ffa8 	bl	80001e0 <HAL_GetTick>
 8000290:	1bc0      	subs	r0, r0, r7
 8000292:	4285      	cmp	r5, r0
 8000294:	d306      	bcc.n	80002a4 <HAL_ADC_PollForConversion+0x94>
      Conversion_Timeout_CPU_cycles ++;
 8000296:	9b01      	ldr	r3, [sp, #4]
 8000298:	3301      	adds	r3, #1
 800029a:	9301      	str	r3, [sp, #4]
 800029c:	e7f0      	b.n	8000280 <HAL_ADC_PollForConversion+0x70>
      if(Timeout != HAL_MAX_DELAY)
 800029e:	1c68      	adds	r0, r5, #1
 80002a0:	d00f      	beq.n	80002c2 <HAL_ADC_PollForConversion+0xb2>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80002a2:	b945      	cbnz	r5, 80002b6 <HAL_ADC_PollForConversion+0xa6>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80002a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          return HAL_TIMEOUT;
 80002a6:	2003      	movs	r0, #3
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80002a8:	f043 0304 	orr.w	r3, r3, #4
 80002ac:	62a3      	str	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 80002ae:	2300      	movs	r3, #0
 80002b0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          return HAL_TIMEOUT;
 80002b4:	e7bf      	b.n	8000236 <HAL_ADC_PollForConversion+0x26>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80002b6:	f7ff ff93 	bl	80001e0 <HAL_GetTick>
 80002ba:	1bc0      	subs	r0, r0, r7
 80002bc:	4285      	cmp	r5, r0
 80002be:	d3f1      	bcc.n	80002a4 <HAL_ADC_PollForConversion+0x94>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80002c0:	6822      	ldr	r2, [r4, #0]
 80002c2:	6813      	ldr	r3, [r2, #0]
 80002c4:	0799      	lsls	r1, r3, #30
 80002c6:	d5ea      	bpl.n	800029e <HAL_ADC_PollForConversion+0x8e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80002c8:	f06f 0312 	mvn.w	r3, #18
 80002cc:	6822      	ldr	r2, [r4, #0]
 80002ce:	6013      	str	r3, [r2, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80002d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80002d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002d6:	62a3      	str	r3, [r4, #40]	; 0x28
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80002d8:	6893      	ldr	r3, [r2, #8]
 80002da:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80002de:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80002e2:	d125      	bne.n	8000330 <HAL_ADC_PollForConversion+0x120>
 80002e4:	68e3      	ldr	r3, [r4, #12]
 80002e6:	bb1b      	cbnz	r3, 8000330 <HAL_ADC_PollForConversion+0x120>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80002e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80002ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80002ee:	62a3      	str	r3, [r4, #40]	; 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80002f0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80002f2:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 80002f6:	d11b      	bne.n	8000330 <HAL_ADC_PollForConversion+0x120>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80002f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80002fa:	f043 0301 	orr.w	r3, r3, #1
 80002fe:	62a3      	str	r3, [r4, #40]	; 0x28
 8000300:	e799      	b.n	8000236 <HAL_ADC_PollForConversion+0x26>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000302:	6919      	ldr	r1, [r3, #16]
 8000304:	4211      	tst	r1, r2
 8000306:	d103      	bne.n	8000310 <HAL_ADC_PollForConversion+0x100>
 8000308:	68d9      	ldr	r1, [r3, #12]
 800030a:	4a0e      	ldr	r2, [pc, #56]	; (8000344 <HAL_ADC_PollForConversion+0x134>)
 800030c:	4211      	tst	r1, r2
 800030e:	d00b      	beq.n	8000328 <HAL_ADC_PollForConversion+0x118>
 8000310:	6919      	ldr	r1, [r3, #16]
 8000312:	4a0d      	ldr	r2, [pc, #52]	; (8000348 <HAL_ADC_PollForConversion+0x138>)
 8000314:	4211      	tst	r1, r2
 8000316:	d109      	bne.n	800032c <HAL_ADC_PollForConversion+0x11c>
 8000318:	68db      	ldr	r3, [r3, #12]
 800031a:	4213      	tst	r3, r2
 800031c:	bf14      	ite	ne
 800031e:	23fc      	movne	r3, #252	; 0xfc
 8000320:	2354      	moveq	r3, #84	; 0x54
 8000322:	e7ab      	b.n	800027c <HAL_ADC_PollForConversion+0x6c>
 8000324:	2329      	movs	r3, #41	; 0x29
 8000326:	e7a9      	b.n	800027c <HAL_ADC_PollForConversion+0x6c>
 8000328:	2354      	movs	r3, #84	; 0x54
 800032a:	e7a7      	b.n	800027c <HAL_ADC_PollForConversion+0x6c>
 800032c:	23fc      	movs	r3, #252	; 0xfc
 800032e:	e7a5      	b.n	800027c <HAL_ADC_PollForConversion+0x6c>
  return HAL_OK;
 8000330:	2000      	movs	r0, #0
 8000332:	e780      	b.n	8000236 <HAL_ADC_PollForConversion+0x26>
 8000334:	20000008 	.word	0x20000008
 8000338:	24924924 	.word	0x24924924
 800033c:	12492492 	.word	0x12492492
 8000340:	00924924 	.word	0x00924924
 8000344:	00492492 	.word	0x00492492
 8000348:	00249249 	.word	0x00249249

0800034c <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800034c:	6803      	ldr	r3, [r0, #0]
 800034e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8000350:	4770      	bx	lr
	...

08000354 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8000354:	2300      	movs	r3, #0
{ 
 8000356:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000358:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800035a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800035e:	2b01      	cmp	r3, #1
 8000360:	d074      	beq.n	800044c <HAL_ADC_ConfigChannel+0xf8>
 8000362:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000364:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8000366:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 800036a:	2d06      	cmp	r5, #6
 800036c:	6802      	ldr	r2, [r0, #0]
 800036e:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8000372:	680c      	ldr	r4, [r1, #0]
 8000374:	d825      	bhi.n	80003c2 <HAL_ADC_ConfigChannel+0x6e>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000376:	442b      	add	r3, r5
 8000378:	251f      	movs	r5, #31
 800037a:	6b56      	ldr	r6, [r2, #52]	; 0x34
 800037c:	3b05      	subs	r3, #5
 800037e:	409d      	lsls	r5, r3
 8000380:	ea26 0505 	bic.w	r5, r6, r5
 8000384:	fa04 f303 	lsl.w	r3, r4, r3
 8000388:	432b      	orrs	r3, r5
 800038a:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800038c:	2c09      	cmp	r4, #9
 800038e:	ea4f 0344 	mov.w	r3, r4, lsl #1
 8000392:	688d      	ldr	r5, [r1, #8]
 8000394:	d92f      	bls.n	80003f6 <HAL_ADC_ConfigChannel+0xa2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000396:	2607      	movs	r6, #7
 8000398:	4423      	add	r3, r4
 800039a:	68d1      	ldr	r1, [r2, #12]
 800039c:	3b1e      	subs	r3, #30
 800039e:	409e      	lsls	r6, r3
 80003a0:	ea21 0106 	bic.w	r1, r1, r6
 80003a4:	fa05 f303 	lsl.w	r3, r5, r3
 80003a8:	430b      	orrs	r3, r1
 80003aa:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80003ac:	f1a4 0310 	sub.w	r3, r4, #16
 80003b0:	2b01      	cmp	r3, #1
 80003b2:	d92b      	bls.n	800040c <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80003b4:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80003b6:	2200      	movs	r2, #0
 80003b8:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 80003bc:	4618      	mov	r0, r3
 80003be:	b002      	add	sp, #8
 80003c0:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 80003c2:	2d0c      	cmp	r5, #12
 80003c4:	d80b      	bhi.n	80003de <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80003c6:	442b      	add	r3, r5
 80003c8:	251f      	movs	r5, #31
 80003ca:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80003cc:	3b23      	subs	r3, #35	; 0x23
 80003ce:	409d      	lsls	r5, r3
 80003d0:	ea26 0505 	bic.w	r5, r6, r5
 80003d4:	fa04 f303 	lsl.w	r3, r4, r3
 80003d8:	432b      	orrs	r3, r5
 80003da:	6313      	str	r3, [r2, #48]	; 0x30
 80003dc:	e7d6      	b.n	800038c <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80003de:	442b      	add	r3, r5
 80003e0:	251f      	movs	r5, #31
 80003e2:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 80003e4:	3b41      	subs	r3, #65	; 0x41
 80003e6:	409d      	lsls	r5, r3
 80003e8:	ea26 0505 	bic.w	r5, r6, r5
 80003ec:	fa04 f303 	lsl.w	r3, r4, r3
 80003f0:	432b      	orrs	r3, r5
 80003f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80003f4:	e7ca      	b.n	800038c <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80003f6:	2607      	movs	r6, #7
 80003f8:	6911      	ldr	r1, [r2, #16]
 80003fa:	4423      	add	r3, r4
 80003fc:	409e      	lsls	r6, r3
 80003fe:	ea21 0106 	bic.w	r1, r1, r6
 8000402:	fa05 f303 	lsl.w	r3, r5, r3
 8000406:	430b      	orrs	r3, r1
 8000408:	6113      	str	r3, [r2, #16]
 800040a:	e7cf      	b.n	80003ac <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 800040c:	4b10      	ldr	r3, [pc, #64]	; (8000450 <HAL_ADC_ConfigChannel+0xfc>)
 800040e:	429a      	cmp	r2, r3
 8000410:	d116      	bne.n	8000440 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000412:	6893      	ldr	r3, [r2, #8]
 8000414:	021b      	lsls	r3, r3, #8
 8000416:	d4cd      	bmi.n	80003b4 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000418:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800041a:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800041c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000420:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000422:	d1c7      	bne.n	80003b4 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000424:	4b0b      	ldr	r3, [pc, #44]	; (8000454 <HAL_ADC_ConfigChannel+0x100>)
 8000426:	4a0c      	ldr	r2, [pc, #48]	; (8000458 <HAL_ADC_ConfigChannel+0x104>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	fbb3 f2f2 	udiv	r2, r3, r2
 800042e:	230a      	movs	r3, #10
 8000430:	4353      	muls	r3, r2
            wait_loop_index--;
 8000432:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000434:	9b01      	ldr	r3, [sp, #4]
 8000436:	2b00      	cmp	r3, #0
 8000438:	d0bc      	beq.n	80003b4 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 800043a:	9b01      	ldr	r3, [sp, #4]
 800043c:	3b01      	subs	r3, #1
 800043e:	e7f8      	b.n	8000432 <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000440:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000442:	f043 0320 	orr.w	r3, r3, #32
 8000446:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8000448:	2301      	movs	r3, #1
 800044a:	e7b4      	b.n	80003b6 <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 800044c:	2302      	movs	r3, #2
 800044e:	e7b5      	b.n	80003bc <HAL_ADC_ConfigChannel+0x68>
 8000450:	40012400 	.word	0x40012400
 8000454:	20000008 	.word	0x20000008
 8000458:	000f4240 	.word	0x000f4240

0800045c <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 800045c:	2300      	movs	r3, #0
{
 800045e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000460:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000462:	6803      	ldr	r3, [r0, #0]
{
 8000464:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000466:	689a      	ldr	r2, [r3, #8]
 8000468:	07d2      	lsls	r2, r2, #31
 800046a:	d502      	bpl.n	8000472 <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800046c:	2000      	movs	r0, #0
}
 800046e:	b002      	add	sp, #8
 8000470:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8000472:	689a      	ldr	r2, [r3, #8]
 8000474:	f042 0201 	orr.w	r2, r2, #1
 8000478:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800047a:	4b12      	ldr	r3, [pc, #72]	; (80004c4 <ADC_Enable+0x68>)
 800047c:	4a12      	ldr	r2, [pc, #72]	; (80004c8 <ADC_Enable+0x6c>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8000484:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8000486:	9b01      	ldr	r3, [sp, #4]
 8000488:	b9c3      	cbnz	r3, 80004bc <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 800048a:	f7ff fea9 	bl	80001e0 <HAL_GetTick>
 800048e:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000490:	6823      	ldr	r3, [r4, #0]
 8000492:	689d      	ldr	r5, [r3, #8]
 8000494:	f015 0501 	ands.w	r5, r5, #1
 8000498:	d1e8      	bne.n	800046c <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800049a:	f7ff fea1 	bl	80001e0 <HAL_GetTick>
 800049e:	1b80      	subs	r0, r0, r6
 80004a0:	2802      	cmp	r0, #2
 80004a2:	d9f5      	bls.n	8000490 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80004a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 80004a6:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80004aa:	f043 0310 	orr.w	r3, r3, #16
 80004ae:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 80004b2:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004b4:	f043 0301 	orr.w	r3, r3, #1
 80004b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80004ba:	e7d8      	b.n	800046e <ADC_Enable+0x12>
      wait_loop_index--;
 80004bc:	9b01      	ldr	r3, [sp, #4]
 80004be:	3b01      	subs	r3, #1
 80004c0:	e7e0      	b.n	8000484 <ADC_Enable+0x28>
 80004c2:	bf00      	nop
 80004c4:	20000008 	.word	0x20000008
 80004c8:	000f4240 	.word	0x000f4240

080004cc <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 80004cc:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 80004d0:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 80004d2:	2b01      	cmp	r3, #1
{
 80004d4:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80004d6:	d054      	beq.n	8000582 <HAL_ADC_Start+0xb6>
 80004d8:	2301      	movs	r3, #1
 80004da:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 80004de:	f7ff ffbd 	bl	800045c <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 80004e2:	2800      	cmp	r0, #0
 80004e4:	d149      	bne.n	800057a <HAL_ADC_Start+0xae>
    ADC_STATE_CLR_SET(hadc->State,
 80004e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80004e8:	4a27      	ldr	r2, [pc, #156]	; (8000588 <HAL_ADC_Start+0xbc>)
    ADC_STATE_CLR_SET(hadc->State,
 80004ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80004ee:	f023 0301 	bic.w	r3, r3, #1
 80004f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004f6:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80004f8:	6823      	ldr	r3, [r4, #0]
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d104      	bne.n	8000508 <HAL_ADC_Start+0x3c>
 80004fe:	4923      	ldr	r1, [pc, #140]	; (800058c <HAL_ADC_Start+0xc0>)
 8000500:	684a      	ldr	r2, [r1, #4]
 8000502:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8000506:	d12e      	bne.n	8000566 <HAL_ADC_Start+0x9a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000508:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800050a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800050e:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000510:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000512:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000514:	bf41      	itttt	mi
 8000516:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 8000518:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 800051c:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8000520:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000522:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000524:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000528:	bf1c      	itt	ne
 800052a:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 800052c:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8000530:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 8000532:	2200      	movs	r2, #0
 8000534:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000538:	f06f 0202 	mvn.w	r2, #2
 800053c:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800053e:	689a      	ldr	r2, [r3, #8]
 8000540:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000544:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000548:	d113      	bne.n	8000572 <HAL_ADC_Start+0xa6>
 800054a:	4a0f      	ldr	r2, [pc, #60]	; (8000588 <HAL_ADC_Start+0xbc>)
 800054c:	4293      	cmp	r3, r2
 800054e:	d105      	bne.n	800055c <HAL_ADC_Start+0x90>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000550:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8000554:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000556:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 800055a:	d10a      	bne.n	8000572 <HAL_ADC_Start+0xa6>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800055c:	689a      	ldr	r2, [r3, #8]
 800055e:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000566:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000568:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800056c:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800056e:	684a      	ldr	r2, [r1, #4]
 8000570:	e7cf      	b.n	8000512 <HAL_ADC_Start+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000572:	689a      	ldr	r2, [r3, #8]
 8000574:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000578:	e7f3      	b.n	8000562 <HAL_ADC_Start+0x96>
    __HAL_UNLOCK(hadc);
 800057a:	2300      	movs	r3, #0
 800057c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8000580:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8000582:	2002      	movs	r0, #2
}
 8000584:	bd10      	pop	{r4, pc}
 8000586:	bf00      	nop
 8000588:	40012800 	.word	0x40012800
 800058c:	40012400 	.word	0x40012400

08000590 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000590:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000592:	6803      	ldr	r3, [r0, #0]
{
 8000594:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000596:	689a      	ldr	r2, [r3, #8]
 8000598:	07d2      	lsls	r2, r2, #31
 800059a:	d401      	bmi.n	80005a0 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800059c:	2000      	movs	r0, #0
 800059e:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 80005a0:	689a      	ldr	r2, [r3, #8]
 80005a2:	f022 0201 	bic.w	r2, r2, #1
 80005a6:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80005a8:	f7ff fe1a 	bl	80001e0 <HAL_GetTick>
 80005ac:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80005ae:	6823      	ldr	r3, [r4, #0]
 80005b0:	689b      	ldr	r3, [r3, #8]
 80005b2:	07db      	lsls	r3, r3, #31
 80005b4:	d5f2      	bpl.n	800059c <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80005b6:	f7ff fe13 	bl	80001e0 <HAL_GetTick>
 80005ba:	1b40      	subs	r0, r0, r5
 80005bc:	2802      	cmp	r0, #2
 80005be:	d9f6      	bls.n	80005ae <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80005c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80005c2:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80005c4:	f043 0310 	orr.w	r3, r3, #16
 80005c8:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80005ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80005cc:	f043 0301 	orr.w	r3, r3, #1
 80005d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80005d2:	bd38      	pop	{r3, r4, r5, pc}

080005d4 <HAL_ADC_Init>:
{
 80005d4:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 80005d6:	4604      	mov	r4, r0
 80005d8:	2800      	cmp	r0, #0
 80005da:	d071      	beq.n	80006c0 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80005dc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80005de:	b923      	cbnz	r3, 80005ea <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 80005e0:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80005e2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 80005e6:	f000 fff9 	bl	80015dc <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80005ea:	4620      	mov	r0, r4
 80005ec:	f7ff ffd0 	bl	8000590 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80005f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80005f2:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 80005f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80005f8:	d164      	bne.n	80006c4 <HAL_ADC_Init+0xf0>
 80005fa:	2800      	cmp	r0, #0
 80005fc:	d162      	bne.n	80006c4 <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80005fe:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8000600:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000604:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8000606:	f023 0302 	bic.w	r3, r3, #2
 800060a:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800060e:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000610:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8000612:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8000614:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000616:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 800061a:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800061e:	d038      	beq.n	8000692 <HAL_ADC_Init+0xbe>
 8000620:	2901      	cmp	r1, #1
 8000622:	bf14      	ite	ne
 8000624:	4606      	movne	r6, r0
 8000626:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800062a:	6965      	ldr	r5, [r4, #20]
 800062c:	2d01      	cmp	r5, #1
 800062e:	d107      	bne.n	8000640 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000630:	2b00      	cmp	r3, #0
 8000632:	d130      	bne.n	8000696 <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000634:	69a3      	ldr	r3, [r4, #24]
 8000636:	3b01      	subs	r3, #1
 8000638:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 800063c:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8000640:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000642:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8000646:	685d      	ldr	r5, [r3, #4]
 8000648:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 800064c:	ea45 0506 	orr.w	r5, r5, r6
 8000650:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000652:	689e      	ldr	r6, [r3, #8]
 8000654:	4d1d      	ldr	r5, [pc, #116]	; (80006cc <HAL_ADC_Init+0xf8>)
 8000656:	ea05 0506 	and.w	r5, r5, r6
 800065a:	ea45 0502 	orr.w	r5, r5, r2
 800065e:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000660:	d001      	beq.n	8000666 <HAL_ADC_Init+0x92>
 8000662:	2901      	cmp	r1, #1
 8000664:	d120      	bne.n	80006a8 <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000666:	6921      	ldr	r1, [r4, #16]
 8000668:	3901      	subs	r1, #1
 800066a:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 800066c:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800066e:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8000672:	4329      	orrs	r1, r5
 8000674:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000676:	6899      	ldr	r1, [r3, #8]
 8000678:	4b15      	ldr	r3, [pc, #84]	; (80006d0 <HAL_ADC_Init+0xfc>)
 800067a:	400b      	ands	r3, r1
 800067c:	429a      	cmp	r2, r3
 800067e:	d115      	bne.n	80006ac <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 8000680:	2300      	movs	r3, #0
 8000682:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8000684:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000686:	f023 0303 	bic.w	r3, r3, #3
 800068a:	f043 0301 	orr.w	r3, r3, #1
 800068e:	62a3      	str	r3, [r4, #40]	; 0x28
 8000690:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000692:	460e      	mov	r6, r1
 8000694:	e7c9      	b.n	800062a <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000696:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000698:	f043 0320 	orr.w	r3, r3, #32
 800069c:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800069e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80006a0:	f043 0301 	orr.w	r3, r3, #1
 80006a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80006a6:	e7cb      	b.n	8000640 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 80006a8:	2100      	movs	r1, #0
 80006aa:	e7df      	b.n	800066c <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 80006ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80006ae:	f023 0312 	bic.w	r3, r3, #18
 80006b2:	f043 0310 	orr.w	r3, r3, #16
 80006b6:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80006b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80006ba:	f043 0301 	orr.w	r3, r3, #1
 80006be:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 80006c0:	2001      	movs	r0, #1
}
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80006c4:	f043 0310 	orr.w	r3, r3, #16
 80006c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80006ca:	e7f9      	b.n	80006c0 <HAL_ADC_Init+0xec>
 80006cc:	ffe1f7fd 	.word	0xffe1f7fd
 80006d0:	ff1f0efe 	.word	0xff1f0efe

080006d4 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 80006d4:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 80006d8:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 80006da:	2b01      	cmp	r3, #1
{
 80006dc:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80006de:	d011      	beq.n	8000704 <HAL_ADC_Stop+0x30>
 80006e0:	2301      	movs	r3, #1
 80006e2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80006e6:	f7ff ff53 	bl	8000590 <ADC_ConversionStop_Disable>
  if (tmp_hal_status == HAL_OK)
 80006ea:	b938      	cbnz	r0, 80006fc <HAL_ADC_Stop+0x28>
    ADC_STATE_CLR_SET(hadc->State,
 80006ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80006ee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80006f2:	f023 0301 	bic.w	r3, r3, #1
 80006f6:	f043 0301 	orr.w	r3, r3, #1
 80006fa:	62a3      	str	r3, [r4, #40]	; 0x28
  __HAL_UNLOCK(hadc);
 80006fc:	2300      	movs	r3, #0
 80006fe:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  return tmp_hal_status;
 8000702:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8000704:	2002      	movs	r0, #2
}
 8000706:	bd10      	pop	{r4, pc}

08000708 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000708:	4a07      	ldr	r2, [pc, #28]	; (8000728 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800070a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800070c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800070e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000712:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000716:	041b      	lsls	r3, r3, #16
 8000718:	0c1b      	lsrs	r3, r3, #16
 800071a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800071e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000722:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000724:	60d3      	str	r3, [r2, #12]
 8000726:	4770      	bx	lr
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800072e:	b530      	push	{r4, r5, lr}
 8000730:	68dc      	ldr	r4, [r3, #12]
 8000732:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000736:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800073a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800073c:	2b04      	cmp	r3, #4
 800073e:	bf28      	it	cs
 8000740:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000742:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000744:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000748:	bf98      	it	ls
 800074a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800074c:	fa05 f303 	lsl.w	r3, r5, r3
 8000750:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000754:	bf88      	it	hi
 8000756:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000758:	4019      	ands	r1, r3
 800075a:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800075c:	fa05 f404 	lsl.w	r4, r5, r4
 8000760:	3c01      	subs	r4, #1
 8000762:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000764:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000766:	ea42 0201 	orr.w	r2, r2, r1
 800076a:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800076e:	bfaf      	iteee	ge
 8000770:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000774:	4b06      	ldrlt	r3, [pc, #24]	; (8000790 <HAL_NVIC_SetPriority+0x64>)
 8000776:	f000 000f 	andlt.w	r0, r0, #15
 800077a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800077c:	bfa5      	ittet	ge
 800077e:	b2d2      	uxtbge	r2, r2
 8000780:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000784:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000786:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800078a:	bd30      	pop	{r4, r5, pc}
 800078c:	e000ed00 	.word	0xe000ed00
 8000790:	e000ed14 	.word	0xe000ed14

08000794 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000794:	3801      	subs	r0, #1
 8000796:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800079a:	d20a      	bcs.n	80007b2 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800079c:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a0:	4a06      	ldr	r2, [pc, #24]	; (80007bc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007a2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007a8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007aa:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007ac:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80007b2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	e000e010 	.word	0xe000e010
 80007bc:	e000ed00 	.word	0xe000ed00

080007c0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80007c0:	4b04      	ldr	r3, [pc, #16]	; (80007d4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80007c2:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80007c4:	681a      	ldr	r2, [r3, #0]
 80007c6:	bf0c      	ite	eq
 80007c8:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80007cc:	f022 0204 	bicne.w	r2, r2, #4
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	4770      	bx	lr
 80007d4:	e000e010 	.word	0xe000e010

080007d8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80007d8:	4770      	bx	lr

080007da <HAL_SYSTICK_IRQHandler>:
{
 80007da:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80007dc:	f7ff fffc 	bl	80007d8 <HAL_SYSTICK_Callback>
 80007e0:	bd08      	pop	{r3, pc}
	...

080007e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80007e8:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80007ea:	4616      	mov	r6, r2
 80007ec:	4b65      	ldr	r3, [pc, #404]	; (8000984 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80007ee:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000994 <HAL_GPIO_Init+0x1b0>
 80007f2:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000998 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80007f6:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007fa:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80007fc:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000800:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000804:	45a0      	cmp	r8, r4
 8000806:	d17f      	bne.n	8000908 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8000808:	684d      	ldr	r5, [r1, #4]
 800080a:	2d12      	cmp	r5, #18
 800080c:	f000 80af 	beq.w	800096e <HAL_GPIO_Init+0x18a>
 8000810:	f200 8088 	bhi.w	8000924 <HAL_GPIO_Init+0x140>
 8000814:	2d02      	cmp	r5, #2
 8000816:	f000 80a7 	beq.w	8000968 <HAL_GPIO_Init+0x184>
 800081a:	d87c      	bhi.n	8000916 <HAL_GPIO_Init+0x132>
 800081c:	2d00      	cmp	r5, #0
 800081e:	f000 808e 	beq.w	800093e <HAL_GPIO_Init+0x15a>
 8000822:	2d01      	cmp	r5, #1
 8000824:	f000 809e 	beq.w	8000964 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000828:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800082c:	2cff      	cmp	r4, #255	; 0xff
 800082e:	bf93      	iteet	ls
 8000830:	4682      	movls	sl, r0
 8000832:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000836:	3d08      	subhi	r5, #8
 8000838:	f8d0 b000 	ldrls.w	fp, [r0]
 800083c:	bf92      	itee	ls
 800083e:	00b5      	lslls	r5, r6, #2
 8000840:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000844:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000846:	fa09 f805 	lsl.w	r8, r9, r5
 800084a:	ea2b 0808 	bic.w	r8, fp, r8
 800084e:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000852:	bf88      	it	hi
 8000854:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000858:	ea48 0505 	orr.w	r5, r8, r5
 800085c:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000860:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000864:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000868:	d04e      	beq.n	8000908 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800086a:	4d47      	ldr	r5, [pc, #284]	; (8000988 <HAL_GPIO_Init+0x1a4>)
 800086c:	4f46      	ldr	r7, [pc, #280]	; (8000988 <HAL_GPIO_Init+0x1a4>)
 800086e:	69ad      	ldr	r5, [r5, #24]
 8000870:	f026 0803 	bic.w	r8, r6, #3
 8000874:	f045 0501 	orr.w	r5, r5, #1
 8000878:	61bd      	str	r5, [r7, #24]
 800087a:	69bd      	ldr	r5, [r7, #24]
 800087c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000880:	f005 0501 	and.w	r5, r5, #1
 8000884:	9501      	str	r5, [sp, #4]
 8000886:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800088a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800088e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000890:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000894:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000898:	fa09 f90b 	lsl.w	r9, r9, fp
 800089c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008a0:	4d3a      	ldr	r5, [pc, #232]	; (800098c <HAL_GPIO_Init+0x1a8>)
 80008a2:	42a8      	cmp	r0, r5
 80008a4:	d068      	beq.n	8000978 <HAL_GPIO_Init+0x194>
 80008a6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80008aa:	42a8      	cmp	r0, r5
 80008ac:	d066      	beq.n	800097c <HAL_GPIO_Init+0x198>
 80008ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80008b2:	42a8      	cmp	r0, r5
 80008b4:	d064      	beq.n	8000980 <HAL_GPIO_Init+0x19c>
 80008b6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80008ba:	42a8      	cmp	r0, r5
 80008bc:	bf0c      	ite	eq
 80008be:	2503      	moveq	r5, #3
 80008c0:	2504      	movne	r5, #4
 80008c2:	fa05 f50b 	lsl.w	r5, r5, fp
 80008c6:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80008ca:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80008ce:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008d0:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80008d4:	bf14      	ite	ne
 80008d6:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80008d8:	43a5      	biceq	r5, r4
 80008da:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80008dc:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008de:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80008e2:	bf14      	ite	ne
 80008e4:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80008e6:	43a5      	biceq	r5, r4
 80008e8:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80008ea:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008ec:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80008f0:	bf14      	ite	ne
 80008f2:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80008f4:	43a5      	biceq	r5, r4
 80008f6:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80008f8:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008fa:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80008fe:	bf14      	ite	ne
 8000900:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000902:	ea25 0404 	biceq.w	r4, r5, r4
 8000906:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000908:	3601      	adds	r6, #1
 800090a:	2e10      	cmp	r6, #16
 800090c:	f47f af73 	bne.w	80007f6 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8000910:	b003      	add	sp, #12
 8000912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000916:	2d03      	cmp	r5, #3
 8000918:	d022      	beq.n	8000960 <HAL_GPIO_Init+0x17c>
 800091a:	2d11      	cmp	r5, #17
 800091c:	d184      	bne.n	8000828 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800091e:	68ca      	ldr	r2, [r1, #12]
 8000920:	3204      	adds	r2, #4
          break;
 8000922:	e781      	b.n	8000828 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000924:	4f1a      	ldr	r7, [pc, #104]	; (8000990 <HAL_GPIO_Init+0x1ac>)
 8000926:	42bd      	cmp	r5, r7
 8000928:	d009      	beq.n	800093e <HAL_GPIO_Init+0x15a>
 800092a:	d812      	bhi.n	8000952 <HAL_GPIO_Init+0x16e>
 800092c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 800099c <HAL_GPIO_Init+0x1b8>
 8000930:	454d      	cmp	r5, r9
 8000932:	d004      	beq.n	800093e <HAL_GPIO_Init+0x15a>
 8000934:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000938:	454d      	cmp	r5, r9
 800093a:	f47f af75 	bne.w	8000828 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800093e:	688a      	ldr	r2, [r1, #8]
 8000940:	b1c2      	cbz	r2, 8000974 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000942:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000944:	bf0c      	ite	eq
 8000946:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800094a:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800094e:	2208      	movs	r2, #8
 8000950:	e76a      	b.n	8000828 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000952:	4575      	cmp	r5, lr
 8000954:	d0f3      	beq.n	800093e <HAL_GPIO_Init+0x15a>
 8000956:	4565      	cmp	r5, ip
 8000958:	d0f1      	beq.n	800093e <HAL_GPIO_Init+0x15a>
 800095a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80009a0 <HAL_GPIO_Init+0x1bc>
 800095e:	e7eb      	b.n	8000938 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000960:	2200      	movs	r2, #0
 8000962:	e761      	b.n	8000828 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000964:	68ca      	ldr	r2, [r1, #12]
          break;
 8000966:	e75f      	b.n	8000828 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000968:	68ca      	ldr	r2, [r1, #12]
 800096a:	3208      	adds	r2, #8
          break;
 800096c:	e75c      	b.n	8000828 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800096e:	68ca      	ldr	r2, [r1, #12]
 8000970:	320c      	adds	r2, #12
          break;
 8000972:	e759      	b.n	8000828 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000974:	2204      	movs	r2, #4
 8000976:	e757      	b.n	8000828 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000978:	2500      	movs	r5, #0
 800097a:	e7a2      	b.n	80008c2 <HAL_GPIO_Init+0xde>
 800097c:	2501      	movs	r5, #1
 800097e:	e7a0      	b.n	80008c2 <HAL_GPIO_Init+0xde>
 8000980:	2502      	movs	r5, #2
 8000982:	e79e      	b.n	80008c2 <HAL_GPIO_Init+0xde>
 8000984:	40010400 	.word	0x40010400
 8000988:	40021000 	.word	0x40021000
 800098c:	40010800 	.word	0x40010800
 8000990:	10210000 	.word	0x10210000
 8000994:	10310000 	.word	0x10310000
 8000998:	10320000 	.word	0x10320000
 800099c:	10110000 	.word	0x10110000
 80009a0:	10220000 	.word	0x10220000

080009a4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80009a4:	b10a      	cbz	r2, 80009aa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80009a6:	6101      	str	r1, [r0, #16]
 80009a8:	4770      	bx	lr
 80009aa:	0409      	lsls	r1, r1, #16
 80009ac:	e7fb      	b.n	80009a6 <HAL_GPIO_WritePin+0x2>

080009ae <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80009ae:	68c3      	ldr	r3, [r0, #12]
 80009b0:	4059      	eors	r1, r3
 80009b2:	60c1      	str	r1, [r0, #12]
 80009b4:	4770      	bx	lr
	...

080009b8 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009b8:	6803      	ldr	r3, [r0, #0]
{
 80009ba:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009be:	07db      	lsls	r3, r3, #31
{
 80009c0:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009c2:	d410      	bmi.n	80009e6 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80009c4:	682b      	ldr	r3, [r5, #0]
 80009c6:	079f      	lsls	r7, r3, #30
 80009c8:	d45e      	bmi.n	8000a88 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80009ca:	682b      	ldr	r3, [r5, #0]
 80009cc:	0719      	lsls	r1, r3, #28
 80009ce:	f100 8095 	bmi.w	8000afc <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80009d2:	682b      	ldr	r3, [r5, #0]
 80009d4:	075a      	lsls	r2, r3, #29
 80009d6:	f100 80bf 	bmi.w	8000b58 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80009da:	69ea      	ldr	r2, [r5, #28]
 80009dc:	2a00      	cmp	r2, #0
 80009de:	f040 812d 	bne.w	8000c3c <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80009e2:	2000      	movs	r0, #0
 80009e4:	e014      	b.n	8000a10 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80009e6:	4c90      	ldr	r4, [pc, #576]	; (8000c28 <HAL_RCC_OscConfig+0x270>)
 80009e8:	6863      	ldr	r3, [r4, #4]
 80009ea:	f003 030c 	and.w	r3, r3, #12
 80009ee:	2b04      	cmp	r3, #4
 80009f0:	d007      	beq.n	8000a02 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80009f2:	6863      	ldr	r3, [r4, #4]
 80009f4:	f003 030c 	and.w	r3, r3, #12
 80009f8:	2b08      	cmp	r3, #8
 80009fa:	d10c      	bne.n	8000a16 <HAL_RCC_OscConfig+0x5e>
 80009fc:	6863      	ldr	r3, [r4, #4]
 80009fe:	03de      	lsls	r6, r3, #15
 8000a00:	d509      	bpl.n	8000a16 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a02:	6823      	ldr	r3, [r4, #0]
 8000a04:	039c      	lsls	r4, r3, #14
 8000a06:	d5dd      	bpl.n	80009c4 <HAL_RCC_OscConfig+0xc>
 8000a08:	686b      	ldr	r3, [r5, #4]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d1da      	bne.n	80009c4 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000a0e:	2001      	movs	r0, #1
}
 8000a10:	b002      	add	sp, #8
 8000a12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a16:	686b      	ldr	r3, [r5, #4]
 8000a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a1c:	d110      	bne.n	8000a40 <HAL_RCC_OscConfig+0x88>
 8000a1e:	6823      	ldr	r3, [r4, #0]
 8000a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a24:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000a26:	f7ff fbdb 	bl	80001e0 <HAL_GetTick>
 8000a2a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a2c:	6823      	ldr	r3, [r4, #0]
 8000a2e:	0398      	lsls	r0, r3, #14
 8000a30:	d4c8      	bmi.n	80009c4 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a32:	f7ff fbd5 	bl	80001e0 <HAL_GetTick>
 8000a36:	1b80      	subs	r0, r0, r6
 8000a38:	2864      	cmp	r0, #100	; 0x64
 8000a3a:	d9f7      	bls.n	8000a2c <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000a3c:	2003      	movs	r0, #3
 8000a3e:	e7e7      	b.n	8000a10 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a40:	b99b      	cbnz	r3, 8000a6a <HAL_RCC_OscConfig+0xb2>
 8000a42:	6823      	ldr	r3, [r4, #0]
 8000a44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a48:	6023      	str	r3, [r4, #0]
 8000a4a:	6823      	ldr	r3, [r4, #0]
 8000a4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a50:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000a52:	f7ff fbc5 	bl	80001e0 <HAL_GetTick>
 8000a56:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a58:	6823      	ldr	r3, [r4, #0]
 8000a5a:	0399      	lsls	r1, r3, #14
 8000a5c:	d5b2      	bpl.n	80009c4 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a5e:	f7ff fbbf 	bl	80001e0 <HAL_GetTick>
 8000a62:	1b80      	subs	r0, r0, r6
 8000a64:	2864      	cmp	r0, #100	; 0x64
 8000a66:	d9f7      	bls.n	8000a58 <HAL_RCC_OscConfig+0xa0>
 8000a68:	e7e8      	b.n	8000a3c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a6a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000a6e:	6823      	ldr	r3, [r4, #0]
 8000a70:	d103      	bne.n	8000a7a <HAL_RCC_OscConfig+0xc2>
 8000a72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a76:	6023      	str	r3, [r4, #0]
 8000a78:	e7d1      	b.n	8000a1e <HAL_RCC_OscConfig+0x66>
 8000a7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a7e:	6023      	str	r3, [r4, #0]
 8000a80:	6823      	ldr	r3, [r4, #0]
 8000a82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a86:	e7cd      	b.n	8000a24 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000a88:	4c67      	ldr	r4, [pc, #412]	; (8000c28 <HAL_RCC_OscConfig+0x270>)
 8000a8a:	6863      	ldr	r3, [r4, #4]
 8000a8c:	f013 0f0c 	tst.w	r3, #12
 8000a90:	d007      	beq.n	8000aa2 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000a92:	6863      	ldr	r3, [r4, #4]
 8000a94:	f003 030c 	and.w	r3, r3, #12
 8000a98:	2b08      	cmp	r3, #8
 8000a9a:	d110      	bne.n	8000abe <HAL_RCC_OscConfig+0x106>
 8000a9c:	6863      	ldr	r3, [r4, #4]
 8000a9e:	03da      	lsls	r2, r3, #15
 8000aa0:	d40d      	bmi.n	8000abe <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000aa2:	6823      	ldr	r3, [r4, #0]
 8000aa4:	079b      	lsls	r3, r3, #30
 8000aa6:	d502      	bpl.n	8000aae <HAL_RCC_OscConfig+0xf6>
 8000aa8:	692b      	ldr	r3, [r5, #16]
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d1af      	bne.n	8000a0e <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000aae:	6823      	ldr	r3, [r4, #0]
 8000ab0:	696a      	ldr	r2, [r5, #20]
 8000ab2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000ab6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000aba:	6023      	str	r3, [r4, #0]
 8000abc:	e785      	b.n	80009ca <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000abe:	692a      	ldr	r2, [r5, #16]
 8000ac0:	4b5a      	ldr	r3, [pc, #360]	; (8000c2c <HAL_RCC_OscConfig+0x274>)
 8000ac2:	b16a      	cbz	r2, 8000ae0 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ac8:	f7ff fb8a 	bl	80001e0 <HAL_GetTick>
 8000acc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ace:	6823      	ldr	r3, [r4, #0]
 8000ad0:	079f      	lsls	r7, r3, #30
 8000ad2:	d4ec      	bmi.n	8000aae <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ad4:	f7ff fb84 	bl	80001e0 <HAL_GetTick>
 8000ad8:	1b80      	subs	r0, r0, r6
 8000ada:	2802      	cmp	r0, #2
 8000adc:	d9f7      	bls.n	8000ace <HAL_RCC_OscConfig+0x116>
 8000ade:	e7ad      	b.n	8000a3c <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000ae0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ae2:	f7ff fb7d 	bl	80001e0 <HAL_GetTick>
 8000ae6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ae8:	6823      	ldr	r3, [r4, #0]
 8000aea:	0798      	lsls	r0, r3, #30
 8000aec:	f57f af6d 	bpl.w	80009ca <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000af0:	f7ff fb76 	bl	80001e0 <HAL_GetTick>
 8000af4:	1b80      	subs	r0, r0, r6
 8000af6:	2802      	cmp	r0, #2
 8000af8:	d9f6      	bls.n	8000ae8 <HAL_RCC_OscConfig+0x130>
 8000afa:	e79f      	b.n	8000a3c <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000afc:	69aa      	ldr	r2, [r5, #24]
 8000afe:	4c4a      	ldr	r4, [pc, #296]	; (8000c28 <HAL_RCC_OscConfig+0x270>)
 8000b00:	4b4b      	ldr	r3, [pc, #300]	; (8000c30 <HAL_RCC_OscConfig+0x278>)
 8000b02:	b1da      	cbz	r2, 8000b3c <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000b04:	2201      	movs	r2, #1
 8000b06:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000b08:	f7ff fb6a 	bl	80001e0 <HAL_GetTick>
 8000b0c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000b10:	079b      	lsls	r3, r3, #30
 8000b12:	d50d      	bpl.n	8000b30 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000b14:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000b18:	4b46      	ldr	r3, [pc, #280]	; (8000c34 <HAL_RCC_OscConfig+0x27c>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000b20:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000b22:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000b24:	9b01      	ldr	r3, [sp, #4]
 8000b26:	1e5a      	subs	r2, r3, #1
 8000b28:	9201      	str	r2, [sp, #4]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d1f9      	bne.n	8000b22 <HAL_RCC_OscConfig+0x16a>
 8000b2e:	e750      	b.n	80009d2 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b30:	f7ff fb56 	bl	80001e0 <HAL_GetTick>
 8000b34:	1b80      	subs	r0, r0, r6
 8000b36:	2802      	cmp	r0, #2
 8000b38:	d9e9      	bls.n	8000b0e <HAL_RCC_OscConfig+0x156>
 8000b3a:	e77f      	b.n	8000a3c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000b3c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000b3e:	f7ff fb4f 	bl	80001e0 <HAL_GetTick>
 8000b42:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000b46:	079f      	lsls	r7, r3, #30
 8000b48:	f57f af43 	bpl.w	80009d2 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b4c:	f7ff fb48 	bl	80001e0 <HAL_GetTick>
 8000b50:	1b80      	subs	r0, r0, r6
 8000b52:	2802      	cmp	r0, #2
 8000b54:	d9f6      	bls.n	8000b44 <HAL_RCC_OscConfig+0x18c>
 8000b56:	e771      	b.n	8000a3c <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b58:	4c33      	ldr	r4, [pc, #204]	; (8000c28 <HAL_RCC_OscConfig+0x270>)
 8000b5a:	69e3      	ldr	r3, [r4, #28]
 8000b5c:	00d8      	lsls	r0, r3, #3
 8000b5e:	d424      	bmi.n	8000baa <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000b60:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000b62:	69e3      	ldr	r3, [r4, #28]
 8000b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b68:	61e3      	str	r3, [r4, #28]
 8000b6a:	69e3      	ldr	r3, [r4, #28]
 8000b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b70:	9300      	str	r3, [sp, #0]
 8000b72:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b74:	4e30      	ldr	r6, [pc, #192]	; (8000c38 <HAL_RCC_OscConfig+0x280>)
 8000b76:	6833      	ldr	r3, [r6, #0]
 8000b78:	05d9      	lsls	r1, r3, #23
 8000b7a:	d518      	bpl.n	8000bae <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b7c:	68eb      	ldr	r3, [r5, #12]
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d126      	bne.n	8000bd0 <HAL_RCC_OscConfig+0x218>
 8000b82:	6a23      	ldr	r3, [r4, #32]
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000b8a:	f7ff fb29 	bl	80001e0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b8e:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000b92:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b94:	6a23      	ldr	r3, [r4, #32]
 8000b96:	079b      	lsls	r3, r3, #30
 8000b98:	d53f      	bpl.n	8000c1a <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000b9a:	2f00      	cmp	r7, #0
 8000b9c:	f43f af1d 	beq.w	80009da <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ba0:	69e3      	ldr	r3, [r4, #28]
 8000ba2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ba6:	61e3      	str	r3, [r4, #28]
 8000ba8:	e717      	b.n	80009da <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000baa:	2700      	movs	r7, #0
 8000bac:	e7e2      	b.n	8000b74 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000bae:	6833      	ldr	r3, [r6, #0]
 8000bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bb4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000bb6:	f7ff fb13 	bl	80001e0 <HAL_GetTick>
 8000bba:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bbc:	6833      	ldr	r3, [r6, #0]
 8000bbe:	05da      	lsls	r2, r3, #23
 8000bc0:	d4dc      	bmi.n	8000b7c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000bc2:	f7ff fb0d 	bl	80001e0 <HAL_GetTick>
 8000bc6:	eba0 0008 	sub.w	r0, r0, r8
 8000bca:	2864      	cmp	r0, #100	; 0x64
 8000bcc:	d9f6      	bls.n	8000bbc <HAL_RCC_OscConfig+0x204>
 8000bce:	e735      	b.n	8000a3c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bd0:	b9ab      	cbnz	r3, 8000bfe <HAL_RCC_OscConfig+0x246>
 8000bd2:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bd4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bd8:	f023 0301 	bic.w	r3, r3, #1
 8000bdc:	6223      	str	r3, [r4, #32]
 8000bde:	6a23      	ldr	r3, [r4, #32]
 8000be0:	f023 0304 	bic.w	r3, r3, #4
 8000be4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000be6:	f7ff fafb 	bl	80001e0 <HAL_GetTick>
 8000bea:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000bec:	6a23      	ldr	r3, [r4, #32]
 8000bee:	0798      	lsls	r0, r3, #30
 8000bf0:	d5d3      	bpl.n	8000b9a <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bf2:	f7ff faf5 	bl	80001e0 <HAL_GetTick>
 8000bf6:	1b80      	subs	r0, r0, r6
 8000bf8:	4540      	cmp	r0, r8
 8000bfa:	d9f7      	bls.n	8000bec <HAL_RCC_OscConfig+0x234>
 8000bfc:	e71e      	b.n	8000a3c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bfe:	2b05      	cmp	r3, #5
 8000c00:	6a23      	ldr	r3, [r4, #32]
 8000c02:	d103      	bne.n	8000c0c <HAL_RCC_OscConfig+0x254>
 8000c04:	f043 0304 	orr.w	r3, r3, #4
 8000c08:	6223      	str	r3, [r4, #32]
 8000c0a:	e7ba      	b.n	8000b82 <HAL_RCC_OscConfig+0x1ca>
 8000c0c:	f023 0301 	bic.w	r3, r3, #1
 8000c10:	6223      	str	r3, [r4, #32]
 8000c12:	6a23      	ldr	r3, [r4, #32]
 8000c14:	f023 0304 	bic.w	r3, r3, #4
 8000c18:	e7b6      	b.n	8000b88 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c1a:	f7ff fae1 	bl	80001e0 <HAL_GetTick>
 8000c1e:	eba0 0008 	sub.w	r0, r0, r8
 8000c22:	42b0      	cmp	r0, r6
 8000c24:	d9b6      	bls.n	8000b94 <HAL_RCC_OscConfig+0x1dc>
 8000c26:	e709      	b.n	8000a3c <HAL_RCC_OscConfig+0x84>
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	42420000 	.word	0x42420000
 8000c30:	42420480 	.word	0x42420480
 8000c34:	20000008 	.word	0x20000008
 8000c38:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c3c:	4c22      	ldr	r4, [pc, #136]	; (8000cc8 <HAL_RCC_OscConfig+0x310>)
 8000c3e:	6863      	ldr	r3, [r4, #4]
 8000c40:	f003 030c 	and.w	r3, r3, #12
 8000c44:	2b08      	cmp	r3, #8
 8000c46:	f43f aee2 	beq.w	8000a0e <HAL_RCC_OscConfig+0x56>
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	4e1f      	ldr	r6, [pc, #124]	; (8000ccc <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c4e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000c50:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c52:	d12b      	bne.n	8000cac <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000c54:	f7ff fac4 	bl	80001e0 <HAL_GetTick>
 8000c58:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c5a:	6823      	ldr	r3, [r4, #0]
 8000c5c:	0199      	lsls	r1, r3, #6
 8000c5e:	d41f      	bmi.n	8000ca0 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000c60:	6a2b      	ldr	r3, [r5, #32]
 8000c62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c66:	d105      	bne.n	8000c74 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000c68:	6862      	ldr	r2, [r4, #4]
 8000c6a:	68a9      	ldr	r1, [r5, #8]
 8000c6c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000c70:	430a      	orrs	r2, r1
 8000c72:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c74:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000c76:	6862      	ldr	r2, [r4, #4]
 8000c78:	430b      	orrs	r3, r1
 8000c7a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000c82:	2301      	movs	r3, #1
 8000c84:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000c86:	f7ff faab 	bl	80001e0 <HAL_GetTick>
 8000c8a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c8c:	6823      	ldr	r3, [r4, #0]
 8000c8e:	019a      	lsls	r2, r3, #6
 8000c90:	f53f aea7 	bmi.w	80009e2 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c94:	f7ff faa4 	bl	80001e0 <HAL_GetTick>
 8000c98:	1b40      	subs	r0, r0, r5
 8000c9a:	2802      	cmp	r0, #2
 8000c9c:	d9f6      	bls.n	8000c8c <HAL_RCC_OscConfig+0x2d4>
 8000c9e:	e6cd      	b.n	8000a3c <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ca0:	f7ff fa9e 	bl	80001e0 <HAL_GetTick>
 8000ca4:	1bc0      	subs	r0, r0, r7
 8000ca6:	2802      	cmp	r0, #2
 8000ca8:	d9d7      	bls.n	8000c5a <HAL_RCC_OscConfig+0x2a2>
 8000caa:	e6c7      	b.n	8000a3c <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000cac:	f7ff fa98 	bl	80001e0 <HAL_GetTick>
 8000cb0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cb2:	6823      	ldr	r3, [r4, #0]
 8000cb4:	019b      	lsls	r3, r3, #6
 8000cb6:	f57f ae94 	bpl.w	80009e2 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cba:	f7ff fa91 	bl	80001e0 <HAL_GetTick>
 8000cbe:	1b40      	subs	r0, r0, r5
 8000cc0:	2802      	cmp	r0, #2
 8000cc2:	d9f6      	bls.n	8000cb2 <HAL_RCC_OscConfig+0x2fa>
 8000cc4:	e6ba      	b.n	8000a3c <HAL_RCC_OscConfig+0x84>
 8000cc6:	bf00      	nop
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	42420060 	.word	0x42420060

08000cd0 <HAL_RCC_GetSysClockFreq>:
{
 8000cd0:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000cd2:	4b19      	ldr	r3, [pc, #100]	; (8000d38 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000cd4:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000cd6:	ac02      	add	r4, sp, #8
 8000cd8:	f103 0510 	add.w	r5, r3, #16
 8000cdc:	4622      	mov	r2, r4
 8000cde:	6818      	ldr	r0, [r3, #0]
 8000ce0:	6859      	ldr	r1, [r3, #4]
 8000ce2:	3308      	adds	r3, #8
 8000ce4:	c203      	stmia	r2!, {r0, r1}
 8000ce6:	42ab      	cmp	r3, r5
 8000ce8:	4614      	mov	r4, r2
 8000cea:	d1f7      	bne.n	8000cdc <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000cec:	2301      	movs	r3, #1
 8000cee:	f88d 3004 	strb.w	r3, [sp, #4]
 8000cf2:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000cf4:	4911      	ldr	r1, [pc, #68]	; (8000d3c <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000cf6:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000cfa:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000cfc:	f003 020c 	and.w	r2, r3, #12
 8000d00:	2a08      	cmp	r2, #8
 8000d02:	d117      	bne.n	8000d34 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000d04:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000d08:	a806      	add	r0, sp, #24
 8000d0a:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000d0c:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000d0e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000d12:	d50c      	bpl.n	8000d2e <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000d14:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000d16:	480a      	ldr	r0, [pc, #40]	; (8000d40 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000d18:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000d1c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000d1e:	aa06      	add	r2, sp, #24
 8000d20:	4413      	add	r3, r2
 8000d22:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000d26:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000d2a:	b007      	add	sp, #28
 8000d2c:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000d2e:	4805      	ldr	r0, [pc, #20]	; (8000d44 <HAL_RCC_GetSysClockFreq+0x74>)
 8000d30:	4350      	muls	r0, r2
 8000d32:	e7fa      	b.n	8000d2a <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000d34:	4802      	ldr	r0, [pc, #8]	; (8000d40 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000d36:	e7f8      	b.n	8000d2a <HAL_RCC_GetSysClockFreq+0x5a>
 8000d38:	08002000 	.word	0x08002000
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	007a1200 	.word	0x007a1200
 8000d44:	003d0900 	.word	0x003d0900

08000d48 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d48:	4a4d      	ldr	r2, [pc, #308]	; (8000e80 <HAL_RCC_ClockConfig+0x138>)
{
 8000d4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d4e:	6813      	ldr	r3, [r2, #0]
{
 8000d50:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	428b      	cmp	r3, r1
{
 8000d58:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d5a:	d328      	bcc.n	8000dae <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d5c:	682a      	ldr	r2, [r5, #0]
 8000d5e:	0791      	lsls	r1, r2, #30
 8000d60:	d432      	bmi.n	8000dc8 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d62:	07d2      	lsls	r2, r2, #31
 8000d64:	d438      	bmi.n	8000dd8 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d66:	4a46      	ldr	r2, [pc, #280]	; (8000e80 <HAL_RCC_ClockConfig+0x138>)
 8000d68:	6813      	ldr	r3, [r2, #0]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	429e      	cmp	r6, r3
 8000d70:	d373      	bcc.n	8000e5a <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d72:	682a      	ldr	r2, [r5, #0]
 8000d74:	4c43      	ldr	r4, [pc, #268]	; (8000e84 <HAL_RCC_ClockConfig+0x13c>)
 8000d76:	f012 0f04 	tst.w	r2, #4
 8000d7a:	d179      	bne.n	8000e70 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d7c:	0713      	lsls	r3, r2, #28
 8000d7e:	d506      	bpl.n	8000d8e <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000d80:	6863      	ldr	r3, [r4, #4]
 8000d82:	692a      	ldr	r2, [r5, #16]
 8000d84:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000d88:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000d8c:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000d8e:	f7ff ff9f 	bl	8000cd0 <HAL_RCC_GetSysClockFreq>
 8000d92:	6863      	ldr	r3, [r4, #4]
 8000d94:	4a3c      	ldr	r2, [pc, #240]	; (8000e88 <HAL_RCC_ClockConfig+0x140>)
 8000d96:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000d9a:	5cd3      	ldrb	r3, [r2, r3]
 8000d9c:	40d8      	lsrs	r0, r3
 8000d9e:	4b3b      	ldr	r3, [pc, #236]	; (8000e8c <HAL_RCC_ClockConfig+0x144>)
 8000da0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000da2:	2000      	movs	r0, #0
 8000da4:	f7ff f9da 	bl	800015c <HAL_InitTick>
  return HAL_OK;
 8000da8:	2000      	movs	r0, #0
}
 8000daa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000dae:	6813      	ldr	r3, [r2, #0]
 8000db0:	f023 0307 	bic.w	r3, r3, #7
 8000db4:	430b      	orrs	r3, r1
 8000db6:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000db8:	6813      	ldr	r3, [r2, #0]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d0cc      	beq.n	8000d5c <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000dc8:	492e      	ldr	r1, [pc, #184]	; (8000e84 <HAL_RCC_ClockConfig+0x13c>)
 8000dca:	68a8      	ldr	r0, [r5, #8]
 8000dcc:	684b      	ldr	r3, [r1, #4]
 8000dce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000dd2:	4303      	orrs	r3, r0
 8000dd4:	604b      	str	r3, [r1, #4]
 8000dd6:	e7c4      	b.n	8000d62 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000dd8:	686a      	ldr	r2, [r5, #4]
 8000dda:	4c2a      	ldr	r4, [pc, #168]	; (8000e84 <HAL_RCC_ClockConfig+0x13c>)
 8000ddc:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dde:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000de0:	d11c      	bne.n	8000e1c <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000de2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000de6:	d0ec      	beq.n	8000dc2 <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000de8:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000dea:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000dee:	f023 0303 	bic.w	r3, r3, #3
 8000df2:	4313      	orrs	r3, r2
 8000df4:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8000df6:	f7ff f9f3 	bl	80001e0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000dfa:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000dfc:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d114      	bne.n	8000e2c <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e02:	6863      	ldr	r3, [r4, #4]
 8000e04:	f003 030c 	and.w	r3, r3, #12
 8000e08:	2b04      	cmp	r3, #4
 8000e0a:	d0ac      	beq.n	8000d66 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e0c:	f7ff f9e8 	bl	80001e0 <HAL_GetTick>
 8000e10:	1bc0      	subs	r0, r0, r7
 8000e12:	4540      	cmp	r0, r8
 8000e14:	d9f5      	bls.n	8000e02 <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 8000e16:	2003      	movs	r0, #3
 8000e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e1c:	2a02      	cmp	r2, #2
 8000e1e:	d102      	bne.n	8000e26 <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e20:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000e24:	e7df      	b.n	8000de6 <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e26:	f013 0f02 	tst.w	r3, #2
 8000e2a:	e7dc      	b.n	8000de6 <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	d10f      	bne.n	8000e50 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e30:	6863      	ldr	r3, [r4, #4]
 8000e32:	f003 030c 	and.w	r3, r3, #12
 8000e36:	2b08      	cmp	r3, #8
 8000e38:	d095      	beq.n	8000d66 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e3a:	f7ff f9d1 	bl	80001e0 <HAL_GetTick>
 8000e3e:	1bc0      	subs	r0, r0, r7
 8000e40:	4540      	cmp	r0, r8
 8000e42:	d9f5      	bls.n	8000e30 <HAL_RCC_ClockConfig+0xe8>
 8000e44:	e7e7      	b.n	8000e16 <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e46:	f7ff f9cb 	bl	80001e0 <HAL_GetTick>
 8000e4a:	1bc0      	subs	r0, r0, r7
 8000e4c:	4540      	cmp	r0, r8
 8000e4e:	d8e2      	bhi.n	8000e16 <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e50:	6863      	ldr	r3, [r4, #4]
 8000e52:	f013 0f0c 	tst.w	r3, #12
 8000e56:	d1f6      	bne.n	8000e46 <HAL_RCC_ClockConfig+0xfe>
 8000e58:	e785      	b.n	8000d66 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e5a:	6813      	ldr	r3, [r2, #0]
 8000e5c:	f023 0307 	bic.w	r3, r3, #7
 8000e60:	4333      	orrs	r3, r6
 8000e62:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000e64:	6813      	ldr	r3, [r2, #0]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	429e      	cmp	r6, r3
 8000e6c:	d1a9      	bne.n	8000dc2 <HAL_RCC_ClockConfig+0x7a>
 8000e6e:	e780      	b.n	8000d72 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e70:	6863      	ldr	r3, [r4, #4]
 8000e72:	68e9      	ldr	r1, [r5, #12]
 8000e74:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e78:	430b      	orrs	r3, r1
 8000e7a:	6063      	str	r3, [r4, #4]
 8000e7c:	e77e      	b.n	8000d7c <HAL_RCC_ClockConfig+0x34>
 8000e7e:	bf00      	nop
 8000e80:	40022000 	.word	0x40022000
 8000e84:	40021000 	.word	0x40021000
 8000e88:	08002026 	.word	0x08002026
 8000e8c:	20000008 	.word	0x20000008

08000e90 <HAL_RCC_GetHCLKFreq>:
}
 8000e90:	4b01      	ldr	r3, [pc, #4]	; (8000e98 <HAL_RCC_GetHCLKFreq+0x8>)
 8000e92:	6818      	ldr	r0, [r3, #0]
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	20000008 	.word	0x20000008

08000e9c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000e9c:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000e9e:	4a05      	ldr	r2, [pc, #20]	; (8000eb4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000ea6:	5cd3      	ldrb	r3, [r2, r3]
 8000ea8:	4a03      	ldr	r2, [pc, #12]	; (8000eb8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000eaa:	6810      	ldr	r0, [r2, #0]
}    
 8000eac:	40d8      	lsrs	r0, r3
 8000eae:	4770      	bx	lr
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	08002036 	.word	0x08002036
 8000eb8:	20000008 	.word	0x20000008

08000ebc <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000ebc:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000ebe:	4a05      	ldr	r2, [pc, #20]	; (8000ed4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000ec6:	5cd3      	ldrb	r3, [r2, r3]
 8000ec8:	4a03      	ldr	r2, [pc, #12]	; (8000ed8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000eca:	6810      	ldr	r0, [r2, #0]
} 
 8000ecc:	40d8      	lsrs	r0, r3
 8000ece:	4770      	bx	lr
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	08002036 	.word	0x08002036
 8000ed8:	20000008 	.word	0x20000008

08000edc <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000edc:	6803      	ldr	r3, [r0, #0]
{
 8000ede:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000ee2:	07d9      	lsls	r1, r3, #31
{
 8000ee4:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000ee6:	d520      	bpl.n	8000f2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ee8:	4c35      	ldr	r4, [pc, #212]	; (8000fc0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8000eea:	69e3      	ldr	r3, [r4, #28]
 8000eec:	00da      	lsls	r2, r3, #3
 8000eee:	d432      	bmi.n	8000f56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8000ef0:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8000ef2:	69e3      	ldr	r3, [r4, #28]
 8000ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef8:	61e3      	str	r3, [r4, #28]
 8000efa:	69e3      	ldr	r3, [r4, #28]
 8000efc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f00:	9301      	str	r3, [sp, #4]
 8000f02:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f04:	4e2f      	ldr	r6, [pc, #188]	; (8000fc4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8000f06:	6833      	ldr	r3, [r6, #0]
 8000f08:	05db      	lsls	r3, r3, #23
 8000f0a:	d526      	bpl.n	8000f5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000f0c:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000f0e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000f12:	d136      	bne.n	8000f82 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8000f14:	6a23      	ldr	r3, [r4, #32]
 8000f16:	686a      	ldr	r2, [r5, #4]
 8000f18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000f20:	b11f      	cbz	r7, 8000f2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f22:	69e3      	ldr	r3, [r4, #28]
 8000f24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f28:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8000f2a:	6828      	ldr	r0, [r5, #0]
 8000f2c:	0783      	lsls	r3, r0, #30
 8000f2e:	d506      	bpl.n	8000f3e <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8000f30:	4a23      	ldr	r2, [pc, #140]	; (8000fc0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8000f32:	68a9      	ldr	r1, [r5, #8]
 8000f34:	6853      	ldr	r3, [r2, #4]
 8000f36:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f3a:	430b      	orrs	r3, r1
 8000f3c:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8000f3e:	f010 0010 	ands.w	r0, r0, #16
 8000f42:	d01b      	beq.n	8000f7c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000f44:	4a1e      	ldr	r2, [pc, #120]	; (8000fc0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8000f46:	68e9      	ldr	r1, [r5, #12]
 8000f48:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8000f4a:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000f4c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000f50:	430b      	orrs	r3, r1
 8000f52:	6053      	str	r3, [r2, #4]
 8000f54:	e012      	b.n	8000f7c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8000f56:	2700      	movs	r7, #0
 8000f58:	e7d4      	b.n	8000f04 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f5a:	6833      	ldr	r3, [r6, #0]
 8000f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f60:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000f62:	f7ff f93d 	bl	80001e0 <HAL_GetTick>
 8000f66:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f68:	6833      	ldr	r3, [r6, #0]
 8000f6a:	05d8      	lsls	r0, r3, #23
 8000f6c:	d4ce      	bmi.n	8000f0c <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f6e:	f7ff f937 	bl	80001e0 <HAL_GetTick>
 8000f72:	eba0 0008 	sub.w	r0, r0, r8
 8000f76:	2864      	cmp	r0, #100	; 0x64
 8000f78:	d9f6      	bls.n	8000f68 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8000f7a:	2003      	movs	r0, #3
}
 8000f7c:	b002      	add	sp, #8
 8000f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000f82:	686a      	ldr	r2, [r5, #4]
 8000f84:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d0c3      	beq.n	8000f14 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	4a0e      	ldr	r2, [pc, #56]	; (8000fc8 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000f90:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8000f92:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000f94:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000f96:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000f9a:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8000f9c:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000f9e:	07d9      	lsls	r1, r3, #31
 8000fa0:	d5b8      	bpl.n	8000f14 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8000fa2:	f7ff f91d 	bl	80001e0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fa6:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8000faa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fac:	6a23      	ldr	r3, [r4, #32]
 8000fae:	079a      	lsls	r2, r3, #30
 8000fb0:	d4b0      	bmi.n	8000f14 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fb2:	f7ff f915 	bl	80001e0 <HAL_GetTick>
 8000fb6:	1b80      	subs	r0, r0, r6
 8000fb8:	4540      	cmp	r0, r8
 8000fba:	d9f7      	bls.n	8000fac <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8000fbc:	e7dd      	b.n	8000f7a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8000fbe:	bf00      	nop
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	40007000 	.word	0x40007000
 8000fc8:	42420440 	.word	0x42420440

08000fcc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8000fcc:	b570      	push	{r4, r5, r6, lr}
 8000fce:	4604      	mov	r4, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000fd0:	4b35      	ldr	r3, [pc, #212]	; (80010a8 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
{
 8000fd2:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000fd4:	ad02      	add	r5, sp, #8
 8000fd6:	f103 0610 	add.w	r6, r3, #16
 8000fda:	462a      	mov	r2, r5
 8000fdc:	6818      	ldr	r0, [r3, #0]
 8000fde:	6859      	ldr	r1, [r3, #4]
 8000fe0:	3308      	adds	r3, #8
 8000fe2:	c203      	stmia	r2!, {r0, r1}
 8000fe4:	42b3      	cmp	r3, r6
 8000fe6:	4615      	mov	r5, r2
 8000fe8:	d1f7      	bne.n	8000fda <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000fea:	2301      	movs	r3, #1
 8000fec:	f88d 3004 	strb.w	r3, [sp, #4]
 8000ff0:	2302      	movs	r3, #2
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 8000ff2:	429c      	cmp	r4, r3
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000ff4:	f88d 3005 	strb.w	r3, [sp, #5]
  switch (PeriphClk)
 8000ff8:	d047      	beq.n	800108a <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 8000ffa:	2c10      	cmp	r4, #16
 8000ffc:	d017      	beq.n	800102e <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 8000ffe:	2c01      	cmp	r4, #1
 8001000:	d14f      	bne.n	80010a2 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001002:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 8001006:	4a29      	ldr	r2, [pc, #164]	; (80010ac <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8001008:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800100a:	4019      	ands	r1, r3
 800100c:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 8001010:	d044      	beq.n	800109c <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001016:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800101a:	d12d      	bne.n	8001078 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
      {
        frequency = LSI_VALUE;
 800101c:	f649 4040 	movw	r0, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001020:	6a53      	ldr	r3, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 8001022:	f013 0f02 	tst.w	r3, #2
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
      {
        frequency = HSE_VALUE / 128U;
 8001026:	bf08      	it	eq
 8001028:	2000      	moveq	r0, #0
    {
      break;
    }
  }
  return(frequency);
}
 800102a:	b006      	add	sp, #24
 800102c:	bd70      	pop	{r4, r5, r6, pc}
      temp_reg = RCC->CFGR;
 800102e:	4b1f      	ldr	r3, [pc, #124]	; (80010ac <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8001030:	6859      	ldr	r1, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 8001032:	6818      	ldr	r0, [r3, #0]
 8001034:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8001038:	d0f7      	beq.n	800102a <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800103a:	f3c1 4283 	ubfx	r2, r1, #18, #4
 800103e:	a806      	add	r0, sp, #24
 8001040:	4402      	add	r2, r0
 8001042:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001046:	03ca      	lsls	r2, r1, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001048:	bf41      	itttt	mi
 800104a:	685a      	ldrmi	r2, [r3, #4]
 800104c:	a906      	addmi	r1, sp, #24
 800104e:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 8001052:	1852      	addmi	r2, r2, r1
 8001054:	bf44      	itt	mi
 8001056:	f812 1c14 	ldrbmi.w	r1, [r2, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800105a:	4a15      	ldrmi	r2, [pc, #84]	; (80010b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800105c:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800105e:	bf4c      	ite	mi
 8001060:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001064:	4a13      	ldrpl	r2, [pc, #76]	; (80010b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001066:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001068:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800106c:	d4dd      	bmi.n	800102a <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          frequency = (pllclk * 2) / 3;
 800106e:	2303      	movs	r3, #3
 8001070:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001072:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001076:	e7d8      	b.n	800102a <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001078:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800107c:	d111      	bne.n	80010a2 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800107e:	6813      	ldr	r3, [r2, #0]
        frequency = HSE_VALUE / 128U;
 8001080:	f24f 4024 	movw	r0, #62500	; 0xf424
 8001084:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001088:	e7cd      	b.n	8001026 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800108a:	f7ff ff17 	bl	8000ebc <HAL_RCC_GetPCLK2Freq>
 800108e:	4b07      	ldr	r3, [pc, #28]	; (80010ac <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8001096:	3301      	adds	r3, #1
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	e7ea      	b.n	8001072 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
        frequency = LSE_VALUE;
 800109c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80010a0:	e7c3      	b.n	800102a <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
        frequency = 0U;
 80010a2:	2000      	movs	r0, #0
 80010a4:	e7c1      	b.n	800102a <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 80010a6:	bf00      	nop
 80010a8:	08002010 	.word	0x08002010
 80010ac:	40021000 	.word	0x40021000
 80010b0:	007a1200 	.word	0x007a1200
 80010b4:	003d0900 	.word	0x003d0900

080010b8 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80010b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80010bc:	6805      	ldr	r5, [r0, #0]
 80010be:	68c2      	ldr	r2, [r0, #12]
 80010c0:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80010c2:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80010c4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010c8:	4313      	orrs	r3, r2
 80010ca:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80010cc:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 80010ce:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80010d0:	430b      	orrs	r3, r1
 80010d2:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 80010d4:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 80010d8:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80010dc:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 80010de:	4313      	orrs	r3, r2
 80010e0:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80010e2:	696b      	ldr	r3, [r5, #20]
 80010e4:	6982      	ldr	r2, [r0, #24]
 80010e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80010ea:	4313      	orrs	r3, r2
 80010ec:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80010ee:	4b40      	ldr	r3, [pc, #256]	; (80011f0 <UART_SetConfig+0x138>)
{
 80010f0:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 80010f2:	429d      	cmp	r5, r3
 80010f4:	f04f 0419 	mov.w	r4, #25
 80010f8:	d146      	bne.n	8001188 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80010fa:	f7ff fedf 	bl	8000ebc <HAL_RCC_GetPCLK2Freq>
 80010fe:	fb04 f300 	mul.w	r3, r4, r0
 8001102:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001106:	f04f 0864 	mov.w	r8, #100	; 0x64
 800110a:	00b6      	lsls	r6, r6, #2
 800110c:	fbb3 f3f6 	udiv	r3, r3, r6
 8001110:	fbb3 f3f8 	udiv	r3, r3, r8
 8001114:	011e      	lsls	r6, r3, #4
 8001116:	f7ff fed1 	bl	8000ebc <HAL_RCC_GetPCLK2Freq>
 800111a:	4360      	muls	r0, r4
 800111c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	fbb0 f7f3 	udiv	r7, r0, r3
 8001126:	f7ff fec9 	bl	8000ebc <HAL_RCC_GetPCLK2Freq>
 800112a:	4360      	muls	r0, r4
 800112c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	fbb0 f3f3 	udiv	r3, r0, r3
 8001136:	fbb3 f3f8 	udiv	r3, r3, r8
 800113a:	fb08 7313 	mls	r3, r8, r3, r7
 800113e:	011b      	lsls	r3, r3, #4
 8001140:	3332      	adds	r3, #50	; 0x32
 8001142:	fbb3 f3f8 	udiv	r3, r3, r8
 8001146:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 800114a:	f7ff feb7 	bl	8000ebc <HAL_RCC_GetPCLK2Freq>
 800114e:	4360      	muls	r0, r4
 8001150:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001154:	0092      	lsls	r2, r2, #2
 8001156:	fbb0 faf2 	udiv	sl, r0, r2
 800115a:	f7ff feaf 	bl	8000ebc <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800115e:	4360      	muls	r0, r4
 8001160:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	fbb0 f3f3 	udiv	r3, r0, r3
 800116a:	fbb3 f3f8 	udiv	r3, r3, r8
 800116e:	fb08 a313 	mls	r3, r8, r3, sl
 8001172:	011b      	lsls	r3, r3, #4
 8001174:	3332      	adds	r3, #50	; 0x32
 8001176:	fbb3 f3f8 	udiv	r3, r3, r8
 800117a:	f003 030f 	and.w	r3, r3, #15
 800117e:	433b      	orrs	r3, r7
 8001180:	4433      	add	r3, r6
 8001182:	60ab      	str	r3, [r5, #8]
 8001184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001188:	f7ff fe88 	bl	8000e9c <HAL_RCC_GetPCLK1Freq>
 800118c:	fb04 f300 	mul.w	r3, r4, r0
 8001190:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001194:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001198:	00b6      	lsls	r6, r6, #2
 800119a:	fbb3 f3f6 	udiv	r3, r3, r6
 800119e:	fbb3 f3f8 	udiv	r3, r3, r8
 80011a2:	011e      	lsls	r6, r3, #4
 80011a4:	f7ff fe7a 	bl	8000e9c <HAL_RCC_GetPCLK1Freq>
 80011a8:	4360      	muls	r0, r4
 80011aa:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	fbb0 f7f3 	udiv	r7, r0, r3
 80011b4:	f7ff fe72 	bl	8000e9c <HAL_RCC_GetPCLK1Freq>
 80011b8:	4360      	muls	r0, r4
 80011ba:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80011c4:	fbb3 f3f8 	udiv	r3, r3, r8
 80011c8:	fb08 7313 	mls	r3, r8, r3, r7
 80011cc:	011b      	lsls	r3, r3, #4
 80011ce:	3332      	adds	r3, #50	; 0x32
 80011d0:	fbb3 f3f8 	udiv	r3, r3, r8
 80011d4:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80011d8:	f7ff fe60 	bl	8000e9c <HAL_RCC_GetPCLK1Freq>
 80011dc:	4360      	muls	r0, r4
 80011de:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80011e2:	0092      	lsls	r2, r2, #2
 80011e4:	fbb0 faf2 	udiv	sl, r0, r2
 80011e8:	f7ff fe58 	bl	8000e9c <HAL_RCC_GetPCLK1Freq>
 80011ec:	e7b7      	b.n	800115e <UART_SetConfig+0xa6>
 80011ee:	bf00      	nop
 80011f0:	40013800 	.word	0x40013800

080011f4 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80011f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011f6:	4604      	mov	r4, r0
 80011f8:	460e      	mov	r6, r1
 80011fa:	4617      	mov	r7, r2
 80011fc:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80011fe:	6821      	ldr	r1, [r4, #0]
 8001200:	680b      	ldr	r3, [r1, #0]
 8001202:	ea36 0303 	bics.w	r3, r6, r3
 8001206:	d101      	bne.n	800120c <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001208:	2000      	movs	r0, #0
}
 800120a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 800120c:	1c6b      	adds	r3, r5, #1
 800120e:	d0f7      	beq.n	8001200 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001210:	b995      	cbnz	r5, 8001238 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001212:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8001214:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001216:	68da      	ldr	r2, [r3, #12]
 8001218:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800121c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800121e:	695a      	ldr	r2, [r3, #20]
 8001220:	f022 0201 	bic.w	r2, r2, #1
 8001224:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001226:	2320      	movs	r3, #32
 8001228:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800122c:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001230:	2300      	movs	r3, #0
 8001232:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001238:	f7fe ffd2 	bl	80001e0 <HAL_GetTick>
 800123c:	1bc0      	subs	r0, r0, r7
 800123e:	4285      	cmp	r5, r0
 8001240:	d2dd      	bcs.n	80011fe <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001242:	e7e6      	b.n	8001212 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001244 <HAL_UART_Init>:
{
 8001244:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001246:	4604      	mov	r4, r0
 8001248:	b340      	cbz	r0, 800129c <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 800124a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800124e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001252:	b91b      	cbnz	r3, 800125c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001254:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001258:	f000 f9e0 	bl	800161c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800125c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800125e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001260:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001264:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8001266:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001268:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800126c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800126e:	f7ff ff23 	bl	80010b8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001272:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001274:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001276:	691a      	ldr	r2, [r3, #16]
 8001278:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800127c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800127e:	695a      	ldr	r2, [r3, #20]
 8001280:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001284:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001286:	68da      	ldr	r2, [r3, #12]
 8001288:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800128c:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 800128e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001290:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001292:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001296:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800129a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800129c:	2001      	movs	r0, #1
}
 800129e:	bd10      	pop	{r4, pc}

080012a0 <HAL_UART_Transmit>:
{
 80012a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012a4:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 80012a6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 80012aa:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 80012ac:	2b20      	cmp	r3, #32
{
 80012ae:	460d      	mov	r5, r1
 80012b0:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 80012b2:	d14e      	bne.n	8001352 <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 80012b4:	2900      	cmp	r1, #0
 80012b6:	d049      	beq.n	800134c <HAL_UART_Transmit+0xac>
 80012b8:	2a00      	cmp	r2, #0
 80012ba:	d047      	beq.n	800134c <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 80012bc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d046      	beq.n	8001352 <HAL_UART_Transmit+0xb2>
 80012c4:	2301      	movs	r3, #1
 80012c6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80012ca:	2300      	movs	r3, #0
 80012cc:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80012ce:	2321      	movs	r3, #33	; 0x21
 80012d0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80012d4:	f7fe ff84 	bl	80001e0 <HAL_GetTick>
 80012d8:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 80012da:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80012de:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80012e2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	b96b      	cbnz	r3, 8001304 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80012e8:	463b      	mov	r3, r7
 80012ea:	4632      	mov	r2, r6
 80012ec:	2140      	movs	r1, #64	; 0x40
 80012ee:	4620      	mov	r0, r4
 80012f0:	f7ff ff80 	bl	80011f4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80012f4:	b9a8      	cbnz	r0, 8001322 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 80012f6:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80012f8:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 80012fc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8001300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8001304:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001306:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8001308:	3b01      	subs	r3, #1
 800130a:	b29b      	uxth	r3, r3
 800130c:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800130e:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001310:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001316:	4620      	mov	r0, r4
 8001318:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800131a:	d10e      	bne.n	800133a <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800131c:	f7ff ff6a 	bl	80011f4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001320:	b110      	cbz	r0, 8001328 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8001322:	2003      	movs	r0, #3
 8001324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001328:	882b      	ldrh	r3, [r5, #0]
 800132a:	6822      	ldr	r2, [r4, #0]
 800132c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001330:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001332:	6923      	ldr	r3, [r4, #16]
 8001334:	b943      	cbnz	r3, 8001348 <HAL_UART_Transmit+0xa8>
          pData +=2U;
 8001336:	3502      	adds	r5, #2
 8001338:	e7d3      	b.n	80012e2 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800133a:	f7ff ff5b 	bl	80011f4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800133e:	2800      	cmp	r0, #0
 8001340:	d1ef      	bne.n	8001322 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001342:	6823      	ldr	r3, [r4, #0]
 8001344:	782a      	ldrb	r2, [r5, #0]
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	3501      	adds	r5, #1
 800134a:	e7ca      	b.n	80012e2 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 800134c:	2001      	movs	r0, #1
 800134e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001352:	2002      	movs	r0, #2
}
 8001354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001358 <SystemClock_Config>:
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001358:	f44f 3380 	mov.w	r3, #65536	; 0x10000
{
 800135c:	b510      	push	{r4, lr}
 800135e:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001360:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001362:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001364:	2100      	movs	r1, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001366:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001368:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 800136a:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800136e:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001370:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001372:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001374:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001376:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8001378:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800137a:	f7ff fb1d 	bl	80009b8 <HAL_RCC_OscConfig>
 800137e:	b100      	cbz	r0, 8001382 <SystemClock_Config+0x2a>
 8001380:	e7fe      	b.n	8001380 <SystemClock_Config+0x28>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001382:	230f      	movs	r3, #15
 8001384:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001386:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800138a:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800138c:	9009      	str	r0, [sp, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800138e:	4621      	mov	r1, r4
 8001390:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001392:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001394:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001396:	f7ff fcd7 	bl	8000d48 <HAL_RCC_ClockConfig>
 800139a:	b100      	cbz	r0, 800139e <SystemClock_Config+0x46>
 800139c:	e7fe      	b.n	800139c <SystemClock_Config+0x44>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 800139e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013a2:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80013a4:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80013a6:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013a8:	f7ff fd98 	bl	8000edc <HAL_RCCEx_PeriphCLKConfig>
 80013ac:	4604      	mov	r4, r0
 80013ae:	b100      	cbz	r0, 80013b2 <SystemClock_Config+0x5a>
 80013b0:	e7fe      	b.n	80013b0 <SystemClock_Config+0x58>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80013b2:	f7ff fd6d 	bl	8000e90 <HAL_RCC_GetHCLKFreq>
 80013b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ba:	fbb0 f0f3 	udiv	r0, r0, r3
 80013be:	f7ff f9e9 	bl	8000794 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80013c2:	2004      	movs	r0, #4
 80013c4:	f7ff f9fc 	bl	80007c0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80013c8:	4622      	mov	r2, r4
 80013ca:	4621      	mov	r1, r4
 80013cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013d0:	f7ff f9ac 	bl	800072c <HAL_NVIC_SetPriority>
}
 80013d4:	b014      	add	sp, #80	; 0x50
 80013d6:	bd10      	pop	{r4, pc}

080013d8 <main>:
{
 80013d8:	b570      	push	{r4, r5, r6, lr}
 80013da:	b08a      	sub	sp, #40	; 0x28
  HAL_Init();
 80013dc:	f7fe fee2 	bl	80001a4 <HAL_Init>
  SystemClock_Config();
 80013e0:	f7ff ffba 	bl	8001358 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e4:	4b4d      	ldr	r3, [pc, #308]	; (800151c <main+0x144>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80013e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ea:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80013ec:	484c      	ldr	r0, [pc, #304]	; (8001520 <main+0x148>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ee:	f042 0210 	orr.w	r2, r2, #16
 80013f2:	619a      	str	r2, [r3, #24]
 80013f4:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2500      	movs	r5, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f8:	f002 0210 	and.w	r2, r2, #16
 80013fc:	9200      	str	r2, [sp, #0]
 80013fe:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001400:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001402:	2601      	movs	r6, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001404:	f042 0220 	orr.w	r2, r2, #32
 8001408:	619a      	str	r2, [r3, #24]
 800140a:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140c:	2402      	movs	r4, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800140e:	f002 0220 	and.w	r2, r2, #32
 8001412:	9201      	str	r2, [sp, #4]
 8001414:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001416:	699a      	ldr	r2, [r3, #24]
 8001418:	f042 0204 	orr.w	r2, r2, #4
 800141c:	619a      	str	r2, [r3, #24]
 800141e:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001420:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001422:	f003 0304 	and.w	r3, r3, #4
 8001426:	9302      	str	r3, [sp, #8]
 8001428:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800142a:	f7ff fabb 	bl	80009a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800142e:	2200      	movs	r2, #0
 8001430:	2138      	movs	r1, #56	; 0x38
 8001432:	483c      	ldr	r0, [pc, #240]	; (8001524 <main+0x14c>)
 8001434:	f7ff fab6 	bl	80009a4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001438:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800143c:	a903      	add	r1, sp, #12
 800143e:	4838      	ldr	r0, [pc, #224]	; (8001520 <main+0x148>)
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001440:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001442:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001444:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001448:	f7ff f9cc 	bl	80007e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800144c:	2338      	movs	r3, #56	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144e:	4835      	ldr	r0, [pc, #212]	; (8001524 <main+0x14c>)
 8001450:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001452:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001454:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001456:	9604      	str	r6, [sp, #16]
  hadc1.Instance = ADC1;
 8001458:	4c33      	ldr	r4, [pc, #204]	; (8001528 <main+0x150>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145c:	f7ff f9c2 	bl	80007e4 <HAL_GPIO_Init>
  hadc1.Instance = ADC1;
 8001460:	4b32      	ldr	r3, [pc, #200]	; (800152c <main+0x154>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001462:	4620      	mov	r0, r4
  hadc1.Instance = ADC1;
 8001464:	6023      	str	r3, [r4, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001466:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800146a:	60a5      	str	r5, [r4, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800146c:	60e5      	str	r5, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800146e:	6165      	str	r5, [r4, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001470:	61e3      	str	r3, [r4, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001472:	6065      	str	r5, [r4, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001474:	6126      	str	r6, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001476:	f7ff f8ad 	bl	80005d4 <HAL_ADC_Init>
 800147a:	b100      	cbz	r0, 800147e <main+0xa6>
 800147c:	e7fe      	b.n	800147c <main+0xa4>
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 800147e:	2306      	movs	r3, #6
  sConfig.Channel = ADC_CHANNEL_0;
 8001480:	9003      	str	r0, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001482:	a903      	add	r1, sp, #12
 8001484:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001486:	9604      	str	r6, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8001488:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800148a:	f7fe ff63 	bl	8000354 <HAL_ADC_ConfigChannel>
 800148e:	b100      	cbz	r0, 8001492 <main+0xba>
 8001490:	e7fe      	b.n	8001490 <main+0xb8>
  huart1.Init.BaudRate = 115200;
 8001492:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  huart1.Instance = USART1;
 8001496:	4b26      	ldr	r3, [pc, #152]	; (8001530 <main+0x158>)
  huart1.Init.BaudRate = 115200;
 8001498:	4926      	ldr	r1, [pc, #152]	; (8001534 <main+0x15c>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800149a:	6098      	str	r0, [r3, #8]
  huart1.Init.BaudRate = 115200;
 800149c:	e883 0006 	stmia.w	r3, {r1, r2}
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014a0:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014a2:	60d8      	str	r0, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014a4:	6118      	str	r0, [r3, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014a6:	6198      	str	r0, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a8:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014aa:	4618      	mov	r0, r3
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014ac:	615a      	str	r2, [r3, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014ae:	f7ff fec9 	bl	8001244 <HAL_UART_Init>
 80014b2:	b100      	cbz	r0, 80014b6 <main+0xde>
 80014b4:	e7fe      	b.n	80014b4 <main+0xdc>
  uint32_t lastTimestamp = HAL_GetTick();
 80014b6:	f7fe fe93 	bl	80001e0 <HAL_GetTick>
 80014ba:	4605      	mov	r5, r0
  uint32_t lastTimestampUART = HAL_GetTick();
 80014bc:	f7fe fe90 	bl	80001e0 <HAL_GetTick>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 80014c0:	4e18      	ldr	r6, [pc, #96]	; (8001524 <main+0x14c>)
	if ( (HAL_GetTick()- lastTimestamp) > 100 ){
 80014c2:	f7fe fe8d 	bl	80001e0 <HAL_GetTick>
 80014c6:	1b40      	subs	r0, r0, r5
 80014c8:	2864      	cmp	r0, #100	; 0x64
 80014ca:	d9fa      	bls.n	80014c2 <main+0xea>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 80014cc:	2108      	movs	r1, #8
 80014ce:	4630      	mov	r0, r6
 80014d0:	f7ff fa6d 	bl	80009ae <HAL_GPIO_TogglePin>
		lastTimestamp = HAL_GetTick();
 80014d4:	f7fe fe84 	bl	80001e0 <HAL_GetTick>
 80014d8:	4605      	mov	r5, r0
		HAL_ADC_Start(&hadc1);
 80014da:	4620      	mov	r0, r4
 80014dc:	f7fe fff6 	bl	80004cc <HAL_ADC_Start>
		HAL_Delay(15);
 80014e0:	200f      	movs	r0, #15
 80014e2:	f7fe fe83 	bl	80001ec <HAL_Delay>
		HAL_ADC_PollForConversion(&hadc1, 100);
 80014e6:	2164      	movs	r1, #100	; 0x64
 80014e8:	4620      	mov	r0, r4
 80014ea:	f7fe fe91 	bl	8000210 <HAL_ADC_PollForConversion>
		adcValue = HAL_ADC_GetValue(&hadc1);
 80014ee:	4620      	mov	r0, r4
 80014f0:	f7fe ff2c 	bl	800034c <HAL_ADC_GetValue>
		sprintf(output, "%lu\r\n", adcValue);
 80014f4:	4910      	ldr	r1, [pc, #64]	; (8001538 <main+0x160>)
 80014f6:	4602      	mov	r2, r0
 80014f8:	a803      	add	r0, sp, #12
 80014fa:	f000 f93b 	bl	8001774 <siprintf>
		HAL_UART_Transmit(&huart1, &output, strlen(output)+1, 100);
 80014fe:	a803      	add	r0, sp, #12
 8001500:	f7fe fe24 	bl	800014c <strlen>
 8001504:	1c42      	adds	r2, r0, #1
 8001506:	2364      	movs	r3, #100	; 0x64
 8001508:	b292      	uxth	r2, r2
 800150a:	a903      	add	r1, sp, #12
 800150c:	4808      	ldr	r0, [pc, #32]	; (8001530 <main+0x158>)
 800150e:	f7ff fec7 	bl	80012a0 <HAL_UART_Transmit>
		HAL_ADC_Stop(&hadc1);
 8001512:	4620      	mov	r0, r4
 8001514:	f7ff f8de 	bl	80006d4 <HAL_ADC_Stop>
 8001518:	e7d3      	b.n	80014c2 <main+0xea>
 800151a:	bf00      	nop
 800151c:	40021000 	.word	0x40021000
 8001520:	40011000 	.word	0x40011000
 8001524:	40010800 	.word	0x40010800
 8001528:	2000009c 	.word	0x2000009c
 800152c:	40012400 	.word	0x40012400
 8001530:	200000cc 	.word	0x200000cc
 8001534:	40013800 	.word	0x40013800
 8001538:	08002020 	.word	0x08002020

0800153c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800153c:	4b25      	ldr	r3, [pc, #148]	; (80015d4 <HAL_MspInit+0x98>)
{
 800153e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001540:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001542:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001544:	f042 0201 	orr.w	r2, r2, #1
 8001548:	619a      	str	r2, [r3, #24]
 800154a:	699a      	ldr	r2, [r3, #24]
 800154c:	f002 0201 	and.w	r2, r2, #1
 8001550:	9200      	str	r2, [sp, #0]
 8001552:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001554:	69da      	ldr	r2, [r3, #28]
 8001556:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800155a:	61da      	str	r2, [r3, #28]
 800155c:	69db      	ldr	r3, [r3, #28]
 800155e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001562:	9301      	str	r3, [sp, #4]
 8001564:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001566:	f7ff f8cf 	bl	8000708 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800156a:	2200      	movs	r2, #0
 800156c:	f06f 000b 	mvn.w	r0, #11
 8001570:	4611      	mov	r1, r2
 8001572:	f7ff f8db 	bl	800072c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001576:	2200      	movs	r2, #0
 8001578:	f06f 000a 	mvn.w	r0, #10
 800157c:	4611      	mov	r1, r2
 800157e:	f7ff f8d5 	bl	800072c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001582:	2200      	movs	r2, #0
 8001584:	f06f 0009 	mvn.w	r0, #9
 8001588:	4611      	mov	r1, r2
 800158a:	f7ff f8cf 	bl	800072c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800158e:	2200      	movs	r2, #0
 8001590:	f06f 0004 	mvn.w	r0, #4
 8001594:	4611      	mov	r1, r2
 8001596:	f7ff f8c9 	bl	800072c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800159a:	2200      	movs	r2, #0
 800159c:	f06f 0003 	mvn.w	r0, #3
 80015a0:	4611      	mov	r1, r2
 80015a2:	f7ff f8c3 	bl	800072c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80015a6:	2200      	movs	r2, #0
 80015a8:	f06f 0001 	mvn.w	r0, #1
 80015ac:	4611      	mov	r1, r2
 80015ae:	f7ff f8bd 	bl	800072c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80015b2:	2200      	movs	r2, #0
 80015b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015b8:	4611      	mov	r1, r2
 80015ba:	f7ff f8b7 	bl	800072c <HAL_NVIC_SetPriority>

    /**DISABLE: JTAG-DP Disabled and SW-DP Disabled 
    */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80015be:	4a06      	ldr	r2, [pc, #24]	; (80015d8 <HAL_MspInit+0x9c>)
 80015c0:	6853      	ldr	r3, [r2, #4]
 80015c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80015ca:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015cc:	b003      	add	sp, #12
 80015ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80015d2:	bf00      	nop
 80015d4:	40021000 	.word	0x40021000
 80015d8:	40010000 	.word	0x40010000

080015dc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 80015de:	6802      	ldr	r2, [r0, #0]
 80015e0:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <HAL_ADC_MspInit+0x38>)
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d112      	bne.n	800160c <HAL_ADC_MspInit+0x30>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015e6:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 80015ea:	699a      	ldr	r2, [r3, #24]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ec:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015f2:	619a      	str	r2, [r3, #24]
 80015f4:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f6:	4808      	ldr	r0, [pc, #32]	; (8001618 <HAL_ADC_MspInit+0x3c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015fc:	9301      	str	r3, [sp, #4]
 80015fe:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001600:	2307      	movs	r3, #7
 8001602:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001604:	2303      	movs	r3, #3
 8001606:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001608:	f7ff f8ec 	bl	80007e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800160c:	b007      	add	sp, #28
 800160e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001612:	bf00      	nop
 8001614:	40012400 	.word	0x40012400
 8001618:	40010800 	.word	0x40010800

0800161c <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800161c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800161e:	6802      	ldr	r2, [r0, #0]
 8001620:	4b12      	ldr	r3, [pc, #72]	; (800166c <HAL_UART_MspInit+0x50>)
 8001622:	429a      	cmp	r2, r3
 8001624:	d11f      	bne.n	8001666 <HAL_UART_MspInit+0x4a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001626:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800162a:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162c:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 800162e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001632:	619a      	str	r2, [r3, #24]
 8001634:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001636:	480e      	ldr	r0, [pc, #56]	; (8001670 <HAL_UART_MspInit+0x54>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001638:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800163c:	9301      	str	r3, [sp, #4]
 800163e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001640:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001644:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001646:	2302      	movs	r3, #2
 8001648:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800164a:	2303      	movs	r3, #3
 800164c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164e:	f7ff f8c9 	bl	80007e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001652:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001656:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001658:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165a:	a902      	add	r1, sp, #8
 800165c:	4804      	ldr	r0, [pc, #16]	; (8001670 <HAL_UART_MspInit+0x54>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800165e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001662:	f7ff f8bf 	bl	80007e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001666:	b007      	add	sp, #28
 8001668:	f85d fb04 	ldr.w	pc, [sp], #4
 800166c:	40013800 	.word	0x40013800
 8001670:	40010800 	.word	0x40010800

08001674 <NMI_Handler>:
 8001674:	4770      	bx	lr

08001676 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001676:	e7fe      	b.n	8001676 <HardFault_Handler>

08001678 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001678:	e7fe      	b.n	8001678 <MemManage_Handler>

0800167a <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800167a:	e7fe      	b.n	800167a <BusFault_Handler>

0800167c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800167c:	e7fe      	b.n	800167c <UsageFault_Handler>

0800167e <SVC_Handler>:
 800167e:	4770      	bx	lr

08001680 <DebugMon_Handler>:
 8001680:	4770      	bx	lr

08001682 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001682:	4770      	bx	lr

08001684 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001684:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001686:	f7fe fd9f 	bl	80001c8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800168a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800168e:	f7ff b8a4 	b.w	80007da <HAL_SYSTICK_IRQHandler>
	...

08001694 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001694:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <SystemInit+0x40>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	f042 0201 	orr.w	r2, r2, #1
 800169c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800169e:	6859      	ldr	r1, [r3, #4]
 80016a0:	4a0d      	ldr	r2, [pc, #52]	; (80016d8 <SystemInit+0x44>)
 80016a2:	400a      	ands	r2, r1
 80016a4:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80016ac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80016b0:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80016b8:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80016c0:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80016c2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80016c6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80016c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016cc:	4b03      	ldr	r3, [pc, #12]	; (80016dc <SystemInit+0x48>)
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	40021000 	.word	0x40021000
 80016d8:	f8ff0000 	.word	0xf8ff0000
 80016dc:	e000ed00 	.word	0xe000ed00

080016e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80016e0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80016e2:	e003      	b.n	80016ec <LoopCopyDataInit>

080016e4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80016e4:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80016e6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80016e8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80016ea:	3104      	adds	r1, #4

080016ec <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80016ec:	480a      	ldr	r0, [pc, #40]	; (8001718 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80016ee:	4b0b      	ldr	r3, [pc, #44]	; (800171c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80016f0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80016f2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80016f4:	d3f6      	bcc.n	80016e4 <CopyDataInit>
  ldr r2, =_sbss
 80016f6:	4a0a      	ldr	r2, [pc, #40]	; (8001720 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80016f8:	e002      	b.n	8001700 <LoopFillZerobss>

080016fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80016fa:	2300      	movs	r3, #0
  str r3, [r2], #4
 80016fc:	f842 3b04 	str.w	r3, [r2], #4

08001700 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001700:	4b08      	ldr	r3, [pc, #32]	; (8001724 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001702:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001704:	d3f9      	bcc.n	80016fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001706:	f7ff ffc5 	bl	8001694 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800170a:	f000 f80f 	bl	800172c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800170e:	f7ff fe63 	bl	80013d8 <main>
  bx lr
 8001712:	4770      	bx	lr
  ldr r3, =_sidata
 8001714:	0800207c 	.word	0x0800207c
  ldr r0, =_sdata
 8001718:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800171c:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8001720:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001724:	20000110 	.word	0x20000110

08001728 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001728:	e7fe      	b.n	8001728 <ADC1_2_IRQHandler>
	...

0800172c <__libc_init_array>:
 800172c:	b570      	push	{r4, r5, r6, lr}
 800172e:	2500      	movs	r5, #0
 8001730:	4e0c      	ldr	r6, [pc, #48]	; (8001764 <__libc_init_array+0x38>)
 8001732:	4c0d      	ldr	r4, [pc, #52]	; (8001768 <__libc_init_array+0x3c>)
 8001734:	1ba4      	subs	r4, r4, r6
 8001736:	10a4      	asrs	r4, r4, #2
 8001738:	42a5      	cmp	r5, r4
 800173a:	d109      	bne.n	8001750 <__libc_init_array+0x24>
 800173c:	f000 fc54 	bl	8001fe8 <_init>
 8001740:	2500      	movs	r5, #0
 8001742:	4e0a      	ldr	r6, [pc, #40]	; (800176c <__libc_init_array+0x40>)
 8001744:	4c0a      	ldr	r4, [pc, #40]	; (8001770 <__libc_init_array+0x44>)
 8001746:	1ba4      	subs	r4, r4, r6
 8001748:	10a4      	asrs	r4, r4, #2
 800174a:	42a5      	cmp	r5, r4
 800174c:	d105      	bne.n	800175a <__libc_init_array+0x2e>
 800174e:	bd70      	pop	{r4, r5, r6, pc}
 8001750:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001754:	4798      	blx	r3
 8001756:	3501      	adds	r5, #1
 8001758:	e7ee      	b.n	8001738 <__libc_init_array+0xc>
 800175a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800175e:	4798      	blx	r3
 8001760:	3501      	adds	r5, #1
 8001762:	e7f2      	b.n	800174a <__libc_init_array+0x1e>
 8001764:	08002074 	.word	0x08002074
 8001768:	08002074 	.word	0x08002074
 800176c:	08002074 	.word	0x08002074
 8001770:	08002078 	.word	0x08002078

08001774 <siprintf>:
 8001774:	b40e      	push	{r1, r2, r3}
 8001776:	f44f 7102 	mov.w	r1, #520	; 0x208
 800177a:	b500      	push	{lr}
 800177c:	b09c      	sub	sp, #112	; 0x70
 800177e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8001782:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001786:	9104      	str	r1, [sp, #16]
 8001788:	9107      	str	r1, [sp, #28]
 800178a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800178e:	ab1d      	add	r3, sp, #116	; 0x74
 8001790:	9002      	str	r0, [sp, #8]
 8001792:	9006      	str	r0, [sp, #24]
 8001794:	4808      	ldr	r0, [pc, #32]	; (80017b8 <siprintf+0x44>)
 8001796:	f853 2b04 	ldr.w	r2, [r3], #4
 800179a:	f8ad 1016 	strh.w	r1, [sp, #22]
 800179e:	6800      	ldr	r0, [r0, #0]
 80017a0:	a902      	add	r1, sp, #8
 80017a2:	9301      	str	r3, [sp, #4]
 80017a4:	f000 f866 	bl	8001874 <_svfiprintf_r>
 80017a8:	2200      	movs	r2, #0
 80017aa:	9b02      	ldr	r3, [sp, #8]
 80017ac:	701a      	strb	r2, [r3, #0]
 80017ae:	b01c      	add	sp, #112	; 0x70
 80017b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80017b4:	b003      	add	sp, #12
 80017b6:	4770      	bx	lr
 80017b8:	2000000c 	.word	0x2000000c

080017bc <__ssputs_r>:
 80017bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80017c0:	688e      	ldr	r6, [r1, #8]
 80017c2:	4682      	mov	sl, r0
 80017c4:	429e      	cmp	r6, r3
 80017c6:	460c      	mov	r4, r1
 80017c8:	4691      	mov	r9, r2
 80017ca:	4698      	mov	r8, r3
 80017cc:	d835      	bhi.n	800183a <__ssputs_r+0x7e>
 80017ce:	898a      	ldrh	r2, [r1, #12]
 80017d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80017d4:	d031      	beq.n	800183a <__ssputs_r+0x7e>
 80017d6:	2302      	movs	r3, #2
 80017d8:	6825      	ldr	r5, [r4, #0]
 80017da:	6909      	ldr	r1, [r1, #16]
 80017dc:	1a6f      	subs	r7, r5, r1
 80017de:	6965      	ldr	r5, [r4, #20]
 80017e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80017e4:	fb95 f5f3 	sdiv	r5, r5, r3
 80017e8:	f108 0301 	add.w	r3, r8, #1
 80017ec:	443b      	add	r3, r7
 80017ee:	429d      	cmp	r5, r3
 80017f0:	bf38      	it	cc
 80017f2:	461d      	movcc	r5, r3
 80017f4:	0553      	lsls	r3, r2, #21
 80017f6:	d531      	bpl.n	800185c <__ssputs_r+0xa0>
 80017f8:	4629      	mov	r1, r5
 80017fa:	f000 fb47 	bl	8001e8c <_malloc_r>
 80017fe:	4606      	mov	r6, r0
 8001800:	b950      	cbnz	r0, 8001818 <__ssputs_r+0x5c>
 8001802:	230c      	movs	r3, #12
 8001804:	f8ca 3000 	str.w	r3, [sl]
 8001808:	89a3      	ldrh	r3, [r4, #12]
 800180a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800180e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001812:	81a3      	strh	r3, [r4, #12]
 8001814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001818:	463a      	mov	r2, r7
 800181a:	6921      	ldr	r1, [r4, #16]
 800181c:	f000 fac4 	bl	8001da8 <memcpy>
 8001820:	89a3      	ldrh	r3, [r4, #12]
 8001822:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800182a:	81a3      	strh	r3, [r4, #12]
 800182c:	6126      	str	r6, [r4, #16]
 800182e:	443e      	add	r6, r7
 8001830:	6026      	str	r6, [r4, #0]
 8001832:	4646      	mov	r6, r8
 8001834:	6165      	str	r5, [r4, #20]
 8001836:	1bed      	subs	r5, r5, r7
 8001838:	60a5      	str	r5, [r4, #8]
 800183a:	4546      	cmp	r6, r8
 800183c:	bf28      	it	cs
 800183e:	4646      	movcs	r6, r8
 8001840:	4649      	mov	r1, r9
 8001842:	4632      	mov	r2, r6
 8001844:	6820      	ldr	r0, [r4, #0]
 8001846:	f000 faba 	bl	8001dbe <memmove>
 800184a:	68a3      	ldr	r3, [r4, #8]
 800184c:	2000      	movs	r0, #0
 800184e:	1b9b      	subs	r3, r3, r6
 8001850:	60a3      	str	r3, [r4, #8]
 8001852:	6823      	ldr	r3, [r4, #0]
 8001854:	441e      	add	r6, r3
 8001856:	6026      	str	r6, [r4, #0]
 8001858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800185c:	462a      	mov	r2, r5
 800185e:	f000 fb73 	bl	8001f48 <_realloc_r>
 8001862:	4606      	mov	r6, r0
 8001864:	2800      	cmp	r0, #0
 8001866:	d1e1      	bne.n	800182c <__ssputs_r+0x70>
 8001868:	6921      	ldr	r1, [r4, #16]
 800186a:	4650      	mov	r0, sl
 800186c:	f000 fac2 	bl	8001df4 <_free_r>
 8001870:	e7c7      	b.n	8001802 <__ssputs_r+0x46>
	...

08001874 <_svfiprintf_r>:
 8001874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001878:	b09d      	sub	sp, #116	; 0x74
 800187a:	9303      	str	r3, [sp, #12]
 800187c:	898b      	ldrh	r3, [r1, #12]
 800187e:	4680      	mov	r8, r0
 8001880:	061c      	lsls	r4, r3, #24
 8001882:	460d      	mov	r5, r1
 8001884:	4616      	mov	r6, r2
 8001886:	d50f      	bpl.n	80018a8 <_svfiprintf_r+0x34>
 8001888:	690b      	ldr	r3, [r1, #16]
 800188a:	b96b      	cbnz	r3, 80018a8 <_svfiprintf_r+0x34>
 800188c:	2140      	movs	r1, #64	; 0x40
 800188e:	f000 fafd 	bl	8001e8c <_malloc_r>
 8001892:	6028      	str	r0, [r5, #0]
 8001894:	6128      	str	r0, [r5, #16]
 8001896:	b928      	cbnz	r0, 80018a4 <_svfiprintf_r+0x30>
 8001898:	230c      	movs	r3, #12
 800189a:	f8c8 3000 	str.w	r3, [r8]
 800189e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018a2:	e0c4      	b.n	8001a2e <_svfiprintf_r+0x1ba>
 80018a4:	2340      	movs	r3, #64	; 0x40
 80018a6:	616b      	str	r3, [r5, #20]
 80018a8:	2300      	movs	r3, #0
 80018aa:	9309      	str	r3, [sp, #36]	; 0x24
 80018ac:	2320      	movs	r3, #32
 80018ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80018b2:	2330      	movs	r3, #48	; 0x30
 80018b4:	f04f 0b01 	mov.w	fp, #1
 80018b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80018bc:	4637      	mov	r7, r6
 80018be:	463c      	mov	r4, r7
 80018c0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d13c      	bne.n	8001942 <_svfiprintf_r+0xce>
 80018c8:	ebb7 0a06 	subs.w	sl, r7, r6
 80018cc:	d00b      	beq.n	80018e6 <_svfiprintf_r+0x72>
 80018ce:	4653      	mov	r3, sl
 80018d0:	4632      	mov	r2, r6
 80018d2:	4629      	mov	r1, r5
 80018d4:	4640      	mov	r0, r8
 80018d6:	f7ff ff71 	bl	80017bc <__ssputs_r>
 80018da:	3001      	adds	r0, #1
 80018dc:	f000 80a2 	beq.w	8001a24 <_svfiprintf_r+0x1b0>
 80018e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80018e2:	4453      	add	r3, sl
 80018e4:	9309      	str	r3, [sp, #36]	; 0x24
 80018e6:	783b      	ldrb	r3, [r7, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	f000 809b 	beq.w	8001a24 <_svfiprintf_r+0x1b0>
 80018ee:	2300      	movs	r3, #0
 80018f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018f4:	9304      	str	r3, [sp, #16]
 80018f6:	9307      	str	r3, [sp, #28]
 80018f8:	9205      	str	r2, [sp, #20]
 80018fa:	9306      	str	r3, [sp, #24]
 80018fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001900:	931a      	str	r3, [sp, #104]	; 0x68
 8001902:	2205      	movs	r2, #5
 8001904:	7821      	ldrb	r1, [r4, #0]
 8001906:	4850      	ldr	r0, [pc, #320]	; (8001a48 <_svfiprintf_r+0x1d4>)
 8001908:	f000 fa40 	bl	8001d8c <memchr>
 800190c:	1c67      	adds	r7, r4, #1
 800190e:	9b04      	ldr	r3, [sp, #16]
 8001910:	b9d8      	cbnz	r0, 800194a <_svfiprintf_r+0xd6>
 8001912:	06d9      	lsls	r1, r3, #27
 8001914:	bf44      	itt	mi
 8001916:	2220      	movmi	r2, #32
 8001918:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800191c:	071a      	lsls	r2, r3, #28
 800191e:	bf44      	itt	mi
 8001920:	222b      	movmi	r2, #43	; 0x2b
 8001922:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001926:	7822      	ldrb	r2, [r4, #0]
 8001928:	2a2a      	cmp	r2, #42	; 0x2a
 800192a:	d016      	beq.n	800195a <_svfiprintf_r+0xe6>
 800192c:	2100      	movs	r1, #0
 800192e:	200a      	movs	r0, #10
 8001930:	9a07      	ldr	r2, [sp, #28]
 8001932:	4627      	mov	r7, r4
 8001934:	783b      	ldrb	r3, [r7, #0]
 8001936:	3401      	adds	r4, #1
 8001938:	3b30      	subs	r3, #48	; 0x30
 800193a:	2b09      	cmp	r3, #9
 800193c:	d950      	bls.n	80019e0 <_svfiprintf_r+0x16c>
 800193e:	b1c9      	cbz	r1, 8001974 <_svfiprintf_r+0x100>
 8001940:	e011      	b.n	8001966 <_svfiprintf_r+0xf2>
 8001942:	2b25      	cmp	r3, #37	; 0x25
 8001944:	d0c0      	beq.n	80018c8 <_svfiprintf_r+0x54>
 8001946:	4627      	mov	r7, r4
 8001948:	e7b9      	b.n	80018be <_svfiprintf_r+0x4a>
 800194a:	4a3f      	ldr	r2, [pc, #252]	; (8001a48 <_svfiprintf_r+0x1d4>)
 800194c:	463c      	mov	r4, r7
 800194e:	1a80      	subs	r0, r0, r2
 8001950:	fa0b f000 	lsl.w	r0, fp, r0
 8001954:	4318      	orrs	r0, r3
 8001956:	9004      	str	r0, [sp, #16]
 8001958:	e7d3      	b.n	8001902 <_svfiprintf_r+0x8e>
 800195a:	9a03      	ldr	r2, [sp, #12]
 800195c:	1d11      	adds	r1, r2, #4
 800195e:	6812      	ldr	r2, [r2, #0]
 8001960:	9103      	str	r1, [sp, #12]
 8001962:	2a00      	cmp	r2, #0
 8001964:	db01      	blt.n	800196a <_svfiprintf_r+0xf6>
 8001966:	9207      	str	r2, [sp, #28]
 8001968:	e004      	b.n	8001974 <_svfiprintf_r+0x100>
 800196a:	4252      	negs	r2, r2
 800196c:	f043 0302 	orr.w	r3, r3, #2
 8001970:	9207      	str	r2, [sp, #28]
 8001972:	9304      	str	r3, [sp, #16]
 8001974:	783b      	ldrb	r3, [r7, #0]
 8001976:	2b2e      	cmp	r3, #46	; 0x2e
 8001978:	d10d      	bne.n	8001996 <_svfiprintf_r+0x122>
 800197a:	787b      	ldrb	r3, [r7, #1]
 800197c:	1c79      	adds	r1, r7, #1
 800197e:	2b2a      	cmp	r3, #42	; 0x2a
 8001980:	d132      	bne.n	80019e8 <_svfiprintf_r+0x174>
 8001982:	9b03      	ldr	r3, [sp, #12]
 8001984:	3702      	adds	r7, #2
 8001986:	1d1a      	adds	r2, r3, #4
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	9203      	str	r2, [sp, #12]
 800198c:	2b00      	cmp	r3, #0
 800198e:	bfb8      	it	lt
 8001990:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001994:	9305      	str	r3, [sp, #20]
 8001996:	4c2d      	ldr	r4, [pc, #180]	; (8001a4c <_svfiprintf_r+0x1d8>)
 8001998:	2203      	movs	r2, #3
 800199a:	7839      	ldrb	r1, [r7, #0]
 800199c:	4620      	mov	r0, r4
 800199e:	f000 f9f5 	bl	8001d8c <memchr>
 80019a2:	b138      	cbz	r0, 80019b4 <_svfiprintf_r+0x140>
 80019a4:	2340      	movs	r3, #64	; 0x40
 80019a6:	1b00      	subs	r0, r0, r4
 80019a8:	fa03 f000 	lsl.w	r0, r3, r0
 80019ac:	9b04      	ldr	r3, [sp, #16]
 80019ae:	3701      	adds	r7, #1
 80019b0:	4303      	orrs	r3, r0
 80019b2:	9304      	str	r3, [sp, #16]
 80019b4:	7839      	ldrb	r1, [r7, #0]
 80019b6:	2206      	movs	r2, #6
 80019b8:	4825      	ldr	r0, [pc, #148]	; (8001a50 <_svfiprintf_r+0x1dc>)
 80019ba:	1c7e      	adds	r6, r7, #1
 80019bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80019c0:	f000 f9e4 	bl	8001d8c <memchr>
 80019c4:	2800      	cmp	r0, #0
 80019c6:	d035      	beq.n	8001a34 <_svfiprintf_r+0x1c0>
 80019c8:	4b22      	ldr	r3, [pc, #136]	; (8001a54 <_svfiprintf_r+0x1e0>)
 80019ca:	b9fb      	cbnz	r3, 8001a0c <_svfiprintf_r+0x198>
 80019cc:	9b03      	ldr	r3, [sp, #12]
 80019ce:	3307      	adds	r3, #7
 80019d0:	f023 0307 	bic.w	r3, r3, #7
 80019d4:	3308      	adds	r3, #8
 80019d6:	9303      	str	r3, [sp, #12]
 80019d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80019da:	444b      	add	r3, r9
 80019dc:	9309      	str	r3, [sp, #36]	; 0x24
 80019de:	e76d      	b.n	80018bc <_svfiprintf_r+0x48>
 80019e0:	fb00 3202 	mla	r2, r0, r2, r3
 80019e4:	2101      	movs	r1, #1
 80019e6:	e7a4      	b.n	8001932 <_svfiprintf_r+0xbe>
 80019e8:	2300      	movs	r3, #0
 80019ea:	240a      	movs	r4, #10
 80019ec:	4618      	mov	r0, r3
 80019ee:	9305      	str	r3, [sp, #20]
 80019f0:	460f      	mov	r7, r1
 80019f2:	783a      	ldrb	r2, [r7, #0]
 80019f4:	3101      	adds	r1, #1
 80019f6:	3a30      	subs	r2, #48	; 0x30
 80019f8:	2a09      	cmp	r2, #9
 80019fa:	d903      	bls.n	8001a04 <_svfiprintf_r+0x190>
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d0ca      	beq.n	8001996 <_svfiprintf_r+0x122>
 8001a00:	9005      	str	r0, [sp, #20]
 8001a02:	e7c8      	b.n	8001996 <_svfiprintf_r+0x122>
 8001a04:	fb04 2000 	mla	r0, r4, r0, r2
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e7f1      	b.n	80019f0 <_svfiprintf_r+0x17c>
 8001a0c:	ab03      	add	r3, sp, #12
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	462a      	mov	r2, r5
 8001a12:	4b11      	ldr	r3, [pc, #68]	; (8001a58 <_svfiprintf_r+0x1e4>)
 8001a14:	a904      	add	r1, sp, #16
 8001a16:	4640      	mov	r0, r8
 8001a18:	f3af 8000 	nop.w
 8001a1c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8001a20:	4681      	mov	r9, r0
 8001a22:	d1d9      	bne.n	80019d8 <_svfiprintf_r+0x164>
 8001a24:	89ab      	ldrh	r3, [r5, #12]
 8001a26:	065b      	lsls	r3, r3, #25
 8001a28:	f53f af39 	bmi.w	800189e <_svfiprintf_r+0x2a>
 8001a2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001a2e:	b01d      	add	sp, #116	; 0x74
 8001a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a34:	ab03      	add	r3, sp, #12
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	462a      	mov	r2, r5
 8001a3a:	4b07      	ldr	r3, [pc, #28]	; (8001a58 <_svfiprintf_r+0x1e4>)
 8001a3c:	a904      	add	r1, sp, #16
 8001a3e:	4640      	mov	r0, r8
 8001a40:	f000 f884 	bl	8001b4c <_printf_i>
 8001a44:	e7ea      	b.n	8001a1c <_svfiprintf_r+0x1a8>
 8001a46:	bf00      	nop
 8001a48:	0800203e 	.word	0x0800203e
 8001a4c:	08002044 	.word	0x08002044
 8001a50:	08002048 	.word	0x08002048
 8001a54:	00000000 	.word	0x00000000
 8001a58:	080017bd 	.word	0x080017bd

08001a5c <_printf_common>:
 8001a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a60:	4691      	mov	r9, r2
 8001a62:	461f      	mov	r7, r3
 8001a64:	688a      	ldr	r2, [r1, #8]
 8001a66:	690b      	ldr	r3, [r1, #16]
 8001a68:	4606      	mov	r6, r0
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	bfb8      	it	lt
 8001a6e:	4613      	movlt	r3, r2
 8001a70:	f8c9 3000 	str.w	r3, [r9]
 8001a74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001a78:	460c      	mov	r4, r1
 8001a7a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001a7e:	b112      	cbz	r2, 8001a86 <_printf_common+0x2a>
 8001a80:	3301      	adds	r3, #1
 8001a82:	f8c9 3000 	str.w	r3, [r9]
 8001a86:	6823      	ldr	r3, [r4, #0]
 8001a88:	0699      	lsls	r1, r3, #26
 8001a8a:	bf42      	ittt	mi
 8001a8c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001a90:	3302      	addmi	r3, #2
 8001a92:	f8c9 3000 	strmi.w	r3, [r9]
 8001a96:	6825      	ldr	r5, [r4, #0]
 8001a98:	f015 0506 	ands.w	r5, r5, #6
 8001a9c:	d107      	bne.n	8001aae <_printf_common+0x52>
 8001a9e:	f104 0a19 	add.w	sl, r4, #25
 8001aa2:	68e3      	ldr	r3, [r4, #12]
 8001aa4:	f8d9 2000 	ldr.w	r2, [r9]
 8001aa8:	1a9b      	subs	r3, r3, r2
 8001aaa:	429d      	cmp	r5, r3
 8001aac:	db2a      	blt.n	8001b04 <_printf_common+0xa8>
 8001aae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001ab2:	6822      	ldr	r2, [r4, #0]
 8001ab4:	3300      	adds	r3, #0
 8001ab6:	bf18      	it	ne
 8001ab8:	2301      	movne	r3, #1
 8001aba:	0692      	lsls	r2, r2, #26
 8001abc:	d42f      	bmi.n	8001b1e <_printf_common+0xc2>
 8001abe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001ac2:	4639      	mov	r1, r7
 8001ac4:	4630      	mov	r0, r6
 8001ac6:	47c0      	blx	r8
 8001ac8:	3001      	adds	r0, #1
 8001aca:	d022      	beq.n	8001b12 <_printf_common+0xb6>
 8001acc:	6823      	ldr	r3, [r4, #0]
 8001ace:	68e5      	ldr	r5, [r4, #12]
 8001ad0:	f003 0306 	and.w	r3, r3, #6
 8001ad4:	2b04      	cmp	r3, #4
 8001ad6:	bf18      	it	ne
 8001ad8:	2500      	movne	r5, #0
 8001ada:	f8d9 2000 	ldr.w	r2, [r9]
 8001ade:	f04f 0900 	mov.w	r9, #0
 8001ae2:	bf08      	it	eq
 8001ae4:	1aad      	subeq	r5, r5, r2
 8001ae6:	68a3      	ldr	r3, [r4, #8]
 8001ae8:	6922      	ldr	r2, [r4, #16]
 8001aea:	bf08      	it	eq
 8001aec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001af0:	4293      	cmp	r3, r2
 8001af2:	bfc4      	itt	gt
 8001af4:	1a9b      	subgt	r3, r3, r2
 8001af6:	18ed      	addgt	r5, r5, r3
 8001af8:	341a      	adds	r4, #26
 8001afa:	454d      	cmp	r5, r9
 8001afc:	d11b      	bne.n	8001b36 <_printf_common+0xda>
 8001afe:	2000      	movs	r0, #0
 8001b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b04:	2301      	movs	r3, #1
 8001b06:	4652      	mov	r2, sl
 8001b08:	4639      	mov	r1, r7
 8001b0a:	4630      	mov	r0, r6
 8001b0c:	47c0      	blx	r8
 8001b0e:	3001      	adds	r0, #1
 8001b10:	d103      	bne.n	8001b1a <_printf_common+0xbe>
 8001b12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b1a:	3501      	adds	r5, #1
 8001b1c:	e7c1      	b.n	8001aa2 <_printf_common+0x46>
 8001b1e:	2030      	movs	r0, #48	; 0x30
 8001b20:	18e1      	adds	r1, r4, r3
 8001b22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001b26:	1c5a      	adds	r2, r3, #1
 8001b28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001b2c:	4422      	add	r2, r4
 8001b2e:	3302      	adds	r3, #2
 8001b30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001b34:	e7c3      	b.n	8001abe <_printf_common+0x62>
 8001b36:	2301      	movs	r3, #1
 8001b38:	4622      	mov	r2, r4
 8001b3a:	4639      	mov	r1, r7
 8001b3c:	4630      	mov	r0, r6
 8001b3e:	47c0      	blx	r8
 8001b40:	3001      	adds	r0, #1
 8001b42:	d0e6      	beq.n	8001b12 <_printf_common+0xb6>
 8001b44:	f109 0901 	add.w	r9, r9, #1
 8001b48:	e7d7      	b.n	8001afa <_printf_common+0x9e>
	...

08001b4c <_printf_i>:
 8001b4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b50:	4617      	mov	r7, r2
 8001b52:	7e0a      	ldrb	r2, [r1, #24]
 8001b54:	b085      	sub	sp, #20
 8001b56:	2a6e      	cmp	r2, #110	; 0x6e
 8001b58:	4698      	mov	r8, r3
 8001b5a:	4606      	mov	r6, r0
 8001b5c:	460c      	mov	r4, r1
 8001b5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001b60:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8001b64:	f000 80bc 	beq.w	8001ce0 <_printf_i+0x194>
 8001b68:	d81a      	bhi.n	8001ba0 <_printf_i+0x54>
 8001b6a:	2a63      	cmp	r2, #99	; 0x63
 8001b6c:	d02e      	beq.n	8001bcc <_printf_i+0x80>
 8001b6e:	d80a      	bhi.n	8001b86 <_printf_i+0x3a>
 8001b70:	2a00      	cmp	r2, #0
 8001b72:	f000 80c8 	beq.w	8001d06 <_printf_i+0x1ba>
 8001b76:	2a58      	cmp	r2, #88	; 0x58
 8001b78:	f000 808a 	beq.w	8001c90 <_printf_i+0x144>
 8001b7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001b80:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8001b84:	e02a      	b.n	8001bdc <_printf_i+0x90>
 8001b86:	2a64      	cmp	r2, #100	; 0x64
 8001b88:	d001      	beq.n	8001b8e <_printf_i+0x42>
 8001b8a:	2a69      	cmp	r2, #105	; 0x69
 8001b8c:	d1f6      	bne.n	8001b7c <_printf_i+0x30>
 8001b8e:	6821      	ldr	r1, [r4, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001b96:	d023      	beq.n	8001be0 <_printf_i+0x94>
 8001b98:	1d11      	adds	r1, r2, #4
 8001b9a:	6019      	str	r1, [r3, #0]
 8001b9c:	6813      	ldr	r3, [r2, #0]
 8001b9e:	e027      	b.n	8001bf0 <_printf_i+0xa4>
 8001ba0:	2a73      	cmp	r2, #115	; 0x73
 8001ba2:	f000 80b4 	beq.w	8001d0e <_printf_i+0x1c2>
 8001ba6:	d808      	bhi.n	8001bba <_printf_i+0x6e>
 8001ba8:	2a6f      	cmp	r2, #111	; 0x6f
 8001baa:	d02a      	beq.n	8001c02 <_printf_i+0xb6>
 8001bac:	2a70      	cmp	r2, #112	; 0x70
 8001bae:	d1e5      	bne.n	8001b7c <_printf_i+0x30>
 8001bb0:	680a      	ldr	r2, [r1, #0]
 8001bb2:	f042 0220 	orr.w	r2, r2, #32
 8001bb6:	600a      	str	r2, [r1, #0]
 8001bb8:	e003      	b.n	8001bc2 <_printf_i+0x76>
 8001bba:	2a75      	cmp	r2, #117	; 0x75
 8001bbc:	d021      	beq.n	8001c02 <_printf_i+0xb6>
 8001bbe:	2a78      	cmp	r2, #120	; 0x78
 8001bc0:	d1dc      	bne.n	8001b7c <_printf_i+0x30>
 8001bc2:	2278      	movs	r2, #120	; 0x78
 8001bc4:	496f      	ldr	r1, [pc, #444]	; (8001d84 <_printf_i+0x238>)
 8001bc6:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8001bca:	e064      	b.n	8001c96 <_printf_i+0x14a>
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8001bd2:	1d11      	adds	r1, r2, #4
 8001bd4:	6019      	str	r1, [r3, #0]
 8001bd6:	6813      	ldr	r3, [r2, #0]
 8001bd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e0a3      	b.n	8001d28 <_printf_i+0x1dc>
 8001be0:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001be4:	f102 0104 	add.w	r1, r2, #4
 8001be8:	6019      	str	r1, [r3, #0]
 8001bea:	d0d7      	beq.n	8001b9c <_printf_i+0x50>
 8001bec:	f9b2 3000 	ldrsh.w	r3, [r2]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	da03      	bge.n	8001bfc <_printf_i+0xb0>
 8001bf4:	222d      	movs	r2, #45	; 0x2d
 8001bf6:	425b      	negs	r3, r3
 8001bf8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001bfc:	4962      	ldr	r1, [pc, #392]	; (8001d88 <_printf_i+0x23c>)
 8001bfe:	220a      	movs	r2, #10
 8001c00:	e017      	b.n	8001c32 <_printf_i+0xe6>
 8001c02:	6820      	ldr	r0, [r4, #0]
 8001c04:	6819      	ldr	r1, [r3, #0]
 8001c06:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001c0a:	d003      	beq.n	8001c14 <_printf_i+0xc8>
 8001c0c:	1d08      	adds	r0, r1, #4
 8001c0e:	6018      	str	r0, [r3, #0]
 8001c10:	680b      	ldr	r3, [r1, #0]
 8001c12:	e006      	b.n	8001c22 <_printf_i+0xd6>
 8001c14:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001c18:	f101 0004 	add.w	r0, r1, #4
 8001c1c:	6018      	str	r0, [r3, #0]
 8001c1e:	d0f7      	beq.n	8001c10 <_printf_i+0xc4>
 8001c20:	880b      	ldrh	r3, [r1, #0]
 8001c22:	2a6f      	cmp	r2, #111	; 0x6f
 8001c24:	bf14      	ite	ne
 8001c26:	220a      	movne	r2, #10
 8001c28:	2208      	moveq	r2, #8
 8001c2a:	4957      	ldr	r1, [pc, #348]	; (8001d88 <_printf_i+0x23c>)
 8001c2c:	2000      	movs	r0, #0
 8001c2e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8001c32:	6865      	ldr	r5, [r4, #4]
 8001c34:	2d00      	cmp	r5, #0
 8001c36:	60a5      	str	r5, [r4, #8]
 8001c38:	f2c0 809c 	blt.w	8001d74 <_printf_i+0x228>
 8001c3c:	6820      	ldr	r0, [r4, #0]
 8001c3e:	f020 0004 	bic.w	r0, r0, #4
 8001c42:	6020      	str	r0, [r4, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d13f      	bne.n	8001cc8 <_printf_i+0x17c>
 8001c48:	2d00      	cmp	r5, #0
 8001c4a:	f040 8095 	bne.w	8001d78 <_printf_i+0x22c>
 8001c4e:	4675      	mov	r5, lr
 8001c50:	2a08      	cmp	r2, #8
 8001c52:	d10b      	bne.n	8001c6c <_printf_i+0x120>
 8001c54:	6823      	ldr	r3, [r4, #0]
 8001c56:	07da      	lsls	r2, r3, #31
 8001c58:	d508      	bpl.n	8001c6c <_printf_i+0x120>
 8001c5a:	6923      	ldr	r3, [r4, #16]
 8001c5c:	6862      	ldr	r2, [r4, #4]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	bfde      	ittt	le
 8001c62:	2330      	movle	r3, #48	; 0x30
 8001c64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001c68:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8001c6c:	ebae 0305 	sub.w	r3, lr, r5
 8001c70:	6123      	str	r3, [r4, #16]
 8001c72:	f8cd 8000 	str.w	r8, [sp]
 8001c76:	463b      	mov	r3, r7
 8001c78:	aa03      	add	r2, sp, #12
 8001c7a:	4621      	mov	r1, r4
 8001c7c:	4630      	mov	r0, r6
 8001c7e:	f7ff feed 	bl	8001a5c <_printf_common>
 8001c82:	3001      	adds	r0, #1
 8001c84:	d155      	bne.n	8001d32 <_printf_i+0x1e6>
 8001c86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c8a:	b005      	add	sp, #20
 8001c8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001c90:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8001c94:	493c      	ldr	r1, [pc, #240]	; (8001d88 <_printf_i+0x23c>)
 8001c96:	6822      	ldr	r2, [r4, #0]
 8001c98:	6818      	ldr	r0, [r3, #0]
 8001c9a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001c9e:	f100 0504 	add.w	r5, r0, #4
 8001ca2:	601d      	str	r5, [r3, #0]
 8001ca4:	d001      	beq.n	8001caa <_printf_i+0x15e>
 8001ca6:	6803      	ldr	r3, [r0, #0]
 8001ca8:	e002      	b.n	8001cb0 <_printf_i+0x164>
 8001caa:	0655      	lsls	r5, r2, #25
 8001cac:	d5fb      	bpl.n	8001ca6 <_printf_i+0x15a>
 8001cae:	8803      	ldrh	r3, [r0, #0]
 8001cb0:	07d0      	lsls	r0, r2, #31
 8001cb2:	bf44      	itt	mi
 8001cb4:	f042 0220 	orrmi.w	r2, r2, #32
 8001cb8:	6022      	strmi	r2, [r4, #0]
 8001cba:	b91b      	cbnz	r3, 8001cc4 <_printf_i+0x178>
 8001cbc:	6822      	ldr	r2, [r4, #0]
 8001cbe:	f022 0220 	bic.w	r2, r2, #32
 8001cc2:	6022      	str	r2, [r4, #0]
 8001cc4:	2210      	movs	r2, #16
 8001cc6:	e7b1      	b.n	8001c2c <_printf_i+0xe0>
 8001cc8:	4675      	mov	r5, lr
 8001cca:	fbb3 f0f2 	udiv	r0, r3, r2
 8001cce:	fb02 3310 	mls	r3, r2, r0, r3
 8001cd2:	5ccb      	ldrb	r3, [r1, r3]
 8001cd4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2800      	cmp	r0, #0
 8001cdc:	d1f5      	bne.n	8001cca <_printf_i+0x17e>
 8001cde:	e7b7      	b.n	8001c50 <_printf_i+0x104>
 8001ce0:	6808      	ldr	r0, [r1, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001ce8:	6949      	ldr	r1, [r1, #20]
 8001cea:	d004      	beq.n	8001cf6 <_printf_i+0x1aa>
 8001cec:	1d10      	adds	r0, r2, #4
 8001cee:	6018      	str	r0, [r3, #0]
 8001cf0:	6813      	ldr	r3, [r2, #0]
 8001cf2:	6019      	str	r1, [r3, #0]
 8001cf4:	e007      	b.n	8001d06 <_printf_i+0x1ba>
 8001cf6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001cfa:	f102 0004 	add.w	r0, r2, #4
 8001cfe:	6018      	str	r0, [r3, #0]
 8001d00:	6813      	ldr	r3, [r2, #0]
 8001d02:	d0f6      	beq.n	8001cf2 <_printf_i+0x1a6>
 8001d04:	8019      	strh	r1, [r3, #0]
 8001d06:	2300      	movs	r3, #0
 8001d08:	4675      	mov	r5, lr
 8001d0a:	6123      	str	r3, [r4, #16]
 8001d0c:	e7b1      	b.n	8001c72 <_printf_i+0x126>
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	1d11      	adds	r1, r2, #4
 8001d12:	6019      	str	r1, [r3, #0]
 8001d14:	6815      	ldr	r5, [r2, #0]
 8001d16:	2100      	movs	r1, #0
 8001d18:	6862      	ldr	r2, [r4, #4]
 8001d1a:	4628      	mov	r0, r5
 8001d1c:	f000 f836 	bl	8001d8c <memchr>
 8001d20:	b108      	cbz	r0, 8001d26 <_printf_i+0x1da>
 8001d22:	1b40      	subs	r0, r0, r5
 8001d24:	6060      	str	r0, [r4, #4]
 8001d26:	6863      	ldr	r3, [r4, #4]
 8001d28:	6123      	str	r3, [r4, #16]
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d30:	e79f      	b.n	8001c72 <_printf_i+0x126>
 8001d32:	6923      	ldr	r3, [r4, #16]
 8001d34:	462a      	mov	r2, r5
 8001d36:	4639      	mov	r1, r7
 8001d38:	4630      	mov	r0, r6
 8001d3a:	47c0      	blx	r8
 8001d3c:	3001      	adds	r0, #1
 8001d3e:	d0a2      	beq.n	8001c86 <_printf_i+0x13a>
 8001d40:	6823      	ldr	r3, [r4, #0]
 8001d42:	079b      	lsls	r3, r3, #30
 8001d44:	d507      	bpl.n	8001d56 <_printf_i+0x20a>
 8001d46:	2500      	movs	r5, #0
 8001d48:	f104 0919 	add.w	r9, r4, #25
 8001d4c:	68e3      	ldr	r3, [r4, #12]
 8001d4e:	9a03      	ldr	r2, [sp, #12]
 8001d50:	1a9b      	subs	r3, r3, r2
 8001d52:	429d      	cmp	r5, r3
 8001d54:	db05      	blt.n	8001d62 <_printf_i+0x216>
 8001d56:	68e0      	ldr	r0, [r4, #12]
 8001d58:	9b03      	ldr	r3, [sp, #12]
 8001d5a:	4298      	cmp	r0, r3
 8001d5c:	bfb8      	it	lt
 8001d5e:	4618      	movlt	r0, r3
 8001d60:	e793      	b.n	8001c8a <_printf_i+0x13e>
 8001d62:	2301      	movs	r3, #1
 8001d64:	464a      	mov	r2, r9
 8001d66:	4639      	mov	r1, r7
 8001d68:	4630      	mov	r0, r6
 8001d6a:	47c0      	blx	r8
 8001d6c:	3001      	adds	r0, #1
 8001d6e:	d08a      	beq.n	8001c86 <_printf_i+0x13a>
 8001d70:	3501      	adds	r5, #1
 8001d72:	e7eb      	b.n	8001d4c <_printf_i+0x200>
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1a7      	bne.n	8001cc8 <_printf_i+0x17c>
 8001d78:	780b      	ldrb	r3, [r1, #0]
 8001d7a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001d7e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001d82:	e765      	b.n	8001c50 <_printf_i+0x104>
 8001d84:	08002060 	.word	0x08002060
 8001d88:	0800204f 	.word	0x0800204f

08001d8c <memchr>:
 8001d8c:	b510      	push	{r4, lr}
 8001d8e:	b2c9      	uxtb	r1, r1
 8001d90:	4402      	add	r2, r0
 8001d92:	4290      	cmp	r0, r2
 8001d94:	4603      	mov	r3, r0
 8001d96:	d101      	bne.n	8001d9c <memchr+0x10>
 8001d98:	2000      	movs	r0, #0
 8001d9a:	bd10      	pop	{r4, pc}
 8001d9c:	781c      	ldrb	r4, [r3, #0]
 8001d9e:	3001      	adds	r0, #1
 8001da0:	428c      	cmp	r4, r1
 8001da2:	d1f6      	bne.n	8001d92 <memchr+0x6>
 8001da4:	4618      	mov	r0, r3
 8001da6:	bd10      	pop	{r4, pc}

08001da8 <memcpy>:
 8001da8:	b510      	push	{r4, lr}
 8001daa:	1e43      	subs	r3, r0, #1
 8001dac:	440a      	add	r2, r1
 8001dae:	4291      	cmp	r1, r2
 8001db0:	d100      	bne.n	8001db4 <memcpy+0xc>
 8001db2:	bd10      	pop	{r4, pc}
 8001db4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001db8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001dbc:	e7f7      	b.n	8001dae <memcpy+0x6>

08001dbe <memmove>:
 8001dbe:	4288      	cmp	r0, r1
 8001dc0:	b510      	push	{r4, lr}
 8001dc2:	eb01 0302 	add.w	r3, r1, r2
 8001dc6:	d803      	bhi.n	8001dd0 <memmove+0x12>
 8001dc8:	1e42      	subs	r2, r0, #1
 8001dca:	4299      	cmp	r1, r3
 8001dcc:	d10c      	bne.n	8001de8 <memmove+0x2a>
 8001dce:	bd10      	pop	{r4, pc}
 8001dd0:	4298      	cmp	r0, r3
 8001dd2:	d2f9      	bcs.n	8001dc8 <memmove+0xa>
 8001dd4:	1881      	adds	r1, r0, r2
 8001dd6:	1ad2      	subs	r2, r2, r3
 8001dd8:	42d3      	cmn	r3, r2
 8001dda:	d100      	bne.n	8001dde <memmove+0x20>
 8001ddc:	bd10      	pop	{r4, pc}
 8001dde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001de2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8001de6:	e7f7      	b.n	8001dd8 <memmove+0x1a>
 8001de8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001dec:	f802 4f01 	strb.w	r4, [r2, #1]!
 8001df0:	e7eb      	b.n	8001dca <memmove+0xc>
	...

08001df4 <_free_r>:
 8001df4:	b538      	push	{r3, r4, r5, lr}
 8001df6:	4605      	mov	r5, r0
 8001df8:	2900      	cmp	r1, #0
 8001dfa:	d043      	beq.n	8001e84 <_free_r+0x90>
 8001dfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001e00:	1f0c      	subs	r4, r1, #4
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	bfb8      	it	lt
 8001e06:	18e4      	addlt	r4, r4, r3
 8001e08:	f000 f8d4 	bl	8001fb4 <__malloc_lock>
 8001e0c:	4a1e      	ldr	r2, [pc, #120]	; (8001e88 <_free_r+0x94>)
 8001e0e:	6813      	ldr	r3, [r2, #0]
 8001e10:	4610      	mov	r0, r2
 8001e12:	b933      	cbnz	r3, 8001e22 <_free_r+0x2e>
 8001e14:	6063      	str	r3, [r4, #4]
 8001e16:	6014      	str	r4, [r2, #0]
 8001e18:	4628      	mov	r0, r5
 8001e1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001e1e:	f000 b8ca 	b.w	8001fb6 <__malloc_unlock>
 8001e22:	42a3      	cmp	r3, r4
 8001e24:	d90b      	bls.n	8001e3e <_free_r+0x4a>
 8001e26:	6821      	ldr	r1, [r4, #0]
 8001e28:	1862      	adds	r2, r4, r1
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	bf01      	itttt	eq
 8001e2e:	681a      	ldreq	r2, [r3, #0]
 8001e30:	685b      	ldreq	r3, [r3, #4]
 8001e32:	1852      	addeq	r2, r2, r1
 8001e34:	6022      	streq	r2, [r4, #0]
 8001e36:	6063      	str	r3, [r4, #4]
 8001e38:	6004      	str	r4, [r0, #0]
 8001e3a:	e7ed      	b.n	8001e18 <_free_r+0x24>
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	685a      	ldr	r2, [r3, #4]
 8001e40:	b10a      	cbz	r2, 8001e46 <_free_r+0x52>
 8001e42:	42a2      	cmp	r2, r4
 8001e44:	d9fa      	bls.n	8001e3c <_free_r+0x48>
 8001e46:	6819      	ldr	r1, [r3, #0]
 8001e48:	1858      	adds	r0, r3, r1
 8001e4a:	42a0      	cmp	r0, r4
 8001e4c:	d10b      	bne.n	8001e66 <_free_r+0x72>
 8001e4e:	6820      	ldr	r0, [r4, #0]
 8001e50:	4401      	add	r1, r0
 8001e52:	1858      	adds	r0, r3, r1
 8001e54:	4282      	cmp	r2, r0
 8001e56:	6019      	str	r1, [r3, #0]
 8001e58:	d1de      	bne.n	8001e18 <_free_r+0x24>
 8001e5a:	6810      	ldr	r0, [r2, #0]
 8001e5c:	6852      	ldr	r2, [r2, #4]
 8001e5e:	4401      	add	r1, r0
 8001e60:	6019      	str	r1, [r3, #0]
 8001e62:	605a      	str	r2, [r3, #4]
 8001e64:	e7d8      	b.n	8001e18 <_free_r+0x24>
 8001e66:	d902      	bls.n	8001e6e <_free_r+0x7a>
 8001e68:	230c      	movs	r3, #12
 8001e6a:	602b      	str	r3, [r5, #0]
 8001e6c:	e7d4      	b.n	8001e18 <_free_r+0x24>
 8001e6e:	6820      	ldr	r0, [r4, #0]
 8001e70:	1821      	adds	r1, r4, r0
 8001e72:	428a      	cmp	r2, r1
 8001e74:	bf01      	itttt	eq
 8001e76:	6811      	ldreq	r1, [r2, #0]
 8001e78:	6852      	ldreq	r2, [r2, #4]
 8001e7a:	1809      	addeq	r1, r1, r0
 8001e7c:	6021      	streq	r1, [r4, #0]
 8001e7e:	6062      	str	r2, [r4, #4]
 8001e80:	605c      	str	r4, [r3, #4]
 8001e82:	e7c9      	b.n	8001e18 <_free_r+0x24>
 8001e84:	bd38      	pop	{r3, r4, r5, pc}
 8001e86:	bf00      	nop
 8001e88:	2000008c 	.word	0x2000008c

08001e8c <_malloc_r>:
 8001e8c:	b570      	push	{r4, r5, r6, lr}
 8001e8e:	1ccd      	adds	r5, r1, #3
 8001e90:	f025 0503 	bic.w	r5, r5, #3
 8001e94:	3508      	adds	r5, #8
 8001e96:	2d0c      	cmp	r5, #12
 8001e98:	bf38      	it	cc
 8001e9a:	250c      	movcc	r5, #12
 8001e9c:	2d00      	cmp	r5, #0
 8001e9e:	4606      	mov	r6, r0
 8001ea0:	db01      	blt.n	8001ea6 <_malloc_r+0x1a>
 8001ea2:	42a9      	cmp	r1, r5
 8001ea4:	d903      	bls.n	8001eae <_malloc_r+0x22>
 8001ea6:	230c      	movs	r3, #12
 8001ea8:	6033      	str	r3, [r6, #0]
 8001eaa:	2000      	movs	r0, #0
 8001eac:	bd70      	pop	{r4, r5, r6, pc}
 8001eae:	f000 f881 	bl	8001fb4 <__malloc_lock>
 8001eb2:	4a23      	ldr	r2, [pc, #140]	; (8001f40 <_malloc_r+0xb4>)
 8001eb4:	6814      	ldr	r4, [r2, #0]
 8001eb6:	4621      	mov	r1, r4
 8001eb8:	b991      	cbnz	r1, 8001ee0 <_malloc_r+0x54>
 8001eba:	4c22      	ldr	r4, [pc, #136]	; (8001f44 <_malloc_r+0xb8>)
 8001ebc:	6823      	ldr	r3, [r4, #0]
 8001ebe:	b91b      	cbnz	r3, 8001ec8 <_malloc_r+0x3c>
 8001ec0:	4630      	mov	r0, r6
 8001ec2:	f000 f867 	bl	8001f94 <_sbrk_r>
 8001ec6:	6020      	str	r0, [r4, #0]
 8001ec8:	4629      	mov	r1, r5
 8001eca:	4630      	mov	r0, r6
 8001ecc:	f000 f862 	bl	8001f94 <_sbrk_r>
 8001ed0:	1c43      	adds	r3, r0, #1
 8001ed2:	d126      	bne.n	8001f22 <_malloc_r+0x96>
 8001ed4:	230c      	movs	r3, #12
 8001ed6:	4630      	mov	r0, r6
 8001ed8:	6033      	str	r3, [r6, #0]
 8001eda:	f000 f86c 	bl	8001fb6 <__malloc_unlock>
 8001ede:	e7e4      	b.n	8001eaa <_malloc_r+0x1e>
 8001ee0:	680b      	ldr	r3, [r1, #0]
 8001ee2:	1b5b      	subs	r3, r3, r5
 8001ee4:	d41a      	bmi.n	8001f1c <_malloc_r+0x90>
 8001ee6:	2b0b      	cmp	r3, #11
 8001ee8:	d90f      	bls.n	8001f0a <_malloc_r+0x7e>
 8001eea:	600b      	str	r3, [r1, #0]
 8001eec:	18cc      	adds	r4, r1, r3
 8001eee:	50cd      	str	r5, [r1, r3]
 8001ef0:	4630      	mov	r0, r6
 8001ef2:	f000 f860 	bl	8001fb6 <__malloc_unlock>
 8001ef6:	f104 000b 	add.w	r0, r4, #11
 8001efa:	1d23      	adds	r3, r4, #4
 8001efc:	f020 0007 	bic.w	r0, r0, #7
 8001f00:	1ac3      	subs	r3, r0, r3
 8001f02:	d01b      	beq.n	8001f3c <_malloc_r+0xb0>
 8001f04:	425a      	negs	r2, r3
 8001f06:	50e2      	str	r2, [r4, r3]
 8001f08:	bd70      	pop	{r4, r5, r6, pc}
 8001f0a:	428c      	cmp	r4, r1
 8001f0c:	bf0b      	itete	eq
 8001f0e:	6863      	ldreq	r3, [r4, #4]
 8001f10:	684b      	ldrne	r3, [r1, #4]
 8001f12:	6013      	streq	r3, [r2, #0]
 8001f14:	6063      	strne	r3, [r4, #4]
 8001f16:	bf18      	it	ne
 8001f18:	460c      	movne	r4, r1
 8001f1a:	e7e9      	b.n	8001ef0 <_malloc_r+0x64>
 8001f1c:	460c      	mov	r4, r1
 8001f1e:	6849      	ldr	r1, [r1, #4]
 8001f20:	e7ca      	b.n	8001eb8 <_malloc_r+0x2c>
 8001f22:	1cc4      	adds	r4, r0, #3
 8001f24:	f024 0403 	bic.w	r4, r4, #3
 8001f28:	42a0      	cmp	r0, r4
 8001f2a:	d005      	beq.n	8001f38 <_malloc_r+0xac>
 8001f2c:	1a21      	subs	r1, r4, r0
 8001f2e:	4630      	mov	r0, r6
 8001f30:	f000 f830 	bl	8001f94 <_sbrk_r>
 8001f34:	3001      	adds	r0, #1
 8001f36:	d0cd      	beq.n	8001ed4 <_malloc_r+0x48>
 8001f38:	6025      	str	r5, [r4, #0]
 8001f3a:	e7d9      	b.n	8001ef0 <_malloc_r+0x64>
 8001f3c:	bd70      	pop	{r4, r5, r6, pc}
 8001f3e:	bf00      	nop
 8001f40:	2000008c 	.word	0x2000008c
 8001f44:	20000090 	.word	0x20000090

08001f48 <_realloc_r>:
 8001f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f4a:	4607      	mov	r7, r0
 8001f4c:	4614      	mov	r4, r2
 8001f4e:	460e      	mov	r6, r1
 8001f50:	b921      	cbnz	r1, 8001f5c <_realloc_r+0x14>
 8001f52:	4611      	mov	r1, r2
 8001f54:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001f58:	f7ff bf98 	b.w	8001e8c <_malloc_r>
 8001f5c:	b922      	cbnz	r2, 8001f68 <_realloc_r+0x20>
 8001f5e:	f7ff ff49 	bl	8001df4 <_free_r>
 8001f62:	4625      	mov	r5, r4
 8001f64:	4628      	mov	r0, r5
 8001f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f68:	f000 f826 	bl	8001fb8 <_malloc_usable_size_r>
 8001f6c:	4284      	cmp	r4, r0
 8001f6e:	d90f      	bls.n	8001f90 <_realloc_r+0x48>
 8001f70:	4621      	mov	r1, r4
 8001f72:	4638      	mov	r0, r7
 8001f74:	f7ff ff8a 	bl	8001e8c <_malloc_r>
 8001f78:	4605      	mov	r5, r0
 8001f7a:	2800      	cmp	r0, #0
 8001f7c:	d0f2      	beq.n	8001f64 <_realloc_r+0x1c>
 8001f7e:	4631      	mov	r1, r6
 8001f80:	4622      	mov	r2, r4
 8001f82:	f7ff ff11 	bl	8001da8 <memcpy>
 8001f86:	4631      	mov	r1, r6
 8001f88:	4638      	mov	r0, r7
 8001f8a:	f7ff ff33 	bl	8001df4 <_free_r>
 8001f8e:	e7e9      	b.n	8001f64 <_realloc_r+0x1c>
 8001f90:	4635      	mov	r5, r6
 8001f92:	e7e7      	b.n	8001f64 <_realloc_r+0x1c>

08001f94 <_sbrk_r>:
 8001f94:	b538      	push	{r3, r4, r5, lr}
 8001f96:	2300      	movs	r3, #0
 8001f98:	4c05      	ldr	r4, [pc, #20]	; (8001fb0 <_sbrk_r+0x1c>)
 8001f9a:	4605      	mov	r5, r0
 8001f9c:	4608      	mov	r0, r1
 8001f9e:	6023      	str	r3, [r4, #0]
 8001fa0:	f000 f814 	bl	8001fcc <_sbrk>
 8001fa4:	1c43      	adds	r3, r0, #1
 8001fa6:	d102      	bne.n	8001fae <_sbrk_r+0x1a>
 8001fa8:	6823      	ldr	r3, [r4, #0]
 8001faa:	b103      	cbz	r3, 8001fae <_sbrk_r+0x1a>
 8001fac:	602b      	str	r3, [r5, #0]
 8001fae:	bd38      	pop	{r3, r4, r5, pc}
 8001fb0:	2000010c 	.word	0x2000010c

08001fb4 <__malloc_lock>:
 8001fb4:	4770      	bx	lr

08001fb6 <__malloc_unlock>:
 8001fb6:	4770      	bx	lr

08001fb8 <_malloc_usable_size_r>:
 8001fb8:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8001fbc:	2800      	cmp	r0, #0
 8001fbe:	f1a0 0004 	sub.w	r0, r0, #4
 8001fc2:	bfbc      	itt	lt
 8001fc4:	580b      	ldrlt	r3, [r1, r0]
 8001fc6:	18c0      	addlt	r0, r0, r3
 8001fc8:	4770      	bx	lr
	...

08001fcc <_sbrk>:
 8001fcc:	4b04      	ldr	r3, [pc, #16]	; (8001fe0 <_sbrk+0x14>)
 8001fce:	4602      	mov	r2, r0
 8001fd0:	6819      	ldr	r1, [r3, #0]
 8001fd2:	b909      	cbnz	r1, 8001fd8 <_sbrk+0xc>
 8001fd4:	4903      	ldr	r1, [pc, #12]	; (8001fe4 <_sbrk+0x18>)
 8001fd6:	6019      	str	r1, [r3, #0]
 8001fd8:	6818      	ldr	r0, [r3, #0]
 8001fda:	4402      	add	r2, r0
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	4770      	bx	lr
 8001fe0:	20000094 	.word	0x20000094
 8001fe4:	20000110 	.word	0x20000110

08001fe8 <_init>:
 8001fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fea:	bf00      	nop
 8001fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fee:	bc08      	pop	{r3}
 8001ff0:	469e      	mov	lr, r3
 8001ff2:	4770      	bx	lr

08001ff4 <_fini>:
 8001ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ff6:	bf00      	nop
 8001ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ffa:	bc08      	pop	{r3}
 8001ffc:	469e      	mov	lr, r3
 8001ffe:	4770      	bx	lr
