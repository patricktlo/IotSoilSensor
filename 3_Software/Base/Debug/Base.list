
Base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b48  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08000c54  08000c54  00010c54  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000c74  08000c74  00010c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000c78  08000c78  00010c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08000c7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  2000000c  08000c88  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000002c  08000c88  0002002c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00007799  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000150e  00000000  00000000  000277ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e80  00000000  00000000  00028cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000320  00000000  00000000  00029b60  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003f8  00000000  00000000  00029e80  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00001dcc  00000000  00000000  0002a278  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001509  00000000  00000000  0002c044  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002d54d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000680  00000000  00000000  0002d5cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08000c3c 	.word	0x08000c3c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08000c3c 	.word	0x08000c3c

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f892 	bl	800028c <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000178:	f000 f854 	bl	8000224 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000008 	.word	0x20000008
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 f82d 	bl	8000200 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f000 fc76 	bl	8000a9c <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000028 	.word	0x20000028
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000028 	.word	0x20000028

080001dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001dc:	b538      	push	{r3, r4, r5, lr}
 80001de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001e0:	f7ff fff6 	bl	80001d0 <HAL_GetTick>
 80001e4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001e6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001e8:	bf1e      	ittt	ne
 80001ea:	4b04      	ldrne	r3, [pc, #16]	; (80001fc <HAL_Delay+0x20>)
 80001ec:	781b      	ldrbne	r3, [r3, #0]
 80001ee:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001f0:	f7ff ffee 	bl	80001d0 <HAL_GetTick>
 80001f4:	1b40      	subs	r0, r0, r5
 80001f6:	4284      	cmp	r4, r0
 80001f8:	d8fa      	bhi.n	80001f0 <HAL_Delay+0x14>
  {
  }
}
 80001fa:	bd38      	pop	{r3, r4, r5, pc}
 80001fc:	20000000 	.word	0x20000000

08000200 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000200:	4a07      	ldr	r2, [pc, #28]	; (8000220 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000202:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000204:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000206:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800020a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800020e:	041b      	lsls	r3, r3, #16
 8000210:	0c1b      	lsrs	r3, r3, #16
 8000212:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000216:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800021a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800021c:	60d3      	str	r3, [r2, #12]
 800021e:	4770      	bx	lr
 8000220:	e000ed00 	.word	0xe000ed00

08000224 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000224:	4b17      	ldr	r3, [pc, #92]	; (8000284 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000226:	b530      	push	{r4, r5, lr}
 8000228:	68dc      	ldr	r4, [r3, #12]
 800022a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800022e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000232:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000234:	2b04      	cmp	r3, #4
 8000236:	bf28      	it	cs
 8000238:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800023a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800023c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000240:	bf98      	it	ls
 8000242:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000244:	fa05 f303 	lsl.w	r3, r5, r3
 8000248:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800024c:	bf88      	it	hi
 800024e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000250:	4019      	ands	r1, r3
 8000252:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000254:	fa05 f404 	lsl.w	r4, r5, r4
 8000258:	3c01      	subs	r4, #1
 800025a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800025c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800025e:	ea42 0201 	orr.w	r2, r2, r1
 8000262:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000266:	bfaf      	iteee	ge
 8000268:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026c:	4b06      	ldrlt	r3, [pc, #24]	; (8000288 <HAL_NVIC_SetPriority+0x64>)
 800026e:	f000 000f 	andlt.w	r0, r0, #15
 8000272:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000274:	bfa5      	ittet	ge
 8000276:	b2d2      	uxtbge	r2, r2
 8000278:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027c:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027e:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000282:	bd30      	pop	{r4, r5, pc}
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000ed14 	.word	0xe000ed14

0800028c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800028c:	3801      	subs	r0, #1
 800028e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000292:	d20a      	bcs.n	80002aa <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000294:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000296:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000298:	4a06      	ldr	r2, [pc, #24]	; (80002b4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800029a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800029c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002a0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002a2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002a4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002a6:	601a      	str	r2, [r3, #0]
 80002a8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002aa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	e000e010 	.word	0xe000e010
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80002ba:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80002bc:	681a      	ldr	r2, [r3, #0]
 80002be:	bf0c      	ite	eq
 80002c0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80002c4:	f022 0204 	bicne.w	r2, r2, #4
 80002c8:	601a      	str	r2, [r3, #0]
 80002ca:	4770      	bx	lr
 80002cc:	e000e010 	.word	0xe000e010

080002d0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80002d0:	4770      	bx	lr

080002d2 <HAL_SYSTICK_IRQHandler>:
{
 80002d2:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80002d4:	f7ff fffc 	bl	80002d0 <HAL_SYSTICK_Callback>
 80002d8:	bd08      	pop	{r3, pc}
	...

080002dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80002e0:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80002e2:	4616      	mov	r6, r2
 80002e4:	4b65      	ldr	r3, [pc, #404]	; (800047c <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002e6:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 800048c <HAL_GPIO_Init+0x1b0>
 80002ea:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000490 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80002ee:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002f2:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80002f4:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002f8:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d17f      	bne.n	8000400 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8000300:	684d      	ldr	r5, [r1, #4]
 8000302:	2d12      	cmp	r5, #18
 8000304:	f000 80af 	beq.w	8000466 <HAL_GPIO_Init+0x18a>
 8000308:	f200 8088 	bhi.w	800041c <HAL_GPIO_Init+0x140>
 800030c:	2d02      	cmp	r5, #2
 800030e:	f000 80a7 	beq.w	8000460 <HAL_GPIO_Init+0x184>
 8000312:	d87c      	bhi.n	800040e <HAL_GPIO_Init+0x132>
 8000314:	2d00      	cmp	r5, #0
 8000316:	f000 808e 	beq.w	8000436 <HAL_GPIO_Init+0x15a>
 800031a:	2d01      	cmp	r5, #1
 800031c:	f000 809e 	beq.w	800045c <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000320:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000324:	2cff      	cmp	r4, #255	; 0xff
 8000326:	bf93      	iteet	ls
 8000328:	4682      	movls	sl, r0
 800032a:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800032e:	3d08      	subhi	r5, #8
 8000330:	f8d0 b000 	ldrls.w	fp, [r0]
 8000334:	bf92      	itee	ls
 8000336:	00b5      	lslls	r5, r6, #2
 8000338:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 800033c:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800033e:	fa09 f805 	lsl.w	r8, r9, r5
 8000342:	ea2b 0808 	bic.w	r8, fp, r8
 8000346:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800034a:	bf88      	it	hi
 800034c:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000350:	ea48 0505 	orr.w	r5, r8, r5
 8000354:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000358:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800035c:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000360:	d04e      	beq.n	8000400 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000362:	4d47      	ldr	r5, [pc, #284]	; (8000480 <HAL_GPIO_Init+0x1a4>)
 8000364:	4f46      	ldr	r7, [pc, #280]	; (8000480 <HAL_GPIO_Init+0x1a4>)
 8000366:	69ad      	ldr	r5, [r5, #24]
 8000368:	f026 0803 	bic.w	r8, r6, #3
 800036c:	f045 0501 	orr.w	r5, r5, #1
 8000370:	61bd      	str	r5, [r7, #24]
 8000372:	69bd      	ldr	r5, [r7, #24]
 8000374:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000378:	f005 0501 	and.w	r5, r5, #1
 800037c:	9501      	str	r5, [sp, #4]
 800037e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000382:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000386:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000388:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 800038c:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000390:	fa09 f90b 	lsl.w	r9, r9, fp
 8000394:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000398:	4d3a      	ldr	r5, [pc, #232]	; (8000484 <HAL_GPIO_Init+0x1a8>)
 800039a:	42a8      	cmp	r0, r5
 800039c:	d068      	beq.n	8000470 <HAL_GPIO_Init+0x194>
 800039e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003a2:	42a8      	cmp	r0, r5
 80003a4:	d066      	beq.n	8000474 <HAL_GPIO_Init+0x198>
 80003a6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003aa:	42a8      	cmp	r0, r5
 80003ac:	d064      	beq.n	8000478 <HAL_GPIO_Init+0x19c>
 80003ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003b2:	42a8      	cmp	r0, r5
 80003b4:	bf0c      	ite	eq
 80003b6:	2503      	moveq	r5, #3
 80003b8:	2504      	movne	r5, #4
 80003ba:	fa05 f50b 	lsl.w	r5, r5, fp
 80003be:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80003c2:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80003c6:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003c8:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80003cc:	bf14      	ite	ne
 80003ce:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80003d0:	43a5      	biceq	r5, r4
 80003d2:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80003d4:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003d6:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80003da:	bf14      	ite	ne
 80003dc:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80003de:	43a5      	biceq	r5, r4
 80003e0:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80003e2:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003e4:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80003e8:	bf14      	ite	ne
 80003ea:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80003ec:	43a5      	biceq	r5, r4
 80003ee:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80003f0:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003f2:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80003f6:	bf14      	ite	ne
 80003f8:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80003fa:	ea25 0404 	biceq.w	r4, r5, r4
 80003fe:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000400:	3601      	adds	r6, #1
 8000402:	2e10      	cmp	r6, #16
 8000404:	f47f af73 	bne.w	80002ee <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8000408:	b003      	add	sp, #12
 800040a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800040e:	2d03      	cmp	r5, #3
 8000410:	d022      	beq.n	8000458 <HAL_GPIO_Init+0x17c>
 8000412:	2d11      	cmp	r5, #17
 8000414:	d184      	bne.n	8000320 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000416:	68ca      	ldr	r2, [r1, #12]
 8000418:	3204      	adds	r2, #4
          break;
 800041a:	e781      	b.n	8000320 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800041c:	4f1a      	ldr	r7, [pc, #104]	; (8000488 <HAL_GPIO_Init+0x1ac>)
 800041e:	42bd      	cmp	r5, r7
 8000420:	d009      	beq.n	8000436 <HAL_GPIO_Init+0x15a>
 8000422:	d812      	bhi.n	800044a <HAL_GPIO_Init+0x16e>
 8000424:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000494 <HAL_GPIO_Init+0x1b8>
 8000428:	454d      	cmp	r5, r9
 800042a:	d004      	beq.n	8000436 <HAL_GPIO_Init+0x15a>
 800042c:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000430:	454d      	cmp	r5, r9
 8000432:	f47f af75 	bne.w	8000320 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000436:	688a      	ldr	r2, [r1, #8]
 8000438:	b1c2      	cbz	r2, 800046c <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800043a:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 800043c:	bf0c      	ite	eq
 800043e:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000442:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000446:	2208      	movs	r2, #8
 8000448:	e76a      	b.n	8000320 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800044a:	4575      	cmp	r5, lr
 800044c:	d0f3      	beq.n	8000436 <HAL_GPIO_Init+0x15a>
 800044e:	4565      	cmp	r5, ip
 8000450:	d0f1      	beq.n	8000436 <HAL_GPIO_Init+0x15a>
 8000452:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000498 <HAL_GPIO_Init+0x1bc>
 8000456:	e7eb      	b.n	8000430 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000458:	2200      	movs	r2, #0
 800045a:	e761      	b.n	8000320 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800045c:	68ca      	ldr	r2, [r1, #12]
          break;
 800045e:	e75f      	b.n	8000320 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000460:	68ca      	ldr	r2, [r1, #12]
 8000462:	3208      	adds	r2, #8
          break;
 8000464:	e75c      	b.n	8000320 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000466:	68ca      	ldr	r2, [r1, #12]
 8000468:	320c      	adds	r2, #12
          break;
 800046a:	e759      	b.n	8000320 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800046c:	2204      	movs	r2, #4
 800046e:	e757      	b.n	8000320 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000470:	2500      	movs	r5, #0
 8000472:	e7a2      	b.n	80003ba <HAL_GPIO_Init+0xde>
 8000474:	2501      	movs	r5, #1
 8000476:	e7a0      	b.n	80003ba <HAL_GPIO_Init+0xde>
 8000478:	2502      	movs	r5, #2
 800047a:	e79e      	b.n	80003ba <HAL_GPIO_Init+0xde>
 800047c:	40010400 	.word	0x40010400
 8000480:	40021000 	.word	0x40021000
 8000484:	40010800 	.word	0x40010800
 8000488:	10210000 	.word	0x10210000
 800048c:	10310000 	.word	0x10310000
 8000490:	10320000 	.word	0x10320000
 8000494:	10110000 	.word	0x10110000
 8000498:	10220000 	.word	0x10220000

0800049c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800049c:	b10a      	cbz	r2, 80004a2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800049e:	6101      	str	r1, [r0, #16]
 80004a0:	4770      	bx	lr
 80004a2:	0409      	lsls	r1, r1, #16
 80004a4:	e7fb      	b.n	800049e <HAL_GPIO_WritePin+0x2>

080004a6 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80004a6:	68c3      	ldr	r3, [r0, #12]
 80004a8:	4059      	eors	r1, r3
 80004aa:	60c1      	str	r1, [r0, #12]
 80004ac:	4770      	bx	lr
	...

080004b0 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004b0:	6803      	ldr	r3, [r0, #0]
{
 80004b2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004b6:	07db      	lsls	r3, r3, #31
{
 80004b8:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004ba:	d410      	bmi.n	80004de <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80004bc:	682b      	ldr	r3, [r5, #0]
 80004be:	079f      	lsls	r7, r3, #30
 80004c0:	d45e      	bmi.n	8000580 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80004c2:	682b      	ldr	r3, [r5, #0]
 80004c4:	0719      	lsls	r1, r3, #28
 80004c6:	f100 8095 	bmi.w	80005f4 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80004ca:	682b      	ldr	r3, [r5, #0]
 80004cc:	075a      	lsls	r2, r3, #29
 80004ce:	f100 80bf 	bmi.w	8000650 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80004d2:	69ea      	ldr	r2, [r5, #28]
 80004d4:	2a00      	cmp	r2, #0
 80004d6:	f040 812d 	bne.w	8000734 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80004da:	2000      	movs	r0, #0
 80004dc:	e014      	b.n	8000508 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80004de:	4c90      	ldr	r4, [pc, #576]	; (8000720 <HAL_RCC_OscConfig+0x270>)
 80004e0:	6863      	ldr	r3, [r4, #4]
 80004e2:	f003 030c 	and.w	r3, r3, #12
 80004e6:	2b04      	cmp	r3, #4
 80004e8:	d007      	beq.n	80004fa <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80004ea:	6863      	ldr	r3, [r4, #4]
 80004ec:	f003 030c 	and.w	r3, r3, #12
 80004f0:	2b08      	cmp	r3, #8
 80004f2:	d10c      	bne.n	800050e <HAL_RCC_OscConfig+0x5e>
 80004f4:	6863      	ldr	r3, [r4, #4]
 80004f6:	03de      	lsls	r6, r3, #15
 80004f8:	d509      	bpl.n	800050e <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80004fa:	6823      	ldr	r3, [r4, #0]
 80004fc:	039c      	lsls	r4, r3, #14
 80004fe:	d5dd      	bpl.n	80004bc <HAL_RCC_OscConfig+0xc>
 8000500:	686b      	ldr	r3, [r5, #4]
 8000502:	2b00      	cmp	r3, #0
 8000504:	d1da      	bne.n	80004bc <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000506:	2001      	movs	r0, #1
}
 8000508:	b002      	add	sp, #8
 800050a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800050e:	686b      	ldr	r3, [r5, #4]
 8000510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000514:	d110      	bne.n	8000538 <HAL_RCC_OscConfig+0x88>
 8000516:	6823      	ldr	r3, [r4, #0]
 8000518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800051c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800051e:	f7ff fe57 	bl	80001d0 <HAL_GetTick>
 8000522:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000524:	6823      	ldr	r3, [r4, #0]
 8000526:	0398      	lsls	r0, r3, #14
 8000528:	d4c8      	bmi.n	80004bc <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800052a:	f7ff fe51 	bl	80001d0 <HAL_GetTick>
 800052e:	1b80      	subs	r0, r0, r6
 8000530:	2864      	cmp	r0, #100	; 0x64
 8000532:	d9f7      	bls.n	8000524 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000534:	2003      	movs	r0, #3
 8000536:	e7e7      	b.n	8000508 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000538:	b99b      	cbnz	r3, 8000562 <HAL_RCC_OscConfig+0xb2>
 800053a:	6823      	ldr	r3, [r4, #0]
 800053c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000540:	6023      	str	r3, [r4, #0]
 8000542:	6823      	ldr	r3, [r4, #0]
 8000544:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000548:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800054a:	f7ff fe41 	bl	80001d0 <HAL_GetTick>
 800054e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000550:	6823      	ldr	r3, [r4, #0]
 8000552:	0399      	lsls	r1, r3, #14
 8000554:	d5b2      	bpl.n	80004bc <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000556:	f7ff fe3b 	bl	80001d0 <HAL_GetTick>
 800055a:	1b80      	subs	r0, r0, r6
 800055c:	2864      	cmp	r0, #100	; 0x64
 800055e:	d9f7      	bls.n	8000550 <HAL_RCC_OscConfig+0xa0>
 8000560:	e7e8      	b.n	8000534 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000562:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000566:	6823      	ldr	r3, [r4, #0]
 8000568:	d103      	bne.n	8000572 <HAL_RCC_OscConfig+0xc2>
 800056a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800056e:	6023      	str	r3, [r4, #0]
 8000570:	e7d1      	b.n	8000516 <HAL_RCC_OscConfig+0x66>
 8000572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000576:	6023      	str	r3, [r4, #0]
 8000578:	6823      	ldr	r3, [r4, #0]
 800057a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800057e:	e7cd      	b.n	800051c <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000580:	4c67      	ldr	r4, [pc, #412]	; (8000720 <HAL_RCC_OscConfig+0x270>)
 8000582:	6863      	ldr	r3, [r4, #4]
 8000584:	f013 0f0c 	tst.w	r3, #12
 8000588:	d007      	beq.n	800059a <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800058a:	6863      	ldr	r3, [r4, #4]
 800058c:	f003 030c 	and.w	r3, r3, #12
 8000590:	2b08      	cmp	r3, #8
 8000592:	d110      	bne.n	80005b6 <HAL_RCC_OscConfig+0x106>
 8000594:	6863      	ldr	r3, [r4, #4]
 8000596:	03da      	lsls	r2, r3, #15
 8000598:	d40d      	bmi.n	80005b6 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800059a:	6823      	ldr	r3, [r4, #0]
 800059c:	079b      	lsls	r3, r3, #30
 800059e:	d502      	bpl.n	80005a6 <HAL_RCC_OscConfig+0xf6>
 80005a0:	692b      	ldr	r3, [r5, #16]
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d1af      	bne.n	8000506 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80005a6:	6823      	ldr	r3, [r4, #0]
 80005a8:	696a      	ldr	r2, [r5, #20]
 80005aa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80005ae:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80005b2:	6023      	str	r3, [r4, #0]
 80005b4:	e785      	b.n	80004c2 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80005b6:	692a      	ldr	r2, [r5, #16]
 80005b8:	4b5a      	ldr	r3, [pc, #360]	; (8000724 <HAL_RCC_OscConfig+0x274>)
 80005ba:	b16a      	cbz	r2, 80005d8 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 80005bc:	2201      	movs	r2, #1
 80005be:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005c0:	f7ff fe06 	bl	80001d0 <HAL_GetTick>
 80005c4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80005c6:	6823      	ldr	r3, [r4, #0]
 80005c8:	079f      	lsls	r7, r3, #30
 80005ca:	d4ec      	bmi.n	80005a6 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80005cc:	f7ff fe00 	bl	80001d0 <HAL_GetTick>
 80005d0:	1b80      	subs	r0, r0, r6
 80005d2:	2802      	cmp	r0, #2
 80005d4:	d9f7      	bls.n	80005c6 <HAL_RCC_OscConfig+0x116>
 80005d6:	e7ad      	b.n	8000534 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80005d8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005da:	f7ff fdf9 	bl	80001d0 <HAL_GetTick>
 80005de:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80005e0:	6823      	ldr	r3, [r4, #0]
 80005e2:	0798      	lsls	r0, r3, #30
 80005e4:	f57f af6d 	bpl.w	80004c2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80005e8:	f7ff fdf2 	bl	80001d0 <HAL_GetTick>
 80005ec:	1b80      	subs	r0, r0, r6
 80005ee:	2802      	cmp	r0, #2
 80005f0:	d9f6      	bls.n	80005e0 <HAL_RCC_OscConfig+0x130>
 80005f2:	e79f      	b.n	8000534 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80005f4:	69aa      	ldr	r2, [r5, #24]
 80005f6:	4c4a      	ldr	r4, [pc, #296]	; (8000720 <HAL_RCC_OscConfig+0x270>)
 80005f8:	4b4b      	ldr	r3, [pc, #300]	; (8000728 <HAL_RCC_OscConfig+0x278>)
 80005fa:	b1da      	cbz	r2, 8000634 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80005fc:	2201      	movs	r2, #1
 80005fe:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000600:	f7ff fde6 	bl	80001d0 <HAL_GetTick>
 8000604:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000606:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000608:	079b      	lsls	r3, r3, #30
 800060a:	d50d      	bpl.n	8000628 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800060c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000610:	4b46      	ldr	r3, [pc, #280]	; (800072c <HAL_RCC_OscConfig+0x27c>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	fbb3 f3f2 	udiv	r3, r3, r2
 8000618:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800061a:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800061c:	9b01      	ldr	r3, [sp, #4]
 800061e:	1e5a      	subs	r2, r3, #1
 8000620:	9201      	str	r2, [sp, #4]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d1f9      	bne.n	800061a <HAL_RCC_OscConfig+0x16a>
 8000626:	e750      	b.n	80004ca <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000628:	f7ff fdd2 	bl	80001d0 <HAL_GetTick>
 800062c:	1b80      	subs	r0, r0, r6
 800062e:	2802      	cmp	r0, #2
 8000630:	d9e9      	bls.n	8000606 <HAL_RCC_OscConfig+0x156>
 8000632:	e77f      	b.n	8000534 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000634:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000636:	f7ff fdcb 	bl	80001d0 <HAL_GetTick>
 800063a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800063c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800063e:	079f      	lsls	r7, r3, #30
 8000640:	f57f af43 	bpl.w	80004ca <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000644:	f7ff fdc4 	bl	80001d0 <HAL_GetTick>
 8000648:	1b80      	subs	r0, r0, r6
 800064a:	2802      	cmp	r0, #2
 800064c:	d9f6      	bls.n	800063c <HAL_RCC_OscConfig+0x18c>
 800064e:	e771      	b.n	8000534 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000650:	4c33      	ldr	r4, [pc, #204]	; (8000720 <HAL_RCC_OscConfig+0x270>)
 8000652:	69e3      	ldr	r3, [r4, #28]
 8000654:	00d8      	lsls	r0, r3, #3
 8000656:	d424      	bmi.n	80006a2 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000658:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800065a:	69e3      	ldr	r3, [r4, #28]
 800065c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000660:	61e3      	str	r3, [r4, #28]
 8000662:	69e3      	ldr	r3, [r4, #28]
 8000664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000668:	9300      	str	r3, [sp, #0]
 800066a:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800066c:	4e30      	ldr	r6, [pc, #192]	; (8000730 <HAL_RCC_OscConfig+0x280>)
 800066e:	6833      	ldr	r3, [r6, #0]
 8000670:	05d9      	lsls	r1, r3, #23
 8000672:	d518      	bpl.n	80006a6 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000674:	68eb      	ldr	r3, [r5, #12]
 8000676:	2b01      	cmp	r3, #1
 8000678:	d126      	bne.n	80006c8 <HAL_RCC_OscConfig+0x218>
 800067a:	6a23      	ldr	r3, [r4, #32]
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000682:	f7ff fda5 	bl	80001d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000686:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800068a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800068c:	6a23      	ldr	r3, [r4, #32]
 800068e:	079b      	lsls	r3, r3, #30
 8000690:	d53f      	bpl.n	8000712 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000692:	2f00      	cmp	r7, #0
 8000694:	f43f af1d 	beq.w	80004d2 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000698:	69e3      	ldr	r3, [r4, #28]
 800069a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800069e:	61e3      	str	r3, [r4, #28]
 80006a0:	e717      	b.n	80004d2 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 80006a2:	2700      	movs	r7, #0
 80006a4:	e7e2      	b.n	800066c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80006a6:	6833      	ldr	r3, [r6, #0]
 80006a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006ac:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80006ae:	f7ff fd8f 	bl	80001d0 <HAL_GetTick>
 80006b2:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80006b4:	6833      	ldr	r3, [r6, #0]
 80006b6:	05da      	lsls	r2, r3, #23
 80006b8:	d4dc      	bmi.n	8000674 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80006ba:	f7ff fd89 	bl	80001d0 <HAL_GetTick>
 80006be:	eba0 0008 	sub.w	r0, r0, r8
 80006c2:	2864      	cmp	r0, #100	; 0x64
 80006c4:	d9f6      	bls.n	80006b4 <HAL_RCC_OscConfig+0x204>
 80006c6:	e735      	b.n	8000534 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006c8:	b9ab      	cbnz	r3, 80006f6 <HAL_RCC_OscConfig+0x246>
 80006ca:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006cc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006d0:	f023 0301 	bic.w	r3, r3, #1
 80006d4:	6223      	str	r3, [r4, #32]
 80006d6:	6a23      	ldr	r3, [r4, #32]
 80006d8:	f023 0304 	bic.w	r3, r3, #4
 80006dc:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80006de:	f7ff fd77 	bl	80001d0 <HAL_GetTick>
 80006e2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80006e4:	6a23      	ldr	r3, [r4, #32]
 80006e6:	0798      	lsls	r0, r3, #30
 80006e8:	d5d3      	bpl.n	8000692 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006ea:	f7ff fd71 	bl	80001d0 <HAL_GetTick>
 80006ee:	1b80      	subs	r0, r0, r6
 80006f0:	4540      	cmp	r0, r8
 80006f2:	d9f7      	bls.n	80006e4 <HAL_RCC_OscConfig+0x234>
 80006f4:	e71e      	b.n	8000534 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006f6:	2b05      	cmp	r3, #5
 80006f8:	6a23      	ldr	r3, [r4, #32]
 80006fa:	d103      	bne.n	8000704 <HAL_RCC_OscConfig+0x254>
 80006fc:	f043 0304 	orr.w	r3, r3, #4
 8000700:	6223      	str	r3, [r4, #32]
 8000702:	e7ba      	b.n	800067a <HAL_RCC_OscConfig+0x1ca>
 8000704:	f023 0301 	bic.w	r3, r3, #1
 8000708:	6223      	str	r3, [r4, #32]
 800070a:	6a23      	ldr	r3, [r4, #32]
 800070c:	f023 0304 	bic.w	r3, r3, #4
 8000710:	e7b6      	b.n	8000680 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000712:	f7ff fd5d 	bl	80001d0 <HAL_GetTick>
 8000716:	eba0 0008 	sub.w	r0, r0, r8
 800071a:	42b0      	cmp	r0, r6
 800071c:	d9b6      	bls.n	800068c <HAL_RCC_OscConfig+0x1dc>
 800071e:	e709      	b.n	8000534 <HAL_RCC_OscConfig+0x84>
 8000720:	40021000 	.word	0x40021000
 8000724:	42420000 	.word	0x42420000
 8000728:	42420480 	.word	0x42420480
 800072c:	20000008 	.word	0x20000008
 8000730:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000734:	4c22      	ldr	r4, [pc, #136]	; (80007c0 <HAL_RCC_OscConfig+0x310>)
 8000736:	6863      	ldr	r3, [r4, #4]
 8000738:	f003 030c 	and.w	r3, r3, #12
 800073c:	2b08      	cmp	r3, #8
 800073e:	f43f aee2 	beq.w	8000506 <HAL_RCC_OscConfig+0x56>
 8000742:	2300      	movs	r3, #0
 8000744:	4e1f      	ldr	r6, [pc, #124]	; (80007c4 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000746:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000748:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800074a:	d12b      	bne.n	80007a4 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 800074c:	f7ff fd40 	bl	80001d0 <HAL_GetTick>
 8000750:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000752:	6823      	ldr	r3, [r4, #0]
 8000754:	0199      	lsls	r1, r3, #6
 8000756:	d41f      	bmi.n	8000798 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000758:	6a2b      	ldr	r3, [r5, #32]
 800075a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800075e:	d105      	bne.n	800076c <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000760:	6862      	ldr	r2, [r4, #4]
 8000762:	68a9      	ldr	r1, [r5, #8]
 8000764:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000768:	430a      	orrs	r2, r1
 800076a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800076c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800076e:	6862      	ldr	r2, [r4, #4]
 8000770:	430b      	orrs	r3, r1
 8000772:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000776:	4313      	orrs	r3, r2
 8000778:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800077a:	2301      	movs	r3, #1
 800077c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800077e:	f7ff fd27 	bl	80001d0 <HAL_GetTick>
 8000782:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000784:	6823      	ldr	r3, [r4, #0]
 8000786:	019a      	lsls	r2, r3, #6
 8000788:	f53f aea7 	bmi.w	80004da <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800078c:	f7ff fd20 	bl	80001d0 <HAL_GetTick>
 8000790:	1b40      	subs	r0, r0, r5
 8000792:	2802      	cmp	r0, #2
 8000794:	d9f6      	bls.n	8000784 <HAL_RCC_OscConfig+0x2d4>
 8000796:	e6cd      	b.n	8000534 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000798:	f7ff fd1a 	bl	80001d0 <HAL_GetTick>
 800079c:	1bc0      	subs	r0, r0, r7
 800079e:	2802      	cmp	r0, #2
 80007a0:	d9d7      	bls.n	8000752 <HAL_RCC_OscConfig+0x2a2>
 80007a2:	e6c7      	b.n	8000534 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80007a4:	f7ff fd14 	bl	80001d0 <HAL_GetTick>
 80007a8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80007aa:	6823      	ldr	r3, [r4, #0]
 80007ac:	019b      	lsls	r3, r3, #6
 80007ae:	f57f ae94 	bpl.w	80004da <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80007b2:	f7ff fd0d 	bl	80001d0 <HAL_GetTick>
 80007b6:	1b40      	subs	r0, r0, r5
 80007b8:	2802      	cmp	r0, #2
 80007ba:	d9f6      	bls.n	80007aa <HAL_RCC_OscConfig+0x2fa>
 80007bc:	e6ba      	b.n	8000534 <HAL_RCC_OscConfig+0x84>
 80007be:	bf00      	nop
 80007c0:	40021000 	.word	0x40021000
 80007c4:	42420060 	.word	0x42420060

080007c8 <HAL_RCC_GetSysClockFreq>:
{
 80007c8:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80007ca:	4b19      	ldr	r3, [pc, #100]	; (8000830 <HAL_RCC_GetSysClockFreq+0x68>)
{
 80007cc:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80007ce:	ac02      	add	r4, sp, #8
 80007d0:	f103 0510 	add.w	r5, r3, #16
 80007d4:	4622      	mov	r2, r4
 80007d6:	6818      	ldr	r0, [r3, #0]
 80007d8:	6859      	ldr	r1, [r3, #4]
 80007da:	3308      	adds	r3, #8
 80007dc:	c203      	stmia	r2!, {r0, r1}
 80007de:	42ab      	cmp	r3, r5
 80007e0:	4614      	mov	r4, r2
 80007e2:	d1f7      	bne.n	80007d4 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80007e4:	2301      	movs	r3, #1
 80007e6:	f88d 3004 	strb.w	r3, [sp, #4]
 80007ea:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80007ec:	4911      	ldr	r1, [pc, #68]	; (8000834 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80007ee:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80007f2:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80007f4:	f003 020c 	and.w	r2, r3, #12
 80007f8:	2a08      	cmp	r2, #8
 80007fa:	d117      	bne.n	800082c <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80007fc:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000800:	a806      	add	r0, sp, #24
 8000802:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000804:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000806:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800080a:	d50c      	bpl.n	8000826 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800080c:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800080e:	480a      	ldr	r0, [pc, #40]	; (8000838 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000810:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000814:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000816:	aa06      	add	r2, sp, #24
 8000818:	4413      	add	r3, r2
 800081a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800081e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000822:	b007      	add	sp, #28
 8000824:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000826:	4805      	ldr	r0, [pc, #20]	; (800083c <HAL_RCC_GetSysClockFreq+0x74>)
 8000828:	4350      	muls	r0, r2
 800082a:	e7fa      	b.n	8000822 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 800082c:	4802      	ldr	r0, [pc, #8]	; (8000838 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 800082e:	e7f8      	b.n	8000822 <HAL_RCC_GetSysClockFreq+0x5a>
 8000830:	08000c54 	.word	0x08000c54
 8000834:	40021000 	.word	0x40021000
 8000838:	007a1200 	.word	0x007a1200
 800083c:	003d0900 	.word	0x003d0900

08000840 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000840:	4a4d      	ldr	r2, [pc, #308]	; (8000978 <HAL_RCC_ClockConfig+0x138>)
{
 8000842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000846:	6813      	ldr	r3, [r2, #0]
{
 8000848:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800084a:	f003 0307 	and.w	r3, r3, #7
 800084e:	428b      	cmp	r3, r1
{
 8000850:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000852:	d328      	bcc.n	80008a6 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000854:	682a      	ldr	r2, [r5, #0]
 8000856:	0791      	lsls	r1, r2, #30
 8000858:	d432      	bmi.n	80008c0 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800085a:	07d2      	lsls	r2, r2, #31
 800085c:	d438      	bmi.n	80008d0 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800085e:	4a46      	ldr	r2, [pc, #280]	; (8000978 <HAL_RCC_ClockConfig+0x138>)
 8000860:	6813      	ldr	r3, [r2, #0]
 8000862:	f003 0307 	and.w	r3, r3, #7
 8000866:	429e      	cmp	r6, r3
 8000868:	d373      	bcc.n	8000952 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800086a:	682a      	ldr	r2, [r5, #0]
 800086c:	4c43      	ldr	r4, [pc, #268]	; (800097c <HAL_RCC_ClockConfig+0x13c>)
 800086e:	f012 0f04 	tst.w	r2, #4
 8000872:	d179      	bne.n	8000968 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000874:	0713      	lsls	r3, r2, #28
 8000876:	d506      	bpl.n	8000886 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000878:	6863      	ldr	r3, [r4, #4]
 800087a:	692a      	ldr	r2, [r5, #16]
 800087c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000880:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000884:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000886:	f7ff ff9f 	bl	80007c8 <HAL_RCC_GetSysClockFreq>
 800088a:	6863      	ldr	r3, [r4, #4]
 800088c:	4a3c      	ldr	r2, [pc, #240]	; (8000980 <HAL_RCC_ClockConfig+0x140>)
 800088e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000892:	5cd3      	ldrb	r3, [r2, r3]
 8000894:	40d8      	lsrs	r0, r3
 8000896:	4b3b      	ldr	r3, [pc, #236]	; (8000984 <HAL_RCC_ClockConfig+0x144>)
 8000898:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800089a:	2000      	movs	r0, #0
 800089c:	f7ff fc56 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 80008a0:	2000      	movs	r0, #0
}
 80008a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80008a6:	6813      	ldr	r3, [r2, #0]
 80008a8:	f023 0307 	bic.w	r3, r3, #7
 80008ac:	430b      	orrs	r3, r1
 80008ae:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80008b0:	6813      	ldr	r3, [r2, #0]
 80008b2:	f003 0307 	and.w	r3, r3, #7
 80008b6:	4299      	cmp	r1, r3
 80008b8:	d0cc      	beq.n	8000854 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80008ba:	2001      	movs	r0, #1
 80008bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80008c0:	492e      	ldr	r1, [pc, #184]	; (800097c <HAL_RCC_ClockConfig+0x13c>)
 80008c2:	68a8      	ldr	r0, [r5, #8]
 80008c4:	684b      	ldr	r3, [r1, #4]
 80008c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80008ca:	4303      	orrs	r3, r0
 80008cc:	604b      	str	r3, [r1, #4]
 80008ce:	e7c4      	b.n	800085a <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008d0:	686a      	ldr	r2, [r5, #4]
 80008d2:	4c2a      	ldr	r4, [pc, #168]	; (800097c <HAL_RCC_ClockConfig+0x13c>)
 80008d4:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008d6:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008d8:	d11c      	bne.n	8000914 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008da:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008de:	d0ec      	beq.n	80008ba <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008e0:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008e2:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008e6:	f023 0303 	bic.w	r3, r3, #3
 80008ea:	4313      	orrs	r3, r2
 80008ec:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80008ee:	f7ff fc6f 	bl	80001d0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008f2:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80008f4:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d114      	bne.n	8000924 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80008fa:	6863      	ldr	r3, [r4, #4]
 80008fc:	f003 030c 	and.w	r3, r3, #12
 8000900:	2b04      	cmp	r3, #4
 8000902:	d0ac      	beq.n	800085e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000904:	f7ff fc64 	bl	80001d0 <HAL_GetTick>
 8000908:	1bc0      	subs	r0, r0, r7
 800090a:	4540      	cmp	r0, r8
 800090c:	d9f5      	bls.n	80008fa <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 800090e:	2003      	movs	r0, #3
 8000910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000914:	2a02      	cmp	r2, #2
 8000916:	d102      	bne.n	800091e <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000918:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800091c:	e7df      	b.n	80008de <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800091e:	f013 0f02 	tst.w	r3, #2
 8000922:	e7dc      	b.n	80008de <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000924:	2b02      	cmp	r3, #2
 8000926:	d10f      	bne.n	8000948 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000928:	6863      	ldr	r3, [r4, #4]
 800092a:	f003 030c 	and.w	r3, r3, #12
 800092e:	2b08      	cmp	r3, #8
 8000930:	d095      	beq.n	800085e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000932:	f7ff fc4d 	bl	80001d0 <HAL_GetTick>
 8000936:	1bc0      	subs	r0, r0, r7
 8000938:	4540      	cmp	r0, r8
 800093a:	d9f5      	bls.n	8000928 <HAL_RCC_ClockConfig+0xe8>
 800093c:	e7e7      	b.n	800090e <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800093e:	f7ff fc47 	bl	80001d0 <HAL_GetTick>
 8000942:	1bc0      	subs	r0, r0, r7
 8000944:	4540      	cmp	r0, r8
 8000946:	d8e2      	bhi.n	800090e <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000948:	6863      	ldr	r3, [r4, #4]
 800094a:	f013 0f0c 	tst.w	r3, #12
 800094e:	d1f6      	bne.n	800093e <HAL_RCC_ClockConfig+0xfe>
 8000950:	e785      	b.n	800085e <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000952:	6813      	ldr	r3, [r2, #0]
 8000954:	f023 0307 	bic.w	r3, r3, #7
 8000958:	4333      	orrs	r3, r6
 800095a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800095c:	6813      	ldr	r3, [r2, #0]
 800095e:	f003 0307 	and.w	r3, r3, #7
 8000962:	429e      	cmp	r6, r3
 8000964:	d1a9      	bne.n	80008ba <HAL_RCC_ClockConfig+0x7a>
 8000966:	e780      	b.n	800086a <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000968:	6863      	ldr	r3, [r4, #4]
 800096a:	68e9      	ldr	r1, [r5, #12]
 800096c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000970:	430b      	orrs	r3, r1
 8000972:	6063      	str	r3, [r4, #4]
 8000974:	e77e      	b.n	8000874 <HAL_RCC_ClockConfig+0x34>
 8000976:	bf00      	nop
 8000978:	40022000 	.word	0x40022000
 800097c:	40021000 	.word	0x40021000
 8000980:	08000c64 	.word	0x08000c64
 8000984:	20000008 	.word	0x20000008

08000988 <HAL_RCC_GetHCLKFreq>:
}
 8000988:	4b01      	ldr	r3, [pc, #4]	; (8000990 <HAL_RCC_GetHCLKFreq+0x8>)
 800098a:	6818      	ldr	r0, [r3, #0]
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	20000008 	.word	0x20000008

08000994 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000994:	f44f 3380 	mov.w	r3, #65536	; 0x10000
{
 8000998:	b530      	push	{r4, r5, lr}
 800099a:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800099c:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800099e:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80009a0:	2200      	movs	r2, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a2:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009a4:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80009a6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009aa:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009ac:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80009ae:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009b0:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b2:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80009b4:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b6:	f7ff fd7b 	bl	80004b0 <HAL_RCC_OscConfig>
 80009ba:	b100      	cbz	r0, 80009be <SystemClock_Config+0x2a>
 80009bc:	e7fe      	b.n	80009bc <SystemClock_Config+0x28>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009be:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c0:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009c2:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009c4:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009c6:	4621      	mov	r1, r4
 80009c8:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ca:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009cc:	9502      	str	r5, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009ce:	f7ff ff37 	bl	8000840 <HAL_RCC_ClockConfig>
 80009d2:	4604      	mov	r4, r0
 80009d4:	b100      	cbz	r0, 80009d8 <SystemClock_Config+0x44>
 80009d6:	e7fe      	b.n	80009d6 <SystemClock_Config+0x42>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80009d8:	f7ff ffd6 	bl	8000988 <HAL_RCC_GetHCLKFreq>
 80009dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009e0:	fbb0 f0f3 	udiv	r0, r0, r3
 80009e4:	f7ff fc52 	bl	800028c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80009e8:	2004      	movs	r0, #4
 80009ea:	f7ff fc65 	bl	80002b8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80009ee:	4622      	mov	r2, r4
 80009f0:	4621      	mov	r1, r4
 80009f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009f6:	f7ff fc15 	bl	8000224 <HAL_NVIC_SetPriority>
}
 80009fa:	b011      	add	sp, #68	; 0x44
 80009fc:	bd30      	pop	{r4, r5, pc}
	...

08000a00 <main>:
{
 8000a00:	b500      	push	{lr}
 8000a02:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8000a04:	f7ff fbc6 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 8000a08:	f7ff ffc4 	bl	8000994 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0c:	4b20      	ldr	r3, [pc, #128]	; (8000a90 <main+0x90>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a12:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a14:	481f      	ldr	r0, [pc, #124]	; (8000a94 <main+0x94>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a16:	f042 0210 	orr.w	r2, r2, #16
 8000a1a:	619a      	str	r2, [r3, #24]
 8000a1c:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	2402      	movs	r4, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a20:	f002 0210 	and.w	r2, r2, #16
 8000a24:	9201      	str	r2, [sp, #4]
 8000a26:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a28:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2500      	movs	r5, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a2c:	f042 0220 	orr.w	r2, r2, #32
 8000a30:	619a      	str	r2, [r3, #24]
 8000a32:	699a      	ldr	r2, [r3, #24]
 8000a34:	f002 0220 	and.w	r2, r2, #32
 8000a38:	9202      	str	r2, [sp, #8]
 8000a3a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3c:	699a      	ldr	r2, [r3, #24]
 8000a3e:	f042 0204 	orr.w	r2, r2, #4
 8000a42:	619a      	str	r2, [r3, #24]
 8000a44:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a46:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a48:	f003 0304 	and.w	r3, r3, #4
 8000a4c:	9303      	str	r3, [sp, #12]
 8000a4e:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a50:	f7ff fd24 	bl	800049c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a58:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5a:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a5c:	a904      	add	r1, sp, #16
 8000a5e:	480d      	ldr	r0, [pc, #52]	; (8000a94 <main+0x94>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a60:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a62:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a66:	f7ff fc39 	bl	80002dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a6a:	2340      	movs	r3, #64	; 0x40
 8000a6c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000a6e:	2311      	movs	r3, #17
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a70:	a904      	add	r1, sp, #16
 8000a72:	4809      	ldr	r0, [pc, #36]	; (8000a98 <main+0x98>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a74:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000a76:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7a:	f7ff fc2f 	bl	80002dc <HAL_GPIO_Init>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000a7e:	4c06      	ldr	r4, [pc, #24]	; (8000a98 <main+0x98>)
 8000a80:	4620      	mov	r0, r4
 8000a82:	2140      	movs	r1, #64	; 0x40
 8000a84:	f7ff fd0f 	bl	80004a6 <HAL_GPIO_TogglePin>
	  HAL_Delay(1);
 8000a88:	2001      	movs	r0, #1
 8000a8a:	f7ff fba7 	bl	80001dc <HAL_Delay>
 8000a8e:	e7f7      	b.n	8000a80 <main+0x80>
 8000a90:	40021000 	.word	0x40021000
 8000a94:	40011000 	.word	0x40011000
 8000a98:	40010800 	.word	0x40010800

08000a9c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a9c:	4b25      	ldr	r3, [pc, #148]	; (8000b34 <HAL_MspInit+0x98>)
{
 8000a9e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000aa0:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa2:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000aa4:	f042 0201 	orr.w	r2, r2, #1
 8000aa8:	619a      	str	r2, [r3, #24]
 8000aaa:	699a      	ldr	r2, [r3, #24]
 8000aac:	f002 0201 	and.w	r2, r2, #1
 8000ab0:	9200      	str	r2, [sp, #0]
 8000ab2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab4:	69da      	ldr	r2, [r3, #28]
 8000ab6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000aba:	61da      	str	r2, [r3, #28]
 8000abc:	69db      	ldr	r3, [r3, #28]
 8000abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac2:	9301      	str	r3, [sp, #4]
 8000ac4:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac6:	f7ff fb9b 	bl	8000200 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000aca:	2200      	movs	r2, #0
 8000acc:	f06f 000b 	mvn.w	r0, #11
 8000ad0:	4611      	mov	r1, r2
 8000ad2:	f7ff fba7 	bl	8000224 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f06f 000a 	mvn.w	r0, #10
 8000adc:	4611      	mov	r1, r2
 8000ade:	f7ff fba1 	bl	8000224 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f06f 0009 	mvn.w	r0, #9
 8000ae8:	4611      	mov	r1, r2
 8000aea:	f7ff fb9b 	bl	8000224 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000aee:	2200      	movs	r2, #0
 8000af0:	f06f 0004 	mvn.w	r0, #4
 8000af4:	4611      	mov	r1, r2
 8000af6:	f7ff fb95 	bl	8000224 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000afa:	2200      	movs	r2, #0
 8000afc:	f06f 0003 	mvn.w	r0, #3
 8000b00:	4611      	mov	r1, r2
 8000b02:	f7ff fb8f 	bl	8000224 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	f06f 0001 	mvn.w	r0, #1
 8000b0c:	4611      	mov	r1, r2
 8000b0e:	f7ff fb89 	bl	8000224 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000b12:	2200      	movs	r2, #0
 8000b14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b18:	4611      	mov	r1, r2
 8000b1a:	f7ff fb83 	bl	8000224 <HAL_NVIC_SetPriority>

    /**DISABLE: JTAG-DP Disabled and SW-DP Disabled 
    */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000b1e:	4a06      	ldr	r2, [pc, #24]	; (8000b38 <HAL_MspInit+0x9c>)
 8000b20:	6853      	ldr	r3, [r2, #4]
 8000b22:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b26:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b2a:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b2c:	b003      	add	sp, #12
 8000b2e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b32:	bf00      	nop
 8000b34:	40021000 	.word	0x40021000
 8000b38:	40010000 	.word	0x40010000

08000b3c <NMI_Handler>:
 8000b3c:	4770      	bx	lr

08000b3e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8000b3e:	e7fe      	b.n	8000b3e <HardFault_Handler>

08000b40 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8000b40:	e7fe      	b.n	8000b40 <MemManage_Handler>

08000b42 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8000b42:	e7fe      	b.n	8000b42 <BusFault_Handler>

08000b44 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8000b44:	e7fe      	b.n	8000b44 <UsageFault_Handler>

08000b46 <SVC_Handler>:
 8000b46:	4770      	bx	lr

08000b48 <DebugMon_Handler>:
 8000b48:	4770      	bx	lr

08000b4a <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8000b4a:	4770      	bx	lr

08000b4c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000b4c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b4e:	f7ff fb33 	bl	80001b8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8000b56:	f7ff bbbc 	b.w	80002d2 <HAL_SYSTICK_IRQHandler>
	...

08000b5c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <SystemInit+0x40>)
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	f042 0201 	orr.w	r2, r2, #1
 8000b64:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000b66:	6859      	ldr	r1, [r3, #4]
 8000b68:	4a0d      	ldr	r2, [pc, #52]	; (8000ba0 <SystemInit+0x44>)
 8000b6a:	400a      	ands	r2, r1
 8000b6c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000b74:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000b78:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000b80:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000b82:	685a      	ldr	r2, [r3, #4]
 8000b84:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000b88:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000b8a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000b8e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000b90:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b94:	4b03      	ldr	r3, [pc, #12]	; (8000ba4 <SystemInit+0x48>)
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	f8ff0000 	.word	0xf8ff0000
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000ba8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000baa:	e003      	b.n	8000bb4 <LoopCopyDataInit>

08000bac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000bac:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000bae:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000bb0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000bb2:	3104      	adds	r1, #4

08000bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000bb4:	480a      	ldr	r0, [pc, #40]	; (8000be0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000bb8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000bba:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000bbc:	d3f6      	bcc.n	8000bac <CopyDataInit>
  ldr r2, =_sbss
 8000bbe:	4a0a      	ldr	r2, [pc, #40]	; (8000be8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000bc0:	e002      	b.n	8000bc8 <LoopFillZerobss>

08000bc2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000bc2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000bc4:	f842 3b04 	str.w	r3, [r2], #4

08000bc8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000bc8:	4b08      	ldr	r3, [pc, #32]	; (8000bec <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000bca:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000bcc:	d3f9      	bcc.n	8000bc2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bce:	f7ff ffc5 	bl	8000b5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bd2:	f000 f80f 	bl	8000bf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bd6:	f7ff ff13 	bl	8000a00 <main>
  bx lr
 8000bda:	4770      	bx	lr
  ldr r3, =_sidata
 8000bdc:	08000c7c 	.word	0x08000c7c
  ldr r0, =_sdata
 8000be0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000be4:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000be8:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000bec:	2000002c 	.word	0x2000002c

08000bf0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bf0:	e7fe      	b.n	8000bf0 <ADC1_2_IRQHandler>
	...

08000bf4 <__libc_init_array>:
 8000bf4:	b570      	push	{r4, r5, r6, lr}
 8000bf6:	2500      	movs	r5, #0
 8000bf8:	4e0c      	ldr	r6, [pc, #48]	; (8000c2c <__libc_init_array+0x38>)
 8000bfa:	4c0d      	ldr	r4, [pc, #52]	; (8000c30 <__libc_init_array+0x3c>)
 8000bfc:	1ba4      	subs	r4, r4, r6
 8000bfe:	10a4      	asrs	r4, r4, #2
 8000c00:	42a5      	cmp	r5, r4
 8000c02:	d109      	bne.n	8000c18 <__libc_init_array+0x24>
 8000c04:	f000 f81a 	bl	8000c3c <_init>
 8000c08:	2500      	movs	r5, #0
 8000c0a:	4e0a      	ldr	r6, [pc, #40]	; (8000c34 <__libc_init_array+0x40>)
 8000c0c:	4c0a      	ldr	r4, [pc, #40]	; (8000c38 <__libc_init_array+0x44>)
 8000c0e:	1ba4      	subs	r4, r4, r6
 8000c10:	10a4      	asrs	r4, r4, #2
 8000c12:	42a5      	cmp	r5, r4
 8000c14:	d105      	bne.n	8000c22 <__libc_init_array+0x2e>
 8000c16:	bd70      	pop	{r4, r5, r6, pc}
 8000c18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c1c:	4798      	blx	r3
 8000c1e:	3501      	adds	r5, #1
 8000c20:	e7ee      	b.n	8000c00 <__libc_init_array+0xc>
 8000c22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c26:	4798      	blx	r3
 8000c28:	3501      	adds	r5, #1
 8000c2a:	e7f2      	b.n	8000c12 <__libc_init_array+0x1e>
 8000c2c:	08000c74 	.word	0x08000c74
 8000c30:	08000c74 	.word	0x08000c74
 8000c34:	08000c74 	.word	0x08000c74
 8000c38:	08000c78 	.word	0x08000c78

08000c3c <_init>:
 8000c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c3e:	bf00      	nop
 8000c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c42:	bc08      	pop	{r3}
 8000c44:	469e      	mov	lr, r3
 8000c46:	4770      	bx	lr

08000c48 <_fini>:
 8000c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c4a:	bf00      	nop
 8000c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c4e:	bc08      	pop	{r3}
 8000c50:	469e      	mov	lr, r3
 8000c52:	4770      	bx	lr
