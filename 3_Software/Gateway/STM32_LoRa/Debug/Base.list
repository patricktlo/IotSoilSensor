
Base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000018f8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08001a04  08001a04  00011a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001a60  08001a60  00011a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001a64  08001a64  00011a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08001a68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000b8  2000000c  08001a74  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200000c4  08001a74  000200c4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000f9fa  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000022a1  00000000  00000000  0002fa2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000456b  00000000  00000000  00031cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000758  00000000  00000000  00036240  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000910  00000000  00000000  00036998  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003f66  00000000  00000000  000372a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000027f3  00000000  00000000  0003b20e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003da01  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001490  00000000  00000000  0003da80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080019ec 	.word	0x080019ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080019ec 	.word	0x080019ec

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f892 	bl	800028c <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000178:	f000 f854 	bl	8000224 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000008 	.word	0x20000008
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 f82d 	bl	8000200 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f001 fada 	bl	8001764 <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000028 	.word	0x20000028
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000028 	.word	0x20000028

080001dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001dc:	b538      	push	{r3, r4, r5, lr}
 80001de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001e0:	f7ff fff6 	bl	80001d0 <HAL_GetTick>
 80001e4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001e6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001e8:	bf1e      	ittt	ne
 80001ea:	4b04      	ldrne	r3, [pc, #16]	; (80001fc <HAL_Delay+0x20>)
 80001ec:	781b      	ldrbne	r3, [r3, #0]
 80001ee:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001f0:	f7ff ffee 	bl	80001d0 <HAL_GetTick>
 80001f4:	1b40      	subs	r0, r0, r5
 80001f6:	4284      	cmp	r4, r0
 80001f8:	d8fa      	bhi.n	80001f0 <HAL_Delay+0x14>
  {
  }
}
 80001fa:	bd38      	pop	{r3, r4, r5, pc}
 80001fc:	20000000 	.word	0x20000000

08000200 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000200:	4a07      	ldr	r2, [pc, #28]	; (8000220 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000202:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000204:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000206:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800020a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800020e:	041b      	lsls	r3, r3, #16
 8000210:	0c1b      	lsrs	r3, r3, #16
 8000212:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000216:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800021a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800021c:	60d3      	str	r3, [r2, #12]
 800021e:	4770      	bx	lr
 8000220:	e000ed00 	.word	0xe000ed00

08000224 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000224:	4b17      	ldr	r3, [pc, #92]	; (8000284 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000226:	b530      	push	{r4, r5, lr}
 8000228:	68dc      	ldr	r4, [r3, #12]
 800022a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800022e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000232:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000234:	2b04      	cmp	r3, #4
 8000236:	bf28      	it	cs
 8000238:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800023a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800023c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000240:	bf98      	it	ls
 8000242:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000244:	fa05 f303 	lsl.w	r3, r5, r3
 8000248:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800024c:	bf88      	it	hi
 800024e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000250:	4019      	ands	r1, r3
 8000252:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000254:	fa05 f404 	lsl.w	r4, r5, r4
 8000258:	3c01      	subs	r4, #1
 800025a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800025c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800025e:	ea42 0201 	orr.w	r2, r2, r1
 8000262:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000266:	bfaf      	iteee	ge
 8000268:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026c:	4b06      	ldrlt	r3, [pc, #24]	; (8000288 <HAL_NVIC_SetPriority+0x64>)
 800026e:	f000 000f 	andlt.w	r0, r0, #15
 8000272:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000274:	bfa5      	ittet	ge
 8000276:	b2d2      	uxtbge	r2, r2
 8000278:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027c:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027e:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000282:	bd30      	pop	{r4, r5, pc}
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000ed14 	.word	0xe000ed14

0800028c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800028c:	3801      	subs	r0, #1
 800028e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000292:	d20a      	bcs.n	80002aa <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000294:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000296:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000298:	4a06      	ldr	r2, [pc, #24]	; (80002b4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800029a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800029c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002a0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002a2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002a4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002a6:	601a      	str	r2, [r3, #0]
 80002a8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002aa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	e000e010 	.word	0xe000e010
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80002ba:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80002bc:	681a      	ldr	r2, [r3, #0]
 80002be:	bf0c      	ite	eq
 80002c0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80002c4:	f022 0204 	bicne.w	r2, r2, #4
 80002c8:	601a      	str	r2, [r3, #0]
 80002ca:	4770      	bx	lr
 80002cc:	e000e010 	.word	0xe000e010

080002d0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80002d0:	4770      	bx	lr

080002d2 <HAL_SYSTICK_IRQHandler>:
{
 80002d2:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80002d4:	f7ff fffc 	bl	80002d0 <HAL_SYSTICK_Callback>
 80002d8:	bd08      	pop	{r3, pc}
	...

080002dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80002e0:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80002e2:	4616      	mov	r6, r2
 80002e4:	4b65      	ldr	r3, [pc, #404]	; (800047c <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002e6:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 800048c <HAL_GPIO_Init+0x1b0>
 80002ea:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000490 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80002ee:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002f2:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80002f4:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002f8:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d17f      	bne.n	8000400 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8000300:	684d      	ldr	r5, [r1, #4]
 8000302:	2d12      	cmp	r5, #18
 8000304:	f000 80af 	beq.w	8000466 <HAL_GPIO_Init+0x18a>
 8000308:	f200 8088 	bhi.w	800041c <HAL_GPIO_Init+0x140>
 800030c:	2d02      	cmp	r5, #2
 800030e:	f000 80a7 	beq.w	8000460 <HAL_GPIO_Init+0x184>
 8000312:	d87c      	bhi.n	800040e <HAL_GPIO_Init+0x132>
 8000314:	2d00      	cmp	r5, #0
 8000316:	f000 808e 	beq.w	8000436 <HAL_GPIO_Init+0x15a>
 800031a:	2d01      	cmp	r5, #1
 800031c:	f000 809e 	beq.w	800045c <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000320:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000324:	2cff      	cmp	r4, #255	; 0xff
 8000326:	bf93      	iteet	ls
 8000328:	4682      	movls	sl, r0
 800032a:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800032e:	3d08      	subhi	r5, #8
 8000330:	f8d0 b000 	ldrls.w	fp, [r0]
 8000334:	bf92      	itee	ls
 8000336:	00b5      	lslls	r5, r6, #2
 8000338:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 800033c:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800033e:	fa09 f805 	lsl.w	r8, r9, r5
 8000342:	ea2b 0808 	bic.w	r8, fp, r8
 8000346:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800034a:	bf88      	it	hi
 800034c:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000350:	ea48 0505 	orr.w	r5, r8, r5
 8000354:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000358:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800035c:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000360:	d04e      	beq.n	8000400 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000362:	4d47      	ldr	r5, [pc, #284]	; (8000480 <HAL_GPIO_Init+0x1a4>)
 8000364:	4f46      	ldr	r7, [pc, #280]	; (8000480 <HAL_GPIO_Init+0x1a4>)
 8000366:	69ad      	ldr	r5, [r5, #24]
 8000368:	f026 0803 	bic.w	r8, r6, #3
 800036c:	f045 0501 	orr.w	r5, r5, #1
 8000370:	61bd      	str	r5, [r7, #24]
 8000372:	69bd      	ldr	r5, [r7, #24]
 8000374:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000378:	f005 0501 	and.w	r5, r5, #1
 800037c:	9501      	str	r5, [sp, #4]
 800037e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000382:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000386:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000388:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 800038c:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000390:	fa09 f90b 	lsl.w	r9, r9, fp
 8000394:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000398:	4d3a      	ldr	r5, [pc, #232]	; (8000484 <HAL_GPIO_Init+0x1a8>)
 800039a:	42a8      	cmp	r0, r5
 800039c:	d068      	beq.n	8000470 <HAL_GPIO_Init+0x194>
 800039e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003a2:	42a8      	cmp	r0, r5
 80003a4:	d066      	beq.n	8000474 <HAL_GPIO_Init+0x198>
 80003a6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003aa:	42a8      	cmp	r0, r5
 80003ac:	d064      	beq.n	8000478 <HAL_GPIO_Init+0x19c>
 80003ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003b2:	42a8      	cmp	r0, r5
 80003b4:	bf0c      	ite	eq
 80003b6:	2503      	moveq	r5, #3
 80003b8:	2504      	movne	r5, #4
 80003ba:	fa05 f50b 	lsl.w	r5, r5, fp
 80003be:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80003c2:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80003c6:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003c8:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80003cc:	bf14      	ite	ne
 80003ce:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80003d0:	43a5      	biceq	r5, r4
 80003d2:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80003d4:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003d6:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80003da:	bf14      	ite	ne
 80003dc:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80003de:	43a5      	biceq	r5, r4
 80003e0:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80003e2:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003e4:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80003e8:	bf14      	ite	ne
 80003ea:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80003ec:	43a5      	biceq	r5, r4
 80003ee:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80003f0:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003f2:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80003f6:	bf14      	ite	ne
 80003f8:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80003fa:	ea25 0404 	biceq.w	r4, r5, r4
 80003fe:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000400:	3601      	adds	r6, #1
 8000402:	2e10      	cmp	r6, #16
 8000404:	f47f af73 	bne.w	80002ee <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8000408:	b003      	add	sp, #12
 800040a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800040e:	2d03      	cmp	r5, #3
 8000410:	d022      	beq.n	8000458 <HAL_GPIO_Init+0x17c>
 8000412:	2d11      	cmp	r5, #17
 8000414:	d184      	bne.n	8000320 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000416:	68ca      	ldr	r2, [r1, #12]
 8000418:	3204      	adds	r2, #4
          break;
 800041a:	e781      	b.n	8000320 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800041c:	4f1a      	ldr	r7, [pc, #104]	; (8000488 <HAL_GPIO_Init+0x1ac>)
 800041e:	42bd      	cmp	r5, r7
 8000420:	d009      	beq.n	8000436 <HAL_GPIO_Init+0x15a>
 8000422:	d812      	bhi.n	800044a <HAL_GPIO_Init+0x16e>
 8000424:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000494 <HAL_GPIO_Init+0x1b8>
 8000428:	454d      	cmp	r5, r9
 800042a:	d004      	beq.n	8000436 <HAL_GPIO_Init+0x15a>
 800042c:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000430:	454d      	cmp	r5, r9
 8000432:	f47f af75 	bne.w	8000320 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000436:	688a      	ldr	r2, [r1, #8]
 8000438:	b1c2      	cbz	r2, 800046c <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800043a:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 800043c:	bf0c      	ite	eq
 800043e:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000442:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000446:	2208      	movs	r2, #8
 8000448:	e76a      	b.n	8000320 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800044a:	4575      	cmp	r5, lr
 800044c:	d0f3      	beq.n	8000436 <HAL_GPIO_Init+0x15a>
 800044e:	4565      	cmp	r5, ip
 8000450:	d0f1      	beq.n	8000436 <HAL_GPIO_Init+0x15a>
 8000452:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000498 <HAL_GPIO_Init+0x1bc>
 8000456:	e7eb      	b.n	8000430 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000458:	2200      	movs	r2, #0
 800045a:	e761      	b.n	8000320 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800045c:	68ca      	ldr	r2, [r1, #12]
          break;
 800045e:	e75f      	b.n	8000320 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000460:	68ca      	ldr	r2, [r1, #12]
 8000462:	3208      	adds	r2, #8
          break;
 8000464:	e75c      	b.n	8000320 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000466:	68ca      	ldr	r2, [r1, #12]
 8000468:	320c      	adds	r2, #12
          break;
 800046a:	e759      	b.n	8000320 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800046c:	2204      	movs	r2, #4
 800046e:	e757      	b.n	8000320 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000470:	2500      	movs	r5, #0
 8000472:	e7a2      	b.n	80003ba <HAL_GPIO_Init+0xde>
 8000474:	2501      	movs	r5, #1
 8000476:	e7a0      	b.n	80003ba <HAL_GPIO_Init+0xde>
 8000478:	2502      	movs	r5, #2
 800047a:	e79e      	b.n	80003ba <HAL_GPIO_Init+0xde>
 800047c:	40010400 	.word	0x40010400
 8000480:	40021000 	.word	0x40021000
 8000484:	40010800 	.word	0x40010800
 8000488:	10210000 	.word	0x10210000
 800048c:	10310000 	.word	0x10310000
 8000490:	10320000 	.word	0x10320000
 8000494:	10110000 	.word	0x10110000
 8000498:	10220000 	.word	0x10220000

0800049c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800049c:	b10a      	cbz	r2, 80004a2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800049e:	6101      	str	r1, [r0, #16]
 80004a0:	4770      	bx	lr
 80004a2:	0409      	lsls	r1, r1, #16
 80004a4:	e7fb      	b.n	800049e <HAL_GPIO_WritePin+0x2>
	...

080004a8 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004a8:	6803      	ldr	r3, [r0, #0]
{
 80004aa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004ae:	07db      	lsls	r3, r3, #31
{
 80004b0:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004b2:	d410      	bmi.n	80004d6 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80004b4:	682b      	ldr	r3, [r5, #0]
 80004b6:	079f      	lsls	r7, r3, #30
 80004b8:	d45e      	bmi.n	8000578 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80004ba:	682b      	ldr	r3, [r5, #0]
 80004bc:	0719      	lsls	r1, r3, #28
 80004be:	f100 8095 	bmi.w	80005ec <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80004c2:	682b      	ldr	r3, [r5, #0]
 80004c4:	075a      	lsls	r2, r3, #29
 80004c6:	f100 80bf 	bmi.w	8000648 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80004ca:	69ea      	ldr	r2, [r5, #28]
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f040 812d 	bne.w	800072c <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80004d2:	2000      	movs	r0, #0
 80004d4:	e014      	b.n	8000500 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80004d6:	4c90      	ldr	r4, [pc, #576]	; (8000718 <HAL_RCC_OscConfig+0x270>)
 80004d8:	6863      	ldr	r3, [r4, #4]
 80004da:	f003 030c 	and.w	r3, r3, #12
 80004de:	2b04      	cmp	r3, #4
 80004e0:	d007      	beq.n	80004f2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80004e2:	6863      	ldr	r3, [r4, #4]
 80004e4:	f003 030c 	and.w	r3, r3, #12
 80004e8:	2b08      	cmp	r3, #8
 80004ea:	d10c      	bne.n	8000506 <HAL_RCC_OscConfig+0x5e>
 80004ec:	6863      	ldr	r3, [r4, #4]
 80004ee:	03de      	lsls	r6, r3, #15
 80004f0:	d509      	bpl.n	8000506 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80004f2:	6823      	ldr	r3, [r4, #0]
 80004f4:	039c      	lsls	r4, r3, #14
 80004f6:	d5dd      	bpl.n	80004b4 <HAL_RCC_OscConfig+0xc>
 80004f8:	686b      	ldr	r3, [r5, #4]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d1da      	bne.n	80004b4 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80004fe:	2001      	movs	r0, #1
}
 8000500:	b002      	add	sp, #8
 8000502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000506:	686b      	ldr	r3, [r5, #4]
 8000508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800050c:	d110      	bne.n	8000530 <HAL_RCC_OscConfig+0x88>
 800050e:	6823      	ldr	r3, [r4, #0]
 8000510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000514:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000516:	f7ff fe5b 	bl	80001d0 <HAL_GetTick>
 800051a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800051c:	6823      	ldr	r3, [r4, #0]
 800051e:	0398      	lsls	r0, r3, #14
 8000520:	d4c8      	bmi.n	80004b4 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000522:	f7ff fe55 	bl	80001d0 <HAL_GetTick>
 8000526:	1b80      	subs	r0, r0, r6
 8000528:	2864      	cmp	r0, #100	; 0x64
 800052a:	d9f7      	bls.n	800051c <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 800052c:	2003      	movs	r0, #3
 800052e:	e7e7      	b.n	8000500 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000530:	b99b      	cbnz	r3, 800055a <HAL_RCC_OscConfig+0xb2>
 8000532:	6823      	ldr	r3, [r4, #0]
 8000534:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000538:	6023      	str	r3, [r4, #0]
 800053a:	6823      	ldr	r3, [r4, #0]
 800053c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000540:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000542:	f7ff fe45 	bl	80001d0 <HAL_GetTick>
 8000546:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000548:	6823      	ldr	r3, [r4, #0]
 800054a:	0399      	lsls	r1, r3, #14
 800054c:	d5b2      	bpl.n	80004b4 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800054e:	f7ff fe3f 	bl	80001d0 <HAL_GetTick>
 8000552:	1b80      	subs	r0, r0, r6
 8000554:	2864      	cmp	r0, #100	; 0x64
 8000556:	d9f7      	bls.n	8000548 <HAL_RCC_OscConfig+0xa0>
 8000558:	e7e8      	b.n	800052c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800055a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800055e:	6823      	ldr	r3, [r4, #0]
 8000560:	d103      	bne.n	800056a <HAL_RCC_OscConfig+0xc2>
 8000562:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000566:	6023      	str	r3, [r4, #0]
 8000568:	e7d1      	b.n	800050e <HAL_RCC_OscConfig+0x66>
 800056a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800056e:	6023      	str	r3, [r4, #0]
 8000570:	6823      	ldr	r3, [r4, #0]
 8000572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000576:	e7cd      	b.n	8000514 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000578:	4c67      	ldr	r4, [pc, #412]	; (8000718 <HAL_RCC_OscConfig+0x270>)
 800057a:	6863      	ldr	r3, [r4, #4]
 800057c:	f013 0f0c 	tst.w	r3, #12
 8000580:	d007      	beq.n	8000592 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000582:	6863      	ldr	r3, [r4, #4]
 8000584:	f003 030c 	and.w	r3, r3, #12
 8000588:	2b08      	cmp	r3, #8
 800058a:	d110      	bne.n	80005ae <HAL_RCC_OscConfig+0x106>
 800058c:	6863      	ldr	r3, [r4, #4]
 800058e:	03da      	lsls	r2, r3, #15
 8000590:	d40d      	bmi.n	80005ae <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000592:	6823      	ldr	r3, [r4, #0]
 8000594:	079b      	lsls	r3, r3, #30
 8000596:	d502      	bpl.n	800059e <HAL_RCC_OscConfig+0xf6>
 8000598:	692b      	ldr	r3, [r5, #16]
 800059a:	2b01      	cmp	r3, #1
 800059c:	d1af      	bne.n	80004fe <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800059e:	6823      	ldr	r3, [r4, #0]
 80005a0:	696a      	ldr	r2, [r5, #20]
 80005a2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80005a6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80005aa:	6023      	str	r3, [r4, #0]
 80005ac:	e785      	b.n	80004ba <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80005ae:	692a      	ldr	r2, [r5, #16]
 80005b0:	4b5a      	ldr	r3, [pc, #360]	; (800071c <HAL_RCC_OscConfig+0x274>)
 80005b2:	b16a      	cbz	r2, 80005d0 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 80005b4:	2201      	movs	r2, #1
 80005b6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005b8:	f7ff fe0a 	bl	80001d0 <HAL_GetTick>
 80005bc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80005be:	6823      	ldr	r3, [r4, #0]
 80005c0:	079f      	lsls	r7, r3, #30
 80005c2:	d4ec      	bmi.n	800059e <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80005c4:	f7ff fe04 	bl	80001d0 <HAL_GetTick>
 80005c8:	1b80      	subs	r0, r0, r6
 80005ca:	2802      	cmp	r0, #2
 80005cc:	d9f7      	bls.n	80005be <HAL_RCC_OscConfig+0x116>
 80005ce:	e7ad      	b.n	800052c <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80005d0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005d2:	f7ff fdfd 	bl	80001d0 <HAL_GetTick>
 80005d6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80005d8:	6823      	ldr	r3, [r4, #0]
 80005da:	0798      	lsls	r0, r3, #30
 80005dc:	f57f af6d 	bpl.w	80004ba <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80005e0:	f7ff fdf6 	bl	80001d0 <HAL_GetTick>
 80005e4:	1b80      	subs	r0, r0, r6
 80005e6:	2802      	cmp	r0, #2
 80005e8:	d9f6      	bls.n	80005d8 <HAL_RCC_OscConfig+0x130>
 80005ea:	e79f      	b.n	800052c <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80005ec:	69aa      	ldr	r2, [r5, #24]
 80005ee:	4c4a      	ldr	r4, [pc, #296]	; (8000718 <HAL_RCC_OscConfig+0x270>)
 80005f0:	4b4b      	ldr	r3, [pc, #300]	; (8000720 <HAL_RCC_OscConfig+0x278>)
 80005f2:	b1da      	cbz	r2, 800062c <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80005f4:	2201      	movs	r2, #1
 80005f6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80005f8:	f7ff fdea 	bl	80001d0 <HAL_GetTick>
 80005fc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80005fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000600:	079b      	lsls	r3, r3, #30
 8000602:	d50d      	bpl.n	8000620 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000604:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000608:	4b46      	ldr	r3, [pc, #280]	; (8000724 <HAL_RCC_OscConfig+0x27c>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000610:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000612:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000614:	9b01      	ldr	r3, [sp, #4]
 8000616:	1e5a      	subs	r2, r3, #1
 8000618:	9201      	str	r2, [sp, #4]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d1f9      	bne.n	8000612 <HAL_RCC_OscConfig+0x16a>
 800061e:	e750      	b.n	80004c2 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000620:	f7ff fdd6 	bl	80001d0 <HAL_GetTick>
 8000624:	1b80      	subs	r0, r0, r6
 8000626:	2802      	cmp	r0, #2
 8000628:	d9e9      	bls.n	80005fe <HAL_RCC_OscConfig+0x156>
 800062a:	e77f      	b.n	800052c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 800062c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800062e:	f7ff fdcf 	bl	80001d0 <HAL_GetTick>
 8000632:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000634:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000636:	079f      	lsls	r7, r3, #30
 8000638:	f57f af43 	bpl.w	80004c2 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800063c:	f7ff fdc8 	bl	80001d0 <HAL_GetTick>
 8000640:	1b80      	subs	r0, r0, r6
 8000642:	2802      	cmp	r0, #2
 8000644:	d9f6      	bls.n	8000634 <HAL_RCC_OscConfig+0x18c>
 8000646:	e771      	b.n	800052c <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000648:	4c33      	ldr	r4, [pc, #204]	; (8000718 <HAL_RCC_OscConfig+0x270>)
 800064a:	69e3      	ldr	r3, [r4, #28]
 800064c:	00d8      	lsls	r0, r3, #3
 800064e:	d424      	bmi.n	800069a <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000650:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000652:	69e3      	ldr	r3, [r4, #28]
 8000654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000658:	61e3      	str	r3, [r4, #28]
 800065a:	69e3      	ldr	r3, [r4, #28]
 800065c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000660:	9300      	str	r3, [sp, #0]
 8000662:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000664:	4e30      	ldr	r6, [pc, #192]	; (8000728 <HAL_RCC_OscConfig+0x280>)
 8000666:	6833      	ldr	r3, [r6, #0]
 8000668:	05d9      	lsls	r1, r3, #23
 800066a:	d518      	bpl.n	800069e <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800066c:	68eb      	ldr	r3, [r5, #12]
 800066e:	2b01      	cmp	r3, #1
 8000670:	d126      	bne.n	80006c0 <HAL_RCC_OscConfig+0x218>
 8000672:	6a23      	ldr	r3, [r4, #32]
 8000674:	f043 0301 	orr.w	r3, r3, #1
 8000678:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800067a:	f7ff fda9 	bl	80001d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800067e:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000682:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000684:	6a23      	ldr	r3, [r4, #32]
 8000686:	079b      	lsls	r3, r3, #30
 8000688:	d53f      	bpl.n	800070a <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 800068a:	2f00      	cmp	r7, #0
 800068c:	f43f af1d 	beq.w	80004ca <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000690:	69e3      	ldr	r3, [r4, #28]
 8000692:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000696:	61e3      	str	r3, [r4, #28]
 8000698:	e717      	b.n	80004ca <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 800069a:	2700      	movs	r7, #0
 800069c:	e7e2      	b.n	8000664 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800069e:	6833      	ldr	r3, [r6, #0]
 80006a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006a4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80006a6:	f7ff fd93 	bl	80001d0 <HAL_GetTick>
 80006aa:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80006ac:	6833      	ldr	r3, [r6, #0]
 80006ae:	05da      	lsls	r2, r3, #23
 80006b0:	d4dc      	bmi.n	800066c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80006b2:	f7ff fd8d 	bl	80001d0 <HAL_GetTick>
 80006b6:	eba0 0008 	sub.w	r0, r0, r8
 80006ba:	2864      	cmp	r0, #100	; 0x64
 80006bc:	d9f6      	bls.n	80006ac <HAL_RCC_OscConfig+0x204>
 80006be:	e735      	b.n	800052c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006c0:	b9ab      	cbnz	r3, 80006ee <HAL_RCC_OscConfig+0x246>
 80006c2:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006c4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006c8:	f023 0301 	bic.w	r3, r3, #1
 80006cc:	6223      	str	r3, [r4, #32]
 80006ce:	6a23      	ldr	r3, [r4, #32]
 80006d0:	f023 0304 	bic.w	r3, r3, #4
 80006d4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80006d6:	f7ff fd7b 	bl	80001d0 <HAL_GetTick>
 80006da:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80006dc:	6a23      	ldr	r3, [r4, #32]
 80006de:	0798      	lsls	r0, r3, #30
 80006e0:	d5d3      	bpl.n	800068a <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006e2:	f7ff fd75 	bl	80001d0 <HAL_GetTick>
 80006e6:	1b80      	subs	r0, r0, r6
 80006e8:	4540      	cmp	r0, r8
 80006ea:	d9f7      	bls.n	80006dc <HAL_RCC_OscConfig+0x234>
 80006ec:	e71e      	b.n	800052c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006ee:	2b05      	cmp	r3, #5
 80006f0:	6a23      	ldr	r3, [r4, #32]
 80006f2:	d103      	bne.n	80006fc <HAL_RCC_OscConfig+0x254>
 80006f4:	f043 0304 	orr.w	r3, r3, #4
 80006f8:	6223      	str	r3, [r4, #32]
 80006fa:	e7ba      	b.n	8000672 <HAL_RCC_OscConfig+0x1ca>
 80006fc:	f023 0301 	bic.w	r3, r3, #1
 8000700:	6223      	str	r3, [r4, #32]
 8000702:	6a23      	ldr	r3, [r4, #32]
 8000704:	f023 0304 	bic.w	r3, r3, #4
 8000708:	e7b6      	b.n	8000678 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800070a:	f7ff fd61 	bl	80001d0 <HAL_GetTick>
 800070e:	eba0 0008 	sub.w	r0, r0, r8
 8000712:	42b0      	cmp	r0, r6
 8000714:	d9b6      	bls.n	8000684 <HAL_RCC_OscConfig+0x1dc>
 8000716:	e709      	b.n	800052c <HAL_RCC_OscConfig+0x84>
 8000718:	40021000 	.word	0x40021000
 800071c:	42420000 	.word	0x42420000
 8000720:	42420480 	.word	0x42420480
 8000724:	20000008 	.word	0x20000008
 8000728:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800072c:	4c22      	ldr	r4, [pc, #136]	; (80007b8 <HAL_RCC_OscConfig+0x310>)
 800072e:	6863      	ldr	r3, [r4, #4]
 8000730:	f003 030c 	and.w	r3, r3, #12
 8000734:	2b08      	cmp	r3, #8
 8000736:	f43f aee2 	beq.w	80004fe <HAL_RCC_OscConfig+0x56>
 800073a:	2300      	movs	r3, #0
 800073c:	4e1f      	ldr	r6, [pc, #124]	; (80007bc <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800073e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000740:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000742:	d12b      	bne.n	800079c <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000744:	f7ff fd44 	bl	80001d0 <HAL_GetTick>
 8000748:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800074a:	6823      	ldr	r3, [r4, #0]
 800074c:	0199      	lsls	r1, r3, #6
 800074e:	d41f      	bmi.n	8000790 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000750:	6a2b      	ldr	r3, [r5, #32]
 8000752:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000756:	d105      	bne.n	8000764 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000758:	6862      	ldr	r2, [r4, #4]
 800075a:	68a9      	ldr	r1, [r5, #8]
 800075c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000760:	430a      	orrs	r2, r1
 8000762:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000764:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000766:	6862      	ldr	r2, [r4, #4]
 8000768:	430b      	orrs	r3, r1
 800076a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800076e:	4313      	orrs	r3, r2
 8000770:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000772:	2301      	movs	r3, #1
 8000774:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000776:	f7ff fd2b 	bl	80001d0 <HAL_GetTick>
 800077a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800077c:	6823      	ldr	r3, [r4, #0]
 800077e:	019a      	lsls	r2, r3, #6
 8000780:	f53f aea7 	bmi.w	80004d2 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000784:	f7ff fd24 	bl	80001d0 <HAL_GetTick>
 8000788:	1b40      	subs	r0, r0, r5
 800078a:	2802      	cmp	r0, #2
 800078c:	d9f6      	bls.n	800077c <HAL_RCC_OscConfig+0x2d4>
 800078e:	e6cd      	b.n	800052c <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000790:	f7ff fd1e 	bl	80001d0 <HAL_GetTick>
 8000794:	1bc0      	subs	r0, r0, r7
 8000796:	2802      	cmp	r0, #2
 8000798:	d9d7      	bls.n	800074a <HAL_RCC_OscConfig+0x2a2>
 800079a:	e6c7      	b.n	800052c <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 800079c:	f7ff fd18 	bl	80001d0 <HAL_GetTick>
 80007a0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80007a2:	6823      	ldr	r3, [r4, #0]
 80007a4:	019b      	lsls	r3, r3, #6
 80007a6:	f57f ae94 	bpl.w	80004d2 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80007aa:	f7ff fd11 	bl	80001d0 <HAL_GetTick>
 80007ae:	1b40      	subs	r0, r0, r5
 80007b0:	2802      	cmp	r0, #2
 80007b2:	d9f6      	bls.n	80007a2 <HAL_RCC_OscConfig+0x2fa>
 80007b4:	e6ba      	b.n	800052c <HAL_RCC_OscConfig+0x84>
 80007b6:	bf00      	nop
 80007b8:	40021000 	.word	0x40021000
 80007bc:	42420060 	.word	0x42420060

080007c0 <HAL_RCC_GetSysClockFreq>:
{
 80007c0:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80007c2:	4b19      	ldr	r3, [pc, #100]	; (8000828 <HAL_RCC_GetSysClockFreq+0x68>)
{
 80007c4:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80007c6:	ac02      	add	r4, sp, #8
 80007c8:	f103 0510 	add.w	r5, r3, #16
 80007cc:	4622      	mov	r2, r4
 80007ce:	6818      	ldr	r0, [r3, #0]
 80007d0:	6859      	ldr	r1, [r3, #4]
 80007d2:	3308      	adds	r3, #8
 80007d4:	c203      	stmia	r2!, {r0, r1}
 80007d6:	42ab      	cmp	r3, r5
 80007d8:	4614      	mov	r4, r2
 80007da:	d1f7      	bne.n	80007cc <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80007dc:	2301      	movs	r3, #1
 80007de:	f88d 3004 	strb.w	r3, [sp, #4]
 80007e2:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80007e4:	4911      	ldr	r1, [pc, #68]	; (800082c <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80007e6:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80007ea:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80007ec:	f003 020c 	and.w	r2, r3, #12
 80007f0:	2a08      	cmp	r2, #8
 80007f2:	d117      	bne.n	8000824 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80007f4:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80007f8:	a806      	add	r0, sp, #24
 80007fa:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80007fc:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80007fe:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000802:	d50c      	bpl.n	800081e <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000804:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000806:	480a      	ldr	r0, [pc, #40]	; (8000830 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000808:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800080c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800080e:	aa06      	add	r2, sp, #24
 8000810:	4413      	add	r3, r2
 8000812:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000816:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800081a:	b007      	add	sp, #28
 800081c:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800081e:	4805      	ldr	r0, [pc, #20]	; (8000834 <HAL_RCC_GetSysClockFreq+0x74>)
 8000820:	4350      	muls	r0, r2
 8000822:	e7fa      	b.n	800081a <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000824:	4802      	ldr	r0, [pc, #8]	; (8000830 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000826:	e7f8      	b.n	800081a <HAL_RCC_GetSysClockFreq+0x5a>
 8000828:	08001a04 	.word	0x08001a04
 800082c:	40021000 	.word	0x40021000
 8000830:	007a1200 	.word	0x007a1200
 8000834:	003d0900 	.word	0x003d0900

08000838 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000838:	4a4d      	ldr	r2, [pc, #308]	; (8000970 <HAL_RCC_ClockConfig+0x138>)
{
 800083a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800083e:	6813      	ldr	r3, [r2, #0]
{
 8000840:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000842:	f003 0307 	and.w	r3, r3, #7
 8000846:	428b      	cmp	r3, r1
{
 8000848:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800084a:	d328      	bcc.n	800089e <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800084c:	682a      	ldr	r2, [r5, #0]
 800084e:	0791      	lsls	r1, r2, #30
 8000850:	d432      	bmi.n	80008b8 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000852:	07d2      	lsls	r2, r2, #31
 8000854:	d438      	bmi.n	80008c8 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000856:	4a46      	ldr	r2, [pc, #280]	; (8000970 <HAL_RCC_ClockConfig+0x138>)
 8000858:	6813      	ldr	r3, [r2, #0]
 800085a:	f003 0307 	and.w	r3, r3, #7
 800085e:	429e      	cmp	r6, r3
 8000860:	d373      	bcc.n	800094a <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000862:	682a      	ldr	r2, [r5, #0]
 8000864:	4c43      	ldr	r4, [pc, #268]	; (8000974 <HAL_RCC_ClockConfig+0x13c>)
 8000866:	f012 0f04 	tst.w	r2, #4
 800086a:	d179      	bne.n	8000960 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800086c:	0713      	lsls	r3, r2, #28
 800086e:	d506      	bpl.n	800087e <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000870:	6863      	ldr	r3, [r4, #4]
 8000872:	692a      	ldr	r2, [r5, #16]
 8000874:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000878:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800087c:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800087e:	f7ff ff9f 	bl	80007c0 <HAL_RCC_GetSysClockFreq>
 8000882:	6863      	ldr	r3, [r4, #4]
 8000884:	4a3c      	ldr	r2, [pc, #240]	; (8000978 <HAL_RCC_ClockConfig+0x140>)
 8000886:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800088a:	5cd3      	ldrb	r3, [r2, r3]
 800088c:	40d8      	lsrs	r0, r3
 800088e:	4b3b      	ldr	r3, [pc, #236]	; (800097c <HAL_RCC_ClockConfig+0x144>)
 8000890:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000892:	2000      	movs	r0, #0
 8000894:	f7ff fc5a 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8000898:	2000      	movs	r0, #0
}
 800089a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800089e:	6813      	ldr	r3, [r2, #0]
 80008a0:	f023 0307 	bic.w	r3, r3, #7
 80008a4:	430b      	orrs	r3, r1
 80008a6:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80008a8:	6813      	ldr	r3, [r2, #0]
 80008aa:	f003 0307 	and.w	r3, r3, #7
 80008ae:	4299      	cmp	r1, r3
 80008b0:	d0cc      	beq.n	800084c <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80008b2:	2001      	movs	r0, #1
 80008b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80008b8:	492e      	ldr	r1, [pc, #184]	; (8000974 <HAL_RCC_ClockConfig+0x13c>)
 80008ba:	68a8      	ldr	r0, [r5, #8]
 80008bc:	684b      	ldr	r3, [r1, #4]
 80008be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80008c2:	4303      	orrs	r3, r0
 80008c4:	604b      	str	r3, [r1, #4]
 80008c6:	e7c4      	b.n	8000852 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008c8:	686a      	ldr	r2, [r5, #4]
 80008ca:	4c2a      	ldr	r4, [pc, #168]	; (8000974 <HAL_RCC_ClockConfig+0x13c>)
 80008cc:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008ce:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008d0:	d11c      	bne.n	800090c <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008d2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008d6:	d0ec      	beq.n	80008b2 <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008d8:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008da:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008de:	f023 0303 	bic.w	r3, r3, #3
 80008e2:	4313      	orrs	r3, r2
 80008e4:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80008e6:	f7ff fc73 	bl	80001d0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008ea:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80008ec:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d114      	bne.n	800091c <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80008f2:	6863      	ldr	r3, [r4, #4]
 80008f4:	f003 030c 	and.w	r3, r3, #12
 80008f8:	2b04      	cmp	r3, #4
 80008fa:	d0ac      	beq.n	8000856 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008fc:	f7ff fc68 	bl	80001d0 <HAL_GetTick>
 8000900:	1bc0      	subs	r0, r0, r7
 8000902:	4540      	cmp	r0, r8
 8000904:	d9f5      	bls.n	80008f2 <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 8000906:	2003      	movs	r0, #3
 8000908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800090c:	2a02      	cmp	r2, #2
 800090e:	d102      	bne.n	8000916 <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000910:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000914:	e7df      	b.n	80008d6 <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000916:	f013 0f02 	tst.w	r3, #2
 800091a:	e7dc      	b.n	80008d6 <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800091c:	2b02      	cmp	r3, #2
 800091e:	d10f      	bne.n	8000940 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000920:	6863      	ldr	r3, [r4, #4]
 8000922:	f003 030c 	and.w	r3, r3, #12
 8000926:	2b08      	cmp	r3, #8
 8000928:	d095      	beq.n	8000856 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800092a:	f7ff fc51 	bl	80001d0 <HAL_GetTick>
 800092e:	1bc0      	subs	r0, r0, r7
 8000930:	4540      	cmp	r0, r8
 8000932:	d9f5      	bls.n	8000920 <HAL_RCC_ClockConfig+0xe8>
 8000934:	e7e7      	b.n	8000906 <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000936:	f7ff fc4b 	bl	80001d0 <HAL_GetTick>
 800093a:	1bc0      	subs	r0, r0, r7
 800093c:	4540      	cmp	r0, r8
 800093e:	d8e2      	bhi.n	8000906 <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000940:	6863      	ldr	r3, [r4, #4]
 8000942:	f013 0f0c 	tst.w	r3, #12
 8000946:	d1f6      	bne.n	8000936 <HAL_RCC_ClockConfig+0xfe>
 8000948:	e785      	b.n	8000856 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800094a:	6813      	ldr	r3, [r2, #0]
 800094c:	f023 0307 	bic.w	r3, r3, #7
 8000950:	4333      	orrs	r3, r6
 8000952:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000954:	6813      	ldr	r3, [r2, #0]
 8000956:	f003 0307 	and.w	r3, r3, #7
 800095a:	429e      	cmp	r6, r3
 800095c:	d1a9      	bne.n	80008b2 <HAL_RCC_ClockConfig+0x7a>
 800095e:	e780      	b.n	8000862 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000960:	6863      	ldr	r3, [r4, #4]
 8000962:	68e9      	ldr	r1, [r5, #12]
 8000964:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000968:	430b      	orrs	r3, r1
 800096a:	6063      	str	r3, [r4, #4]
 800096c:	e77e      	b.n	800086c <HAL_RCC_ClockConfig+0x34>
 800096e:	bf00      	nop
 8000970:	40022000 	.word	0x40022000
 8000974:	40021000 	.word	0x40021000
 8000978:	08001a48 	.word	0x08001a48
 800097c:	20000008 	.word	0x20000008

08000980 <HAL_RCC_GetHCLKFreq>:
}
 8000980:	4b01      	ldr	r3, [pc, #4]	; (8000988 <HAL_RCC_GetHCLKFreq+0x8>)
 8000982:	6818      	ldr	r0, [r3, #0]
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	20000008 	.word	0x20000008

0800098c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800098c:	4b04      	ldr	r3, [pc, #16]	; (80009a0 <HAL_RCC_GetPCLK1Freq+0x14>)
 800098e:	4a05      	ldr	r2, [pc, #20]	; (80009a4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000996:	5cd3      	ldrb	r3, [r2, r3]
 8000998:	4a03      	ldr	r2, [pc, #12]	; (80009a8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800099a:	6810      	ldr	r0, [r2, #0]
}    
 800099c:	40d8      	lsrs	r0, r3
 800099e:	4770      	bx	lr
 80009a0:	40021000 	.word	0x40021000
 80009a4:	08001a58 	.word	0x08001a58
 80009a8:	20000008 	.word	0x20000008

080009ac <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80009ac:	4b04      	ldr	r3, [pc, #16]	; (80009c0 <HAL_RCC_GetPCLK2Freq+0x14>)
 80009ae:	4a05      	ldr	r2, [pc, #20]	; (80009c4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80009b6:	5cd3      	ldrb	r3, [r2, r3]
 80009b8:	4a03      	ldr	r2, [pc, #12]	; (80009c8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80009ba:	6810      	ldr	r0, [r2, #0]
} 
 80009bc:	40d8      	lsrs	r0, r3
 80009be:	4770      	bx	lr
 80009c0:	40021000 	.word	0x40021000
 80009c4:	08001a58 	.word	0x08001a58
 80009c8:	20000008 	.word	0x20000008

080009cc <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 80009cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009d0:	4604      	mov	r4, r0
 80009d2:	4688      	mov	r8, r1
 80009d4:	4617      	mov	r7, r2
 80009d6:	461d      	mov	r5, r3
 80009d8:	9e06      	ldr	r6, [sp, #24]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80009da:	6822      	ldr	r2, [r4, #0]
 80009dc:	6893      	ldr	r3, [r2, #8]
 80009de:	ea38 0303 	bics.w	r3, r8, r3
 80009e2:	bf0c      	ite	eq
 80009e4:	2301      	moveq	r3, #1
 80009e6:	2300      	movne	r3, #0
 80009e8:	429f      	cmp	r7, r3
 80009ea:	d102      	bne.n	80009f2 <SPI_WaitFlagStateUntilTimeout+0x26>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80009ec:	2000      	movs	r0, #0
}
 80009ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 80009f2:	1c6b      	adds	r3, r5, #1
 80009f4:	d0f2      	beq.n	80009dc <SPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 80009f6:	bb55      	cbnz	r5, 8000a4e <SPI_WaitFlagStateUntilTimeout+0x82>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80009f8:	6823      	ldr	r3, [r4, #0]
 80009fa:	685a      	ldr	r2, [r3, #4]
 80009fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000a00:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000a02:	6862      	ldr	r2, [r4, #4]
 8000a04:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8000a08:	d10a      	bne.n	8000a20 <SPI_WaitFlagStateUntilTimeout+0x54>
 8000a0a:	68a2      	ldr	r2, [r4, #8]
 8000a0c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000a10:	d002      	beq.n	8000a18 <SPI_WaitFlagStateUntilTimeout+0x4c>
 8000a12:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000a16:	d103      	bne.n	8000a20 <SPI_WaitFlagStateUntilTimeout+0x54>
          __HAL_SPI_DISABLE(hspi);
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000a1e:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000a20:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000a22:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000a26:	d109      	bne.n	8000a3c <SPI_WaitFlagStateUntilTimeout+0x70>
          SPI_RESET_CRC(hspi);
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000a2e:	0412      	lsls	r2, r2, #16
 8000a30:	0c12      	lsrs	r2, r2, #16
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000a3a:	601a      	str	r2, [r3, #0]
        hspi->State= HAL_SPI_STATE_READY;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8000a42:	2300      	movs	r3, #0
 8000a44:	2003      	movs	r0, #3
 8000a46:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8000a4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8000a4e:	f7ff fbbf 	bl	80001d0 <HAL_GetTick>
 8000a52:	1b80      	subs	r0, r0, r6
 8000a54:	4285      	cmp	r5, r0
 8000a56:	d8c0      	bhi.n	80009da <SPI_WaitFlagStateUntilTimeout+0xe>
 8000a58:	e7ce      	b.n	80009f8 <SPI_WaitFlagStateUntilTimeout+0x2c>

08000a5a <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000a5a:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000a5c:	460b      	mov	r3, r1
 8000a5e:	9200      	str	r2, [sp, #0]
 8000a60:	2180      	movs	r1, #128	; 0x80
 8000a62:	2200      	movs	r2, #0
{
 8000a64:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000a66:	f7ff ffb1 	bl	80009cc <SPI_WaitFlagStateUntilTimeout>
 8000a6a:	b120      	cbz	r0, 8000a76 <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8000a6c:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000a6e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000a70:	f043 0320 	orr.w	r3, r3, #32
 8000a74:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8000a76:	b002      	add	sp, #8
 8000a78:	bd10      	pop	{r4, pc}

08000a7a <HAL_SPI_Transmit>:
{
 8000a7a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000a7e:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8000a80:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8000a84:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8000a86:	2b01      	cmp	r3, #1
{
 8000a88:	460d      	mov	r5, r1
 8000a8a:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8000a8c:	f000 809c 	beq.w	8000bc8 <HAL_SPI_Transmit+0x14e>
 8000a90:	2301      	movs	r3, #1
 8000a92:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000a96:	f7ff fb9b 	bl	80001d0 <HAL_GetTick>
 8000a9a:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 8000a9c:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8000aa0:	b2c0      	uxtb	r0, r0
 8000aa2:	2801      	cmp	r0, #1
 8000aa4:	f040 808e 	bne.w	8000bc4 <HAL_SPI_Transmit+0x14a>
  if((pData == NULL ) || (Size == 0U))
 8000aa8:	2d00      	cmp	r5, #0
 8000aaa:	d04e      	beq.n	8000b4a <HAL_SPI_Transmit+0xd0>
 8000aac:	f1b8 0f00 	cmp.w	r8, #0
 8000ab0:	d04b      	beq.n	8000b4a <HAL_SPI_Transmit+0xd0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8000abc:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8000abe:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8000ac2:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8000ac4:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8000ac6:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8000ac8:	6423      	str	r3, [r4, #64]	; 0x40
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000aca:	68a3      	ldr	r3, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8000acc:	6325      	str	r5, [r4, #48]	; 0x30
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000ace:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ad2:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferSize  = Size;
 8000ad4:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8000ad8:	bf02      	ittt	eq
 8000ada:	681a      	ldreq	r2, [r3, #0]
 8000adc:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
 8000ae0:	601a      	streq	r2, [r3, #0]
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8000ae6:	bf5e      	ittt	pl
 8000ae8:	681a      	ldrpl	r2, [r3, #0]
 8000aea:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8000aee:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000af0:	68e2      	ldr	r2, [r4, #12]
 8000af2:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8000af6:	6862      	ldr	r2, [r4, #4]
 8000af8:	d138      	bne.n	8000b6c <HAL_SPI_Transmit+0xf2>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8000afa:	b11a      	cbz	r2, 8000b04 <HAL_SPI_Transmit+0x8a>
 8000afc:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8000afe:	b292      	uxth	r2, r2
 8000b00:	2a01      	cmp	r2, #1
 8000b02:	d106      	bne.n	8000b12 <HAL_SPI_Transmit+0x98>
          hspi->Instance->DR = *((uint16_t *)pData);
 8000b04:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000b08:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount--;
 8000b0a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000b0c:	3b01      	subs	r3, #1
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8000b12:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	b993      	cbnz	r3, 8000b3e <HAL_SPI_Transmit+0xc4>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8000b18:	9700      	str	r7, [sp, #0]
 8000b1a:	4633      	mov	r3, r6
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	2102      	movs	r1, #2
 8000b20:	4620      	mov	r0, r4
 8000b22:	f7ff ff53 	bl	80009cc <SPI_WaitFlagStateUntilTimeout>
 8000b26:	b978      	cbnz	r0, 8000b48 <HAL_SPI_Transmit+0xce>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8000b28:	463a      	mov	r2, r7
 8000b2a:	4631      	mov	r1, r6
 8000b2c:	4620      	mov	r0, r4
 8000b2e:	f7ff ff94 	bl	8000a5a <SPI_CheckFlag_BSY>
 8000b32:	2800      	cmp	r0, #0
 8000b34:	d038      	beq.n	8000ba8 <HAL_SPI_Transmit+0x12e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000b36:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8000b38:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000b3a:	6563      	str	r3, [r4, #84]	; 0x54
    goto error;
 8000b3c:	e005      	b.n	8000b4a <HAL_SPI_Transmit+0xd0>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000b3e:	6823      	ldr	r3, [r4, #0]
 8000b40:	689a      	ldr	r2, [r3, #8]
 8000b42:	0790      	lsls	r0, r2, #30
 8000b44:	d4de      	bmi.n	8000b04 <HAL_SPI_Transmit+0x8a>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000b46:	b94e      	cbnz	r6, 8000b5c <HAL_SPI_Transmit+0xe2>
          errorcode = HAL_TIMEOUT;
 8000b48:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8000b50:	2300      	movs	r3, #0
 8000b52:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8000b56:	b004      	add	sp, #16
 8000b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000b5c:	1c71      	adds	r1, r6, #1
 8000b5e:	d0d8      	beq.n	8000b12 <HAL_SPI_Transmit+0x98>
 8000b60:	f7ff fb36 	bl	80001d0 <HAL_GetTick>
 8000b64:	1bc0      	subs	r0, r0, r7
 8000b66:	4286      	cmp	r6, r0
 8000b68:	d8d3      	bhi.n	8000b12 <HAL_SPI_Transmit+0x98>
 8000b6a:	e7ed      	b.n	8000b48 <HAL_SPI_Transmit+0xce>
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8000b6c:	b11a      	cbz	r2, 8000b76 <HAL_SPI_Transmit+0xfc>
 8000b6e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8000b70:	b292      	uxth	r2, r2
 8000b72:	2a01      	cmp	r2, #1
 8000b74:	d106      	bne.n	8000b84 <HAL_SPI_Transmit+0x10a>
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8000b76:	f815 2b01 	ldrb.w	r2, [r5], #1
 8000b7a:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8000b7c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8000b84:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000b86:	b29b      	uxth	r3, r3
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d0c5      	beq.n	8000b18 <HAL_SPI_Transmit+0x9e>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000b8c:	6823      	ldr	r3, [r4, #0]
 8000b8e:	689a      	ldr	r2, [r3, #8]
 8000b90:	0792      	lsls	r2, r2, #30
 8000b92:	d4f0      	bmi.n	8000b76 <HAL_SPI_Transmit+0xfc>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000b94:	2e00      	cmp	r6, #0
 8000b96:	d0d7      	beq.n	8000b48 <HAL_SPI_Transmit+0xce>
 8000b98:	1c73      	adds	r3, r6, #1
 8000b9a:	d0f3      	beq.n	8000b84 <HAL_SPI_Transmit+0x10a>
 8000b9c:	f7ff fb18 	bl	80001d0 <HAL_GetTick>
 8000ba0:	1bc0      	subs	r0, r0, r7
 8000ba2:	4286      	cmp	r6, r0
 8000ba4:	d8ee      	bhi.n	8000b84 <HAL_SPI_Transmit+0x10a>
 8000ba6:	e7cf      	b.n	8000b48 <HAL_SPI_Transmit+0xce>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000ba8:	68a3      	ldr	r3, [r4, #8]
 8000baa:	b933      	cbnz	r3, 8000bba <HAL_SPI_Transmit+0x140>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000bac:	9303      	str	r3, [sp, #12]
 8000bae:	6823      	ldr	r3, [r4, #0]
 8000bb0:	68da      	ldr	r2, [r3, #12]
 8000bb2:	9203      	str	r2, [sp, #12]
 8000bb4:	689b      	ldr	r3, [r3, #8]
 8000bb6:	9303      	str	r3, [sp, #12]
 8000bb8:	9b03      	ldr	r3, [sp, #12]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8000bba:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8000bbc:	3000      	adds	r0, #0
 8000bbe:	bf18      	it	ne
 8000bc0:	2001      	movne	r0, #1
 8000bc2:	e7c2      	b.n	8000b4a <HAL_SPI_Transmit+0xd0>
 8000bc4:	2002      	movs	r0, #2
 8000bc6:	e7c0      	b.n	8000b4a <HAL_SPI_Transmit+0xd0>
  __HAL_LOCK(hspi);
 8000bc8:	2002      	movs	r0, #2
 8000bca:	e7c4      	b.n	8000b56 <HAL_SPI_Transmit+0xdc>

08000bcc <HAL_SPI_TransmitReceive>:
{
 8000bcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000bd0:	4699      	mov	r9, r3
  __HAL_LOCK(hspi);
 8000bd2:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8000bd6:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 8000bd8:	2b01      	cmp	r3, #1
{
 8000bda:	4604      	mov	r4, r0
 8000bdc:	460d      	mov	r5, r1
 8000bde:	4616      	mov	r6, r2
 8000be0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 8000be2:	f000 80ee 	beq.w	8000dc2 <HAL_SPI_TransmitReceive+0x1f6>
 8000be6:	2301      	movs	r3, #1
 8000be8:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000bec:	f7ff faf0 	bl	80001d0 <HAL_GetTick>
  tmp  = hspi->State;
 8000bf0:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8000bf4:	4680      	mov	r8, r0
  tmp  = hspi->State;
 8000bf6:	b2db      	uxtb	r3, r3
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8000bf8:	2b01      	cmp	r3, #1
  tmp1 = hspi->Init.Mode;
 8000bfa:	6861      	ldr	r1, [r4, #4]
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8000bfc:	d00a      	beq.n	8000c14 <HAL_SPI_TransmitReceive+0x48>
 8000bfe:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8000c02:	f040 80dc 	bne.w	8000dbe <HAL_SPI_TransmitReceive+0x1f2>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8000c06:	68a2      	ldr	r2, [r4, #8]
 8000c08:	2a00      	cmp	r2, #0
 8000c0a:	f040 80d8 	bne.w	8000dbe <HAL_SPI_TransmitReceive+0x1f2>
 8000c0e:	2b04      	cmp	r3, #4
 8000c10:	f040 80d5 	bne.w	8000dbe <HAL_SPI_TransmitReceive+0x1f2>
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8000c14:	2d00      	cmp	r5, #0
 8000c16:	d04e      	beq.n	8000cb6 <HAL_SPI_TransmitReceive+0xea>
 8000c18:	2e00      	cmp	r6, #0
 8000c1a:	d04c      	beq.n	8000cb6 <HAL_SPI_TransmitReceive+0xea>
 8000c1c:	f1b9 0f00 	cmp.w	r9, #0
 8000c20:	d049      	beq.n	8000cb6 <HAL_SPI_TransmitReceive+0xea>
  if(hspi->State == HAL_SPI_STATE_READY)
 8000c22:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8000c26:	63a6      	str	r6, [r4, #56]	; 0x38
  if(hspi->State == HAL_SPI_STATE_READY)
 8000c28:	2b01      	cmp	r3, #1
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8000c2a:	bf04      	itt	eq
 8000c2c:	2305      	moveq	r3, #5
 8000c2e:	f884 3051 	strbeq.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000c32:	2300      	movs	r3, #0
 8000c34:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8000c36:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8000c38:	6463      	str	r3, [r4, #68]	; 0x44
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8000c3a:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8000c3c:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8000c40:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8000c44:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8000c46:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8000c4a:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8000c4c:	bf58      	it	pl
 8000c4e:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8000c50:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8000c52:	bf58      	it	pl
 8000c54:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8000c58:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8000c5c:	bf58      	it	pl
 8000c5e:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000c60:	68e2      	ldr	r2, [r4, #12]
 8000c62:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8000c66:	d15d      	bne.n	8000d24 <HAL_SPI_TransmitReceive+0x158>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8000c68:	b119      	cbz	r1, 8000c72 <HAL_SPI_TransmitReceive+0xa6>
 8000c6a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8000c6c:	b292      	uxth	r2, r2
 8000c6e:	2a01      	cmp	r2, #1
 8000c70:	d106      	bne.n	8000c80 <HAL_SPI_TransmitReceive+0xb4>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8000c72:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000c76:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8000c78:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	b29b      	uxth	r3, r3
 8000c7e:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8000c80:	f04f 0901 	mov.w	r9, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000c84:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	b9bb      	cbnz	r3, 8000cba <HAL_SPI_TransmitReceive+0xee>
 8000c8a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000c8c:	b29b      	uxth	r3, r3
 8000c8e:	b9a3      	cbnz	r3, 8000cba <HAL_SPI_TransmitReceive+0xee>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8000c90:	f8cd 8000 	str.w	r8, [sp]
 8000c94:	463b      	mov	r3, r7
 8000c96:	2201      	movs	r2, #1
 8000c98:	2102      	movs	r1, #2
 8000c9a:	4620      	mov	r0, r4
 8000c9c:	f7ff fe96 	bl	80009cc <SPI_WaitFlagStateUntilTimeout>
 8000ca0:	2800      	cmp	r0, #0
 8000ca2:	d135      	bne.n	8000d10 <HAL_SPI_TransmitReceive+0x144>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8000ca4:	4642      	mov	r2, r8
 8000ca6:	4639      	mov	r1, r7
 8000ca8:	4620      	mov	r0, r4
 8000caa:	f7ff fed6 	bl	8000a5a <SPI_CheckFlag_BSY>
 8000cae:	2800      	cmp	r0, #0
 8000cb0:	d07a      	beq.n	8000da8 <HAL_SPI_TransmitReceive+0x1dc>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000cb2:	2320      	movs	r3, #32
 8000cb4:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	e02b      	b.n	8000d12 <HAL_SPI_TransmitReceive+0x146>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8000cba:	f1b9 0f00 	cmp.w	r9, #0
 8000cbe:	d00f      	beq.n	8000ce0 <HAL_SPI_TransmitReceive+0x114>
 8000cc0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	b163      	cbz	r3, 8000ce0 <HAL_SPI_TransmitReceive+0x114>
 8000cc6:	6823      	ldr	r3, [r4, #0]
 8000cc8:	689a      	ldr	r2, [r3, #8]
 8000cca:	0791      	lsls	r1, r2, #30
 8000ccc:	d508      	bpl.n	8000ce0 <HAL_SPI_TransmitReceive+0x114>
        txallowed = 0U;
 8000cce:	f04f 0900 	mov.w	r9, #0
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8000cd2:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000cd6:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8000cd8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	86e3      	strh	r3, [r4, #54]	; 0x36
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8000ce0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	b163      	cbz	r3, 8000d00 <HAL_SPI_TransmitReceive+0x134>
 8000ce6:	6823      	ldr	r3, [r4, #0]
 8000ce8:	689a      	ldr	r2, [r3, #8]
 8000cea:	07d2      	lsls	r2, r2, #31
 8000cec:	d508      	bpl.n	8000d00 <HAL_SPI_TransmitReceive+0x134>
        txallowed = 1U;
 8000cee:	f04f 0901 	mov.w	r9, #1
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 8000cf8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8000d00:	1c78      	adds	r0, r7, #1
 8000d02:	d0bf      	beq.n	8000c84 <HAL_SPI_TransmitReceive+0xb8>
 8000d04:	f7ff fa64 	bl	80001d0 <HAL_GetTick>
 8000d08:	eba0 0008 	sub.w	r0, r0, r8
 8000d0c:	4287      	cmp	r7, r0
 8000d0e:	d8b9      	bhi.n	8000c84 <HAL_SPI_TransmitReceive+0xb8>
        errorcode = HAL_TIMEOUT;
 8000d10:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8000d12:	2301      	movs	r3, #1
 8000d14:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8000d18:	2300      	movs	r3, #0
 8000d1a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8000d1e:	b005      	add	sp, #20
 8000d20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8000d24:	b119      	cbz	r1, 8000d2e <HAL_SPI_TransmitReceive+0x162>
 8000d26:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8000d28:	b292      	uxth	r2, r2
 8000d2a:	2a01      	cmp	r2, #1
 8000d2c:	d106      	bne.n	8000d3c <HAL_SPI_TransmitReceive+0x170>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 8000d2e:	f815 2b01 	ldrb.w	r2, [r5], #1
 8000d32:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 8000d34:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000d36:	3b01      	subs	r3, #1
 8000d38:	b29b      	uxth	r3, r3
 8000d3a:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8000d3c:	f04f 0901 	mov.w	r9, #1
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000d40:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	b91b      	cbnz	r3, 8000d4e <HAL_SPI_TransmitReceive+0x182>
 8000d46:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d0a0      	beq.n	8000c90 <HAL_SPI_TransmitReceive+0xc4>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8000d4e:	f1b9 0f00 	cmp.w	r9, #0
 8000d52:	d00f      	beq.n	8000d74 <HAL_SPI_TransmitReceive+0x1a8>
 8000d54:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	b163      	cbz	r3, 8000d74 <HAL_SPI_TransmitReceive+0x1a8>
 8000d5a:	6823      	ldr	r3, [r4, #0]
 8000d5c:	689a      	ldr	r2, [r3, #8]
 8000d5e:	0791      	lsls	r1, r2, #30
 8000d60:	d508      	bpl.n	8000d74 <HAL_SPI_TransmitReceive+0x1a8>
        txallowed = 0U;
 8000d62:	f04f 0900 	mov.w	r9, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8000d66:	782a      	ldrb	r2, [r5, #0]
 8000d68:	3501      	adds	r5, #1
 8000d6a:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8000d6c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	b29b      	uxth	r3, r3
 8000d72:	86e3      	strh	r3, [r4, #54]	; 0x36
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8000d74:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	b16b      	cbz	r3, 8000d96 <HAL_SPI_TransmitReceive+0x1ca>
 8000d7a:	6823      	ldr	r3, [r4, #0]
 8000d7c:	689a      	ldr	r2, [r3, #8]
 8000d7e:	07d2      	lsls	r2, r2, #31
 8000d80:	d509      	bpl.n	8000d96 <HAL_SPI_TransmitReceive+0x1ca>
        txallowed = 1U;
 8000d82:	f04f 0901 	mov.w	r9, #1
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	3601      	adds	r6, #1
 8000d8a:	f806 3c01 	strb.w	r3, [r6, #-1]
        hspi->RxXferCount--;
 8000d8e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000d90:	3b01      	subs	r3, #1
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8000d96:	1c7b      	adds	r3, r7, #1
 8000d98:	d0d2      	beq.n	8000d40 <HAL_SPI_TransmitReceive+0x174>
 8000d9a:	f7ff fa19 	bl	80001d0 <HAL_GetTick>
 8000d9e:	eba0 0008 	sub.w	r0, r0, r8
 8000da2:	4287      	cmp	r7, r0
 8000da4:	d8cc      	bhi.n	8000d40 <HAL_SPI_TransmitReceive+0x174>
 8000da6:	e7b3      	b.n	8000d10 <HAL_SPI_TransmitReceive+0x144>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000da8:	68a3      	ldr	r3, [r4, #8]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d1b1      	bne.n	8000d12 <HAL_SPI_TransmitReceive+0x146>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000dae:	6823      	ldr	r3, [r4, #0]
 8000db0:	9003      	str	r0, [sp, #12]
 8000db2:	68da      	ldr	r2, [r3, #12]
 8000db4:	9203      	str	r2, [sp, #12]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	9303      	str	r3, [sp, #12]
 8000dba:	9b03      	ldr	r3, [sp, #12]
 8000dbc:	e7a9      	b.n	8000d12 <HAL_SPI_TransmitReceive+0x146>
    errorcode = HAL_BUSY;
 8000dbe:	2002      	movs	r0, #2
 8000dc0:	e7a7      	b.n	8000d12 <HAL_SPI_TransmitReceive+0x146>
  __HAL_LOCK(hspi);
 8000dc2:	2002      	movs	r0, #2
 8000dc4:	e7ab      	b.n	8000d1e <HAL_SPI_TransmitReceive+0x152>

08000dc6 <HAL_SPI_GetState>:
  return hspi->State;
 8000dc6:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 8000dca:	4770      	bx	lr

08000dcc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8000dcc:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8000dce:	4604      	mov	r4, r0
 8000dd0:	2800      	cmp	r0, #0
 8000dd2:	d034      	beq.n	8000e3e <HAL_SPI_Init+0x72>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8000dd8:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000ddc:	b90b      	cbnz	r3, 8000de2 <HAL_SPI_Init+0x16>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8000dde:	f000 fd11 	bl	8001804 <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8000de2:	2302      	movs	r3, #2

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8000de4:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000de6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8000dea:	680b      	ldr	r3, [r1, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000dec:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8000dee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000df2:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000df4:	6863      	ldr	r3, [r4, #4]
 8000df6:	69a2      	ldr	r2, [r4, #24]
 8000df8:	4303      	orrs	r3, r0
 8000dfa:	68e0      	ldr	r0, [r4, #12]
 8000dfc:	4303      	orrs	r3, r0
 8000dfe:	6920      	ldr	r0, [r4, #16]
 8000e00:	4303      	orrs	r3, r0
 8000e02:	6960      	ldr	r0, [r4, #20]
 8000e04:	4303      	orrs	r3, r0
 8000e06:	69e0      	ldr	r0, [r4, #28]
 8000e08:	4303      	orrs	r3, r0
 8000e0a:	6a20      	ldr	r0, [r4, #32]
 8000e0c:	4303      	orrs	r3, r0
 8000e0e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000e10:	4303      	orrs	r3, r0
 8000e12:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8000e16:	4303      	orrs	r3, r0
 8000e18:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000e1a:	0c12      	lsrs	r2, r2, #16
 8000e1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e1e:	f002 0204 	and.w	r2, r2, #4
 8000e22:	431a      	orrs	r2, r3

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8000e24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000e26:	604a      	str	r2, [r1, #4]
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8000e28:	610b      	str	r3, [r1, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000e2a:	69cb      	ldr	r3, [r1, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000e2c:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000e2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000e32:	61cb      	str	r3, [r1, #28]
  hspi->State = HAL_SPI_STATE_READY;
 8000e34:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000e36:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8000e38:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  
  return HAL_OK;
 8000e3c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000e3e:	2001      	movs	r0, #1
}
 8000e40:	bd10      	pop	{r4, pc}
	...

08000e44 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000e48:	6805      	ldr	r5, [r0, #0]
 8000e4a:	68c2      	ldr	r2, [r0, #12]
 8000e4c:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000e4e:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000e50:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e54:	4313      	orrs	r3, r2
 8000e56:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000e58:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8000e5a:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000e5c:	430b      	orrs	r3, r1
 8000e5e:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8000e60:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8000e64:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000e68:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000e6e:	696b      	ldr	r3, [r5, #20]
 8000e70:	6982      	ldr	r2, [r0, #24]
 8000e72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e76:	4313      	orrs	r3, r2
 8000e78:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8000e7a:	4b40      	ldr	r3, [pc, #256]	; (8000f7c <UART_SetConfig+0x138>)
{
 8000e7c:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8000e7e:	429d      	cmp	r5, r3
 8000e80:	f04f 0419 	mov.w	r4, #25
 8000e84:	d146      	bne.n	8000f14 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000e86:	f7ff fd91 	bl	80009ac <HAL_RCC_GetPCLK2Freq>
 8000e8a:	fb04 f300 	mul.w	r3, r4, r0
 8000e8e:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000e92:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000e96:	00b6      	lsls	r6, r6, #2
 8000e98:	fbb3 f3f6 	udiv	r3, r3, r6
 8000e9c:	fbb3 f3f8 	udiv	r3, r3, r8
 8000ea0:	011e      	lsls	r6, r3, #4
 8000ea2:	f7ff fd83 	bl	80009ac <HAL_RCC_GetPCLK2Freq>
 8000ea6:	4360      	muls	r0, r4
 8000ea8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	fbb0 f7f3 	udiv	r7, r0, r3
 8000eb2:	f7ff fd7b 	bl	80009ac <HAL_RCC_GetPCLK2Freq>
 8000eb6:	4360      	muls	r0, r4
 8000eb8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ec2:	fbb3 f3f8 	udiv	r3, r3, r8
 8000ec6:	fb08 7313 	mls	r3, r8, r3, r7
 8000eca:	011b      	lsls	r3, r3, #4
 8000ecc:	3332      	adds	r3, #50	; 0x32
 8000ece:	fbb3 f3f8 	udiv	r3, r3, r8
 8000ed2:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000ed6:	f7ff fd69 	bl	80009ac <HAL_RCC_GetPCLK2Freq>
 8000eda:	4360      	muls	r0, r4
 8000edc:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000ee0:	0092      	lsls	r2, r2, #2
 8000ee2:	fbb0 faf2 	udiv	sl, r0, r2
 8000ee6:	f7ff fd61 	bl	80009ac <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000eea:	4360      	muls	r0, r4
 8000eec:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ef6:	fbb3 f3f8 	udiv	r3, r3, r8
 8000efa:	fb08 a313 	mls	r3, r8, r3, sl
 8000efe:	011b      	lsls	r3, r3, #4
 8000f00:	3332      	adds	r3, #50	; 0x32
 8000f02:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f06:	f003 030f 	and.w	r3, r3, #15
 8000f0a:	433b      	orrs	r3, r7
 8000f0c:	4433      	add	r3, r6
 8000f0e:	60ab      	str	r3, [r5, #8]
 8000f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f14:	f7ff fd3a 	bl	800098c <HAL_RCC_GetPCLK1Freq>
 8000f18:	fb04 f300 	mul.w	r3, r4, r0
 8000f1c:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000f20:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000f24:	00b6      	lsls	r6, r6, #2
 8000f26:	fbb3 f3f6 	udiv	r3, r3, r6
 8000f2a:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f2e:	011e      	lsls	r6, r3, #4
 8000f30:	f7ff fd2c 	bl	800098c <HAL_RCC_GetPCLK1Freq>
 8000f34:	4360      	muls	r0, r4
 8000f36:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	fbb0 f7f3 	udiv	r7, r0, r3
 8000f40:	f7ff fd24 	bl	800098c <HAL_RCC_GetPCLK1Freq>
 8000f44:	4360      	muls	r0, r4
 8000f46:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f50:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f54:	fb08 7313 	mls	r3, r8, r3, r7
 8000f58:	011b      	lsls	r3, r3, #4
 8000f5a:	3332      	adds	r3, #50	; 0x32
 8000f5c:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f60:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000f64:	f7ff fd12 	bl	800098c <HAL_RCC_GetPCLK1Freq>
 8000f68:	4360      	muls	r0, r4
 8000f6a:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000f6e:	0092      	lsls	r2, r2, #2
 8000f70:	fbb0 faf2 	udiv	sl, r0, r2
 8000f74:	f7ff fd0a 	bl	800098c <HAL_RCC_GetPCLK1Freq>
 8000f78:	e7b7      	b.n	8000eea <UART_SetConfig+0xa6>
 8000f7a:	bf00      	nop
 8000f7c:	40013800 	.word	0x40013800

08000f80 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8000f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f82:	4604      	mov	r4, r0
 8000f84:	460e      	mov	r6, r1
 8000f86:	4617      	mov	r7, r2
 8000f88:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8000f8a:	6821      	ldr	r1, [r4, #0]
 8000f8c:	680b      	ldr	r3, [r1, #0]
 8000f8e:	ea36 0303 	bics.w	r3, r6, r3
 8000f92:	d101      	bne.n	8000f98 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8000f94:	2000      	movs	r0, #0
}
 8000f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000f98:	1c6b      	adds	r3, r5, #1
 8000f9a:	d0f7      	beq.n	8000f8c <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000f9c:	b995      	cbnz	r5, 8000fc4 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000f9e:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8000fa0:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000fa2:	68da      	ldr	r2, [r3, #12]
 8000fa4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000fa8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000faa:	695a      	ldr	r2, [r3, #20]
 8000fac:	f022 0201 	bic.w	r2, r2, #1
 8000fb0:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8000fb2:	2320      	movs	r3, #32
 8000fb4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8000fb8:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8000fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000fc4:	f7ff f904 	bl	80001d0 <HAL_GetTick>
 8000fc8:	1bc0      	subs	r0, r0, r7
 8000fca:	4285      	cmp	r5, r0
 8000fcc:	d2dd      	bcs.n	8000f8a <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8000fce:	e7e6      	b.n	8000f9e <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08000fd0 <HAL_UART_Init>:
{
 8000fd0:	b510      	push	{r4, lr}
  if(huart == NULL)
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	b340      	cbz	r0, 8001028 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8000fd6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000fda:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000fde:	b91b      	cbnz	r3, 8000fe8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8000fe0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8000fe4:	f000 fc42 	bl	800186c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8000fe8:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8000fea:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000fec:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8000ff0:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8000ff2:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8000ff4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000ff8:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8000ffa:	f7ff ff23 	bl	8000e44 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000ffe:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001000:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001002:	691a      	ldr	r2, [r3, #16]
 8001004:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001008:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800100a:	695a      	ldr	r2, [r3, #20]
 800100c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001010:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001012:	68da      	ldr	r2, [r3, #12]
 8001014:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001018:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 800101a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800101c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800101e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001022:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001026:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001028:	2001      	movs	r0, #1
}
 800102a:	bd10      	pop	{r4, pc}

0800102c <HAL_UART_Transmit>:
{
 800102c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001030:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8001032:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8001036:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 8001038:	2b20      	cmp	r3, #32
{
 800103a:	460d      	mov	r5, r1
 800103c:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 800103e:	d14e      	bne.n	80010de <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 8001040:	2900      	cmp	r1, #0
 8001042:	d049      	beq.n	80010d8 <HAL_UART_Transmit+0xac>
 8001044:	2a00      	cmp	r2, #0
 8001046:	d047      	beq.n	80010d8 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8001048:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800104c:	2b01      	cmp	r3, #1
 800104e:	d046      	beq.n	80010de <HAL_UART_Transmit+0xb2>
 8001050:	2301      	movs	r3, #1
 8001052:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001056:	2300      	movs	r3, #0
 8001058:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800105a:	2321      	movs	r3, #33	; 0x21
 800105c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001060:	f7ff f8b6 	bl	80001d0 <HAL_GetTick>
 8001064:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8001066:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 800106a:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 800106e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001070:	b29b      	uxth	r3, r3
 8001072:	b96b      	cbnz	r3, 8001090 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001074:	463b      	mov	r3, r7
 8001076:	4632      	mov	r2, r6
 8001078:	2140      	movs	r1, #64	; 0x40
 800107a:	4620      	mov	r0, r4
 800107c:	f7ff ff80 	bl	8000f80 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001080:	b9a8      	cbnz	r0, 80010ae <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8001082:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8001084:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8001088:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 800108c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8001090:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001092:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8001094:	3b01      	subs	r3, #1
 8001096:	b29b      	uxth	r3, r3
 8001098:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800109a:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800109c:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800109e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80010a2:	4620      	mov	r0, r4
 80010a4:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80010a6:	d10e      	bne.n	80010c6 <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80010a8:	f7ff ff6a 	bl	8000f80 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80010ac:	b110      	cbz	r0, 80010b4 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 80010ae:	2003      	movs	r0, #3
 80010b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80010b4:	882b      	ldrh	r3, [r5, #0]
 80010b6:	6822      	ldr	r2, [r4, #0]
 80010b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80010bc:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80010be:	6923      	ldr	r3, [r4, #16]
 80010c0:	b943      	cbnz	r3, 80010d4 <HAL_UART_Transmit+0xa8>
          pData +=2U;
 80010c2:	3502      	adds	r5, #2
 80010c4:	e7d3      	b.n	800106e <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80010c6:	f7ff ff5b 	bl	8000f80 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80010ca:	2800      	cmp	r0, #0
 80010cc:	d1ef      	bne.n	80010ae <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80010ce:	6823      	ldr	r3, [r4, #0]
 80010d0:	782a      	ldrb	r2, [r5, #0]
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	3501      	adds	r5, #1
 80010d6:	e7ca      	b.n	800106e <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 80010d8:	2001      	movs	r0, #1
 80010da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80010de:	2002      	movs	r0, #2
}
 80010e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080010e4 <SX1278_hw_SetNSS>:
	SX1278_hw_SetNSS(hw, 1);
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
}

void SX1278_hw_SetNSS(SX1278_hw_t * hw, int value) {
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 80010e4:	1e4b      	subs	r3, r1, #1
 80010e6:	425a      	negs	r2, r3
 80010e8:	8a01      	ldrh	r1, [r0, #16]
 80010ea:	415a      	adcs	r2, r3
 80010ec:	6940      	ldr	r0, [r0, #20]
 80010ee:	f7ff b9d5 	b.w	800049c <HAL_GPIO_WritePin>

080010f2 <SX1278_hw_init>:
void SX1278_hw_init(SX1278_hw_t * hw) {
 80010f2:	b510      	push	{r4, lr}
 80010f4:	4604      	mov	r4, r0
	SX1278_hw_SetNSS(hw, 1);
 80010f6:	2101      	movs	r1, #1
 80010f8:	f7ff fff4 	bl	80010e4 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 80010fc:	8821      	ldrh	r1, [r4, #0]
 80010fe:	6860      	ldr	r0, [r4, #4]
 8001100:	2201      	movs	r2, #1
}
 8001102:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8001106:	f7ff b9c9 	b.w	800049c <HAL_GPIO_WritePin>

0800110a <SX1278_hw_Reset>:
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}

void SX1278_hw_Reset(SX1278_hw_t * hw) {
 800110a:	b510      	push	{r4, lr}
 800110c:	4604      	mov	r4, r0
	SX1278_hw_SetNSS(hw, 1);
 800110e:	2101      	movs	r1, #1
 8001110:	f7ff ffe8 	bl	80010e4 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8001114:	8821      	ldrh	r1, [r4, #0]
 8001116:	2200      	movs	r2, #0
 8001118:	6860      	ldr	r0, [r4, #4]
 800111a:	f7ff f9bf 	bl	800049c <HAL_GPIO_WritePin>
	HAL_Delay(time);
 800111e:	2001      	movs	r0, #1
 8001120:	f7ff f85c 	bl	80001dc <HAL_Delay>

	delay_ms(1);

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8001124:	6860      	ldr	r0, [r4, #4]
 8001126:	8821      	ldrh	r1, [r4, #0]
 8001128:	2201      	movs	r2, #1
 800112a:	f7ff f9b7 	bl	800049c <HAL_GPIO_WritePin>

	delay_ms(100);
}
 800112e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_Delay(time);
 8001132:	2064      	movs	r0, #100	; 0x64
 8001134:	f7ff b852 	b.w	80001dc <HAL_Delay>

08001138 <SX1278_hw_SPICommand>:

void SX1278_hw_SPICommand(SX1278_hw_t * hw, uint8_t cmd) {
 8001138:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800113a:	4605      	mov	r5, r0
 800113c:	ac02      	add	r4, sp, #8
 800113e:	f804 1d01 	strb.w	r1, [r4, #-1]!
	SX1278_hw_SetNSS(hw, 0);
 8001142:	2100      	movs	r1, #0
 8001144:	f7ff ffce 	bl	80010e4 <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8001148:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800114c:	2201      	movs	r2, #1
 800114e:	4621      	mov	r1, r4
 8001150:	69a8      	ldr	r0, [r5, #24]
 8001152:	f7ff fc92 	bl	8000a7a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8001156:	69a8      	ldr	r0, [r5, #24]
 8001158:	f7ff fe35 	bl	8000dc6 <HAL_SPI_GetState>
 800115c:	2801      	cmp	r0, #1
 800115e:	d1fa      	bne.n	8001156 <SX1278_hw_SPICommand+0x1e>
		;
}
 8001160:	b003      	add	sp, #12
 8001162:	bd30      	pop	{r4, r5, pc}

08001164 <SX1278_SPIBurstWrite.part.1>:
		}
		SX1278_hw_SetNSS(module->hw, 1);
	}
}

void SX1278_SPIBurstWrite(SX1278_t * module, uint8_t addr, uint8_t* txBuf,
 8001164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001166:	460e      	mov	r6, r1
 8001168:	4604      	mov	r4, r0
 800116a:	461f      	mov	r7, r3
		uint8_t length) {
	unsigned char i;
	if (length <= 1) {
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 800116c:	2100      	movs	r1, #0
 800116e:	6800      	ldr	r0, [r0, #0]
void SX1278_SPIBurstWrite(SX1278_t * module, uint8_t addr, uint8_t* txBuf,
 8001170:	4615      	mov	r5, r2
		SX1278_hw_SetNSS(module->hw, 0);
 8001172:	f7ff ffb7 	bl	80010e4 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8001176:	f046 0180 	orr.w	r1, r6, #128	; 0x80
 800117a:	6820      	ldr	r0, [r4, #0]
 800117c:	f7ff ffdc 	bl	8001138 <SX1278_hw_SPICommand>
 8001180:	3f01      	subs	r7, #1
 8001182:	1e6e      	subs	r6, r5, #1
 8001184:	443d      	add	r5, r7
		for (i = 0; i < length; i++) {
 8001186:	42ae      	cmp	r6, r5
 8001188:	d105      	bne.n	8001196 <SX1278_SPIBurstWrite.part.1+0x32>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
		}
		SX1278_hw_SetNSS(module->hw, 1);
 800118a:	6820      	ldr	r0, [r4, #0]
 800118c:	2101      	movs	r1, #1
	}
}
 800118e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		SX1278_hw_SetNSS(module->hw, 1);
 8001192:	f7ff bfa7 	b.w	80010e4 <SX1278_hw_SetNSS>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 8001196:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800119a:	6820      	ldr	r0, [r4, #0]
 800119c:	f7ff ffcc 	bl	8001138 <SX1278_hw_SPICommand>
 80011a0:	e7f1      	b.n	8001186 <SX1278_SPIBurstWrite.part.1+0x22>

080011a2 <SX1278_hw_SPIReadByte>:
	uint8_t txByte = 0x00;
 80011a2:	2100      	movs	r1, #0
uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t * hw) {
 80011a4:	b530      	push	{r4, r5, lr}
 80011a6:	b085      	sub	sp, #20
	uint8_t rxByte = 0x00;
 80011a8:	ac04      	add	r4, sp, #16
 80011aa:	f804 1d01 	strb.w	r1, [r4, #-1]!
uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t * hw) {
 80011ae:	4605      	mov	r5, r0
	uint8_t txByte = 0x00;
 80011b0:	f88d 100e 	strb.w	r1, [sp, #14]
	SX1278_hw_SetNSS(hw, 0);
 80011b4:	f7ff ff96 	bl	80010e4 <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte ,&rxByte, 1, 1000);
 80011b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011bc:	4622      	mov	r2, r4
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	f10d 010e 	add.w	r1, sp, #14
 80011c4:	2301      	movs	r3, #1
 80011c6:	69a8      	ldr	r0, [r5, #24]
 80011c8:	f7ff fd00 	bl	8000bcc <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 80011cc:	69a8      	ldr	r0, [r5, #24]
 80011ce:	f7ff fdfa 	bl	8000dc6 <HAL_SPI_GetState>
 80011d2:	2801      	cmp	r0, #1
 80011d4:	d1fa      	bne.n	80011cc <SX1278_hw_SPIReadByte+0x2a>
}
 80011d6:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80011da:	b005      	add	sp, #20
 80011dc:	bd30      	pop	{r4, r5, pc}

080011de <SX1278_SPIRead>:
uint8_t SX1278_SPIRead(SX1278_t * module, uint8_t addr) {
 80011de:	b538      	push	{r3, r4, r5, lr}
 80011e0:	4604      	mov	r4, r0
	SX1278_hw_SPICommand(module->hw, addr);
 80011e2:	6800      	ldr	r0, [r0, #0]
 80011e4:	f7ff ffa8 	bl	8001138 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 80011e8:	6820      	ldr	r0, [r4, #0]
 80011ea:	f7ff ffda 	bl	80011a2 <SX1278_hw_SPIReadByte>
 80011ee:	4605      	mov	r5, r0
	SX1278_hw_SetNSS(module->hw, 1);
 80011f0:	2101      	movs	r1, #1
 80011f2:	6820      	ldr	r0, [r4, #0]
 80011f4:	f7ff ff76 	bl	80010e4 <SX1278_hw_SetNSS>
}
 80011f8:	4628      	mov	r0, r5
 80011fa:	bd38      	pop	{r3, r4, r5, pc}

080011fc <SX1278_SPIWrite>:
void SX1278_SPIWrite(SX1278_t * module, uint8_t addr, uint8_t cmd) {
 80011fc:	b570      	push	{r4, r5, r6, lr}
 80011fe:	4604      	mov	r4, r0
 8001200:	460e      	mov	r6, r1
 8001202:	4615      	mov	r5, r2
	SX1278_hw_SetNSS(module->hw, 0);
 8001204:	2100      	movs	r1, #0
 8001206:	6800      	ldr	r0, [r0, #0]
 8001208:	f7ff ff6c 	bl	80010e4 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 800120c:	f046 0180 	orr.w	r1, r6, #128	; 0x80
 8001210:	6820      	ldr	r0, [r4, #0]
 8001212:	f7ff ff91 	bl	8001138 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 8001216:	4629      	mov	r1, r5
 8001218:	6820      	ldr	r0, [r4, #0]
 800121a:	f7ff ff8d 	bl	8001138 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 800121e:	6820      	ldr	r0, [r4, #0]
 8001220:	2101      	movs	r1, #1
}
 8001222:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	SX1278_hw_SetNSS(module->hw, 1);
 8001226:	f7ff bf5d 	b.w	80010e4 <SX1278_hw_SetNSS>

0800122a <SX1278_SPIBurstRead>:
	if (length <= 1) {
 800122a:	2b01      	cmp	r3, #1
		uint8_t length) {
 800122c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800122e:	4605      	mov	r5, r0
 8001230:	460f      	mov	r7, r1
 8001232:	4616      	mov	r6, r2
 8001234:	461c      	mov	r4, r3
	if (length <= 1) {
 8001236:	d918      	bls.n	800126a <SX1278_SPIBurstRead+0x40>
		SX1278_hw_SetNSS(module->hw, 0);
 8001238:	2100      	movs	r1, #0
 800123a:	6800      	ldr	r0, [r0, #0]
 800123c:	f7ff ff52 	bl	80010e4 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 8001240:	4639      	mov	r1, r7
 8001242:	6828      	ldr	r0, [r5, #0]
 8001244:	f7ff ff78 	bl	8001138 <SX1278_hw_SPICommand>
 8001248:	3c01      	subs	r4, #1
 800124a:	b2e4      	uxtb	r4, r4
 800124c:	1e77      	subs	r7, r6, #1
 800124e:	4434      	add	r4, r6
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 8001250:	6828      	ldr	r0, [r5, #0]
 8001252:	f7ff ffa6 	bl	80011a2 <SX1278_hw_SPIReadByte>
 8001256:	f807 0f01 	strb.w	r0, [r7, #1]!
		for (i = 0; i < length; i++) {
 800125a:	42a7      	cmp	r7, r4
 800125c:	d1f8      	bne.n	8001250 <SX1278_SPIBurstRead+0x26>
		SX1278_hw_SetNSS(module->hw, 1);
 800125e:	6828      	ldr	r0, [r5, #0]
 8001260:	2101      	movs	r1, #1
}
 8001262:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		SX1278_hw_SetNSS(module->hw, 1);
 8001266:	f7ff bf3d 	b.w	80010e4 <SX1278_hw_SetNSS>
 800126a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800126c <SX1278_standby>:
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
	module->readBytes = 0;
	SX1278_standby(module); //Entry standby mode
}

void SX1278_standby(SX1278_t * module) {
 800126c:	b510      	push	{r4, lr}
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 800126e:	2209      	movs	r2, #9
 8001270:	2101      	movs	r1, #1
void SX1278_standby(SX1278_t * module) {
 8001272:	4604      	mov	r4, r0
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 8001274:	f7ff ffc2 	bl	80011fc <SX1278_SPIWrite>
	module->status = STANDBY;
 8001278:	2301      	movs	r3, #1
 800127a:	7263      	strb	r3, [r4, #9]
 800127c:	bd10      	pop	{r4, pc}

0800127e <SX1278_sleep>:
}

void SX1278_sleep(SX1278_t * module) {
 800127e:	b510      	push	{r4, lr}
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8001280:	2208      	movs	r2, #8
 8001282:	2101      	movs	r1, #1
void SX1278_sleep(SX1278_t * module) {
 8001284:	4604      	mov	r4, r0
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8001286:	f7ff ffb9 	bl	80011fc <SX1278_SPIWrite>
	module->status = SLEEP;
 800128a:	2300      	movs	r3, #0
 800128c:	7263      	strb	r3, [r4, #9]
 800128e:	bd10      	pop	{r4, pc}

08001290 <SX1278_entryLoRa>:
}

void SX1278_entryLoRa(SX1278_t * module) {
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8001290:	2288      	movs	r2, #136	; 0x88
 8001292:	2101      	movs	r1, #1
 8001294:	f7ff bfb2 	b.w	80011fc <SX1278_SPIWrite>

08001298 <SX1278_config>:
		uint8_t LoRa_Rate, uint8_t LoRa_BW) {
 8001298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800129c:	4604      	mov	r4, r0
 800129e:	460d      	mov	r5, r1
 80012a0:	4690      	mov	r8, r2
 80012a2:	461f      	mov	r7, r3
 80012a4:	f89d 6018 	ldrb.w	r6, [sp, #24]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 80012a8:	f7ff ffe9 	bl	800127e <SX1278_sleep>
	HAL_Delay(time);
 80012ac:	200f      	movs	r0, #15
 80012ae:	f7fe ff95 	bl	80001dc <HAL_Delay>
	SX1278_entryLoRa(module);
 80012b2:	4620      	mov	r0, r4
 80012b4:	f7ff ffec 	bl	8001290 <SX1278_entryLoRa>
 80012b8:	4a32      	ldr	r2, [pc, #200]	; (8001384 <SX1278_config+0xec>)
			(uint8_t*) SX1278_Frequency[frequency], 3); //setting  frequency parameter
 80012ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80012be:	442a      	add	r2, r5
 80012c0:	2303      	movs	r3, #3
 80012c2:	2106      	movs	r1, #6
 80012c4:	4620      	mov	r0, r4
 80012c6:	f7ff ff4d 	bl	8001164 <SX1278_SPIBurstWrite.part.1>
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[power]); //Setting output power parameter
 80012ca:	4b2f      	ldr	r3, [pc, #188]	; (8001388 <SX1278_config+0xf0>)
 80012cc:	2109      	movs	r1, #9
 80012ce:	f813 2008 	ldrb.w	r2, [r3, r8]
 80012d2:	4620      	mov	r0, r4
 80012d4:	f7ff ff92 	bl	80011fc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 80012d8:	220b      	movs	r2, #11
 80012da:	4620      	mov	r0, r4
 80012dc:	4611      	mov	r1, r2
 80012de:	f7ff ff8d 	bl	80011fc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 80012e2:	2223      	movs	r2, #35	; 0x23
 80012e4:	210c      	movs	r1, #12
 80012e6:	4620      	mov	r0, r4
 80012e8:	f7ff ff88 	bl	80011fc <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[LoRa_Rate] == 6) {	//SFactor=6
 80012ec:	4b27      	ldr	r3, [pc, #156]	; (800138c <SX1278_config+0xf4>)
 80012ee:	5ddd      	ldrb	r5, [r3, r7]
 80012f0:	4b27      	ldr	r3, [pc, #156]	; (8001390 <SX1278_config+0xf8>)
 80012f2:	2d06      	cmp	r5, #6
				((SX1278_LoRaBandwidth[LoRa_BW] << 4) + (SX1278_CR << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80012f4:	5d9a      	ldrb	r2, [r3, r6]
 80012f6:	ea4f 1202 	mov.w	r2, r2, lsl #4
	if (SX1278_SpreadFactor[LoRa_Rate] == 6) {	//SFactor=6
 80012fa:	d137      	bne.n	800136c <SX1278_config+0xd4>
		SX1278_SPIWrite(module,
 80012fc:	3203      	adds	r2, #3
 80012fe:	b2d2      	uxtb	r2, r2
 8001300:	211d      	movs	r1, #29
 8001302:	4620      	mov	r0, r4
 8001304:	f7ff ff7a 	bl	80011fc <SX1278_SPIWrite>
		SX1278_SPIWrite(module,
 8001308:	2267      	movs	r2, #103	; 0x67
 800130a:	211e      	movs	r1, #30
 800130c:	4620      	mov	r0, r4
 800130e:	f7ff ff75 	bl	80011fc <SX1278_SPIWrite>
		tmp = SX1278_SPIRead(module, 0x31);
 8001312:	2131      	movs	r1, #49	; 0x31
 8001314:	4620      	mov	r0, r4
 8001316:	f7ff ff62 	bl	80011de <SX1278_SPIRead>
		tmp &= 0xF8;
 800131a:	f000 02f8 	and.w	r2, r0, #248	; 0xf8
		SX1278_SPIWrite(module, 0x31, tmp);
 800131e:	f042 0205 	orr.w	r2, r2, #5
 8001322:	2131      	movs	r1, #49	; 0x31
 8001324:	4620      	mov	r0, r4
 8001326:	f7ff ff69 	bl	80011fc <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 800132a:	220c      	movs	r2, #12
 800132c:	2137      	movs	r1, #55	; 0x37
		SX1278_SPIWrite(module,
 800132e:	4620      	mov	r0, r4
 8001330:	f7ff ff64 	bl	80011fc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0xFF); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 8001334:	4620      	mov	r0, r4
 8001336:	22ff      	movs	r2, #255	; 0xff
 8001338:	211f      	movs	r1, #31
 800133a:	f7ff ff5f 	bl	80011fc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 800133e:	4620      	mov	r0, r4
 8001340:	2200      	movs	r2, #0
 8001342:	2120      	movs	r1, #32
 8001344:	f7ff ff5a 	bl	80011fc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 12); //RegPreambleLsb 8+4=12byte Preamble
 8001348:	4620      	mov	r0, r4
 800134a:	220c      	movs	r2, #12
 800134c:	2121      	movs	r1, #33	; 0x21
 800134e:	f7ff ff55 	bl	80011fc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8001352:	4620      	mov	r0, r4
 8001354:	2201      	movs	r2, #1
 8001356:	2141      	movs	r1, #65	; 0x41
 8001358:	f7ff ff50 	bl	80011fc <SX1278_SPIWrite>
	module->readBytes = 0;
 800135c:	2300      	movs	r3, #0
	SX1278_standby(module); //Entry standby mode
 800135e:	4620      	mov	r0, r4
	module->readBytes = 0;
 8001360:	f884 310a 	strb.w	r3, [r4, #266]	; 0x10a
}
 8001364:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	SX1278_standby(module); //Entry standby mode
 8001368:	f7ff bf80 	b.w	800126c <SX1278_standby>
		SX1278_SPIWrite(module,
 800136c:	3202      	adds	r2, #2
 800136e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001372:	211d      	movs	r1, #29
 8001374:	4620      	mov	r0, r4
 8001376:	f7ff ff41 	bl	80011fc <SX1278_SPIWrite>
				((SX1278_SpreadFactor[LoRa_Rate] << 4) + (SX1278_CRC << 2)
 800137a:	012a      	lsls	r2, r5, #4
		SX1278_SPIWrite(module,
 800137c:	3207      	adds	r2, #7
 800137e:	b2d2      	uxtb	r2, r2
 8001380:	211e      	movs	r1, #30
 8001382:	e7d4      	b.n	800132e <SX1278_config+0x96>
 8001384:	08001a30 	.word	0x08001a30
 8001388:	08001a3d 	.word	0x08001a3d
 800138c:	08001a41 	.word	0x08001a41
 8001390:	08001a33 	.word	0x08001a33

08001394 <SX1278_defaultConfig>:
void SX1278_defaultConfig(SX1278_t * module) {
 8001394:	b513      	push	{r0, r1, r4, lr}
	SX1278_config(module, module->frequency, module->power, module->LoRa_Rate,
 8001396:	79c4      	ldrb	r4, [r0, #7]
 8001398:	7983      	ldrb	r3, [r0, #6]
 800139a:	7942      	ldrb	r2, [r0, #5]
 800139c:	7901      	ldrb	r1, [r0, #4]
 800139e:	9400      	str	r4, [sp, #0]
 80013a0:	f7ff ff7a 	bl	8001298 <SX1278_config>
}
 80013a4:	b002      	add	sp, #8
 80013a6:	bd10      	pop	{r4, pc}

080013a8 <SX1278_clearLoRaIrq>:
}

void SX1278_clearLoRaIrq(SX1278_t * module) {
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 80013a8:	22ff      	movs	r2, #255	; 0xff
 80013aa:	2112      	movs	r1, #18
 80013ac:	f7ff bf26 	b.w	80011fc <SX1278_SPIWrite>

080013b0 <SX1278_LoRaEntryRx>:
}

int SX1278_LoRaEntryRx(SX1278_t * module, uint8_t length, uint32_t timeout) {
 80013b0:	b570      	push	{r4, r5, r6, lr}
 80013b2:	4604      	mov	r4, r0
 80013b4:	460e      	mov	r6, r1
	uint8_t addr;

	module->packetLength = length;
 80013b6:	7221      	strb	r1, [r4, #8]
int SX1278_LoRaEntryRx(SX1278_t * module, uint8_t length, uint32_t timeout) {
 80013b8:	4615      	mov	r5, r2

	SX1278_defaultConfig(module);		//Setting base parameter
 80013ba:	f7ff ffeb 	bl	8001394 <SX1278_defaultConfig>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 80013be:	2284      	movs	r2, #132	; 0x84
 80013c0:	214d      	movs	r1, #77	; 0x4d
 80013c2:	4620      	mov	r0, r4
 80013c4:	f7ff ff1a 	bl	80011fc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 80013c8:	22ff      	movs	r2, #255	; 0xff
 80013ca:	2124      	movs	r1, #36	; 0x24
 80013cc:	4620      	mov	r0, r4
 80013ce:	f7ff ff15 	bl	80011fc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 80013d2:	2201      	movs	r2, #1
 80013d4:	2140      	movs	r1, #64	; 0x40
 80013d6:	4620      	mov	r0, r4
 80013d8:	f7ff ff10 	bl	80011fc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 80013dc:	223f      	movs	r2, #63	; 0x3f
 80013de:	2111      	movs	r1, #17
 80013e0:	4620      	mov	r0, r4
 80013e2:	f7ff ff0b 	bl	80011fc <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 80013e6:	4620      	mov	r0, r4
 80013e8:	f7ff ffde 	bl	80013a8 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 80013ec:	4632      	mov	r2, r6
 80013ee:	2122      	movs	r1, #34	; 0x22
 80013f0:	4620      	mov	r0, r4
 80013f2:	f7ff ff03 	bl	80011fc <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 80013f6:	210f      	movs	r1, #15
 80013f8:	4620      	mov	r0, r4
 80013fa:	f7ff fef0 	bl	80011de <SX1278_SPIRead>
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 80013fe:	210d      	movs	r1, #13
 8001400:	4602      	mov	r2, r0
 8001402:	4620      	mov	r0, r4
 8001404:	f7ff fefa 	bl	80011fc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 8001408:	228d      	movs	r2, #141	; 0x8d
 800140a:	2101      	movs	r1, #1
 800140c:	4620      	mov	r0, r4
 800140e:	f7ff fef5 	bl	80011fc <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	f884 310a 	strb.w	r3, [r4, #266]	; 0x10a

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8001418:	2118      	movs	r1, #24
 800141a:	4620      	mov	r0, r4
 800141c:	f7ff fedf 	bl	80011de <SX1278_SPIRead>
 8001420:	0743      	lsls	r3, r0, #29
 8001422:	d503      	bpl.n	800142c <SX1278_LoRaEntryRx+0x7c>
			module->status = RX;
 8001424:	2303      	movs	r3, #3
			return 1;
 8001426:	2001      	movs	r0, #1
			module->status = RX;
 8001428:	7263      	strb	r3, [r4, #9]
			return 1;
 800142a:	bd70      	pop	{r4, r5, r6, pc}
		}
		if (--timeout == 0) {
 800142c:	3d01      	subs	r5, #1
 800142e:	d107      	bne.n	8001440 <SX1278_LoRaEntryRx+0x90>
			SX1278_hw_Reset(module->hw);
 8001430:	6820      	ldr	r0, [r4, #0]
 8001432:	f7ff fe6a 	bl	800110a <SX1278_hw_Reset>
			SX1278_defaultConfig(module);
 8001436:	4620      	mov	r0, r4
 8001438:	f7ff ffac 	bl	8001394 <SX1278_defaultConfig>
			return 0;
 800143c:	4628      	mov	r0, r5
 800143e:	bd70      	pop	{r4, r5, r6, pc}
	HAL_Delay(time);
 8001440:	2001      	movs	r0, #1
 8001442:	f7fe fecb 	bl	80001dc <HAL_Delay>
 8001446:	e7e7      	b.n	8001418 <SX1278_LoRaEntryRx+0x68>

08001448 <SX1278_LoRaRxPacket>:
		}
		delay_ms(1);
	}
}

uint8_t SX1278_LoRaRxPacket(SX1278_t * module, uint32_t timeout) {
 8001448:	b570      	push	{r4, r5, r6, lr}
 800144a:	4604      	mov	r4, r0
 800144c:	460d      	mov	r5, r1

	uint32_t IRQflags = 0;

	while(1)
	{
		IRQflags = SX1278_SPIRead(module, LR_RegIrqFlags);
 800144e:	2112      	movs	r1, #18
 8001450:	4620      	mov	r0, r4
 8001452:	f7ff fec4 	bl	80011de <SX1278_SPIRead>

		// Get RxDone IRQ
		if ( IRQflags & ( 1U << 6 ) )
 8001456:	0643      	lsls	r3, r0, #25
 8001458:	d527      	bpl.n	80014aa <SX1278_LoRaRxPacket+0x62>
		{
			memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 800145a:	f104 060a 	add.w	r6, r4, #10
 800145e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001462:	2100      	movs	r1, #0
 8001464:	4630      	mov	r0, r6
 8001466:	f000 fab8 	bl	80019da <memset>

			addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 800146a:	2110      	movs	r1, #16
 800146c:	4620      	mov	r0, r4
 800146e:	f7ff feb6 	bl	80011de <SX1278_SPIRead>
			SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 8001472:	210d      	movs	r1, #13
 8001474:	4602      	mov	r2, r0
 8001476:	4620      	mov	r0, r4
 8001478:	f7ff fec0 	bl	80011fc <SX1278_SPIWrite>

			if (module->LoRa_Rate == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 800147c:	79a3      	ldrb	r3, [r4, #6]
 800147e:	b973      	cbnz	r3, 800149e <SX1278_LoRaRxPacket+0x56>
				packet_size = module->packetLength;
 8001480:	7a25      	ldrb	r5, [r4, #8]
			} else {
				packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
			}

			SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 8001482:	462b      	mov	r3, r5
 8001484:	4632      	mov	r2, r6
 8001486:	2100      	movs	r1, #0
 8001488:	4620      	mov	r0, r4
 800148a:	f7ff fece 	bl	800122a <SX1278_SPIBurstRead>
			module->readBytes = packet_size;
			SX1278_clearLoRaIrq(module);
 800148e:	4620      	mov	r0, r4
			module->readBytes = packet_size;
 8001490:	f884 510a 	strb.w	r5, [r4, #266]	; 0x10a
			SX1278_clearLoRaIrq(module);
 8001494:	f7ff ff88 	bl	80013a8 <SX1278_clearLoRaIrq>

			return module->readBytes;
 8001498:	f894 010a 	ldrb.w	r0, [r4, #266]	; 0x10a
 800149c:	bd70      	pop	{r4, r5, r6, pc}
				packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 800149e:	2113      	movs	r1, #19
 80014a0:	4620      	mov	r0, r4
 80014a2:	f7ff fe9c 	bl	80011de <SX1278_SPIRead>
 80014a6:	4605      	mov	r5, r0
 80014a8:	e7eb      	b.n	8001482 <SX1278_LoRaRxPacket+0x3a>
		}
		else if (--timeout == 0)
 80014aa:	3d01      	subs	r5, #1
 80014ac:	d003      	beq.n	80014b6 <SX1278_LoRaRxPacket+0x6e>
	HAL_Delay(time);
 80014ae:	2001      	movs	r0, #1
 80014b0:	f7fe fe94 	bl	80001dc <HAL_Delay>
 80014b4:	e7cb      	b.n	800144e <SX1278_LoRaRxPacket+0x6>
		{
			return 0;
 80014b6:	4628      	mov	r0, r5
		}

		delay_ms(1);

	}
}
 80014b8:	bd70      	pop	{r4, r5, r6, pc}

080014ba <SX1278_begin>:
		delay_ms(1);
	}
}

void SX1278_begin(SX1278_t * module, uint8_t frequency, uint8_t power,
		uint8_t LoRa_Rate, uint8_t LoRa_BW, uint8_t packetLength) {
 80014ba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80014be:	4604      	mov	r4, r0
 80014c0:	4689      	mov	r9, r1
 80014c2:	4690      	mov	r8, r2
 80014c4:	461f      	mov	r7, r3
 80014c6:	f89d 6020 	ldrb.w	r6, [sp, #32]
 80014ca:	f89d 5024 	ldrb.w	r5, [sp, #36]	; 0x24
	SX1278_hw_init(module->hw);
 80014ce:	6800      	ldr	r0, [r0, #0]
 80014d0:	f7ff fe0f 	bl	80010f2 <SX1278_hw_init>
	module->frequency = frequency;
 80014d4:	f884 9004 	strb.w	r9, [r4, #4]
	module->power = power;
 80014d8:	f884 8005 	strb.w	r8, [r4, #5]
	module->LoRa_Rate = LoRa_Rate;
 80014dc:	71a7      	strb	r7, [r4, #6]
	module->LoRa_BW = LoRa_BW;
 80014de:	71e6      	strb	r6, [r4, #7]
	module->packetLength = packetLength;
 80014e0:	7225      	strb	r5, [r4, #8]
	SX1278_defaultConfig(module);
 80014e2:	4620      	mov	r0, r4
}
 80014e4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	SX1278_defaultConfig(module);
 80014e8:	f7ff bf54 	b.w	8001394 <SX1278_defaultConfig>

080014ec <SX1278_read>:

uint8_t SX1278_available(SX1278_t * module) {
	return SX1278_LoRaRxPacket(module, 2000);
}

uint8_t SX1278_read(SX1278_t * module, uint8_t* rxBuf, uint8_t length) {
 80014ec:	b570      	push	{r4, r5, r6, lr}
 80014ee:	460e      	mov	r6, r1
	if (length != module->readBytes)
 80014f0:	f890 410a 	ldrb.w	r4, [r0, #266]	; 0x10a
uint8_t SX1278_read(SX1278_t * module, uint8_t* rxBuf, uint8_t length) {
 80014f4:	4605      	mov	r5, r0
		length = module->readBytes;
	memcpy(rxBuf, module->rxBuffer, length);
 80014f6:	f100 010a 	add.w	r1, r0, #10
 80014fa:	4622      	mov	r2, r4
 80014fc:	4630      	mov	r0, r6
 80014fe:	f000 fa61 	bl	80019c4 <memcpy>
	rxBuf[length] = '\0';
 8001502:	2300      	movs	r3, #0
 8001504:	5533      	strb	r3, [r6, r4]
	module->readBytes = 0;
 8001506:	f885 310a 	strb.w	r3, [r5, #266]	; 0x10a
	return length;
}
 800150a:	4620      	mov	r0, r4
 800150c:	bd70      	pop	{r4, r5, r6, pc}

0800150e <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800150e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
{
 8001512:	b510      	push	{r4, lr}
 8001514:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001516:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001518:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800151a:	2100      	movs	r1, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800151c:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800151e:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8001520:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001524:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001526:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001528:	9108      	str	r1, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800152a:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800152c:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 800152e:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001530:	f7fe ffba 	bl	80004a8 <HAL_RCC_OscConfig>
 8001534:	b100      	cbz	r0, 8001538 <SystemClock_Config+0x2a>
 8001536:	e7fe      	b.n	8001536 <SystemClock_Config+0x28>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001538:	230f      	movs	r3, #15
 800153a:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800153c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001540:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001542:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001544:	4621      	mov	r1, r4
 8001546:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001548:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800154a:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800154c:	f7ff f974 	bl	8000838 <HAL_RCC_ClockConfig>
 8001550:	4604      	mov	r4, r0
 8001552:	b100      	cbz	r0, 8001556 <SystemClock_Config+0x48>
 8001554:	e7fe      	b.n	8001554 <SystemClock_Config+0x46>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001556:	f7ff fa13 	bl	8000980 <HAL_RCC_GetHCLKFreq>
 800155a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800155e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001562:	f7fe fe93 	bl	800028c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001566:	2004      	movs	r0, #4
 8001568:	f7fe fea6 	bl	80002b8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800156c:	4622      	mov	r2, r4
 800156e:	4621      	mov	r1, r4
 8001570:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001574:	f7fe fe56 	bl	8000224 <HAL_NVIC_SetPriority>
}
 8001578:	b010      	add	sp, #64	; 0x40
 800157a:	bd10      	pop	{r4, pc}

0800157c <main>:
{
 800157c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800157e:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
  HAL_Init();
 8001582:	f7fe fe07 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 8001586:	f7ff ffc2 	bl	800150e <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800158a:	4b6d      	ldr	r3, [pc, #436]	; (8001740 <main+0x1c4>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800158c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001590:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001592:	486c      	ldr	r0, [pc, #432]	; (8001744 <main+0x1c8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001594:	f042 0210 	orr.w	r2, r2, #16
 8001598:	619a      	str	r2, [r3, #24]
 800159a:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(SPI_NSS_GPIO_Port, SPI_NSS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2500      	movs	r5, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800159e:	f002 0210 	and.w	r2, r2, #16
 80015a2:	9202      	str	r2, [sp, #8]
 80015a4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015a6:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a8:	2402      	movs	r4, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015aa:	f042 0220 	orr.w	r2, r2, #32
 80015ae:	619a      	str	r2, [r3, #24]
 80015b0:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b2:	2701      	movs	r7, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015b4:	f002 0220 	and.w	r2, r2, #32
 80015b8:	9203      	str	r2, [sp, #12]
 80015ba:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015bc:	699a      	ldr	r2, [r3, #24]
 80015be:	f042 0208 	orr.w	r2, r2, #8
 80015c2:	619a      	str	r2, [r3, #24]
 80015c4:	699a      	ldr	r2, [r3, #24]
 80015c6:	f002 0208 	and.w	r2, r2, #8
 80015ca:	9204      	str	r2, [sp, #16]
 80015cc:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ce:	699a      	ldr	r2, [r3, #24]
 80015d0:	f042 0204 	orr.w	r2, r2, #4
 80015d4:	619a      	str	r2, [r3, #24]
 80015d6:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80015d8:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015da:	f003 0304 	and.w	r3, r3, #4
 80015de:	9305      	str	r3, [sp, #20]
 80015e0:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80015e2:	f7fe ff5b 	bl	800049c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LoRa_Reset_GPIO_Port, LoRa_Reset_Pin, GPIO_PIN_RESET);
 80015e6:	2200      	movs	r2, #0
 80015e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015ec:	4856      	ldr	r0, [pc, #344]	; (8001748 <main+0x1cc>)
 80015ee:	f7fe ff55 	bl	800049c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI_NSS_GPIO_Port, SPI_NSS_Pin, GPIO_PIN_RESET);
 80015f2:	2200      	movs	r2, #0
 80015f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015f8:	4854      	ldr	r0, [pc, #336]	; (800174c <main+0x1d0>)
 80015fa:	f7fe ff4f 	bl	800049c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80015fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001602:	a94d      	add	r1, sp, #308	; 0x134
 8001604:	484f      	ldr	r0, [pc, #316]	; (8001744 <main+0x1c8>)
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001606:	934d      	str	r3, [sp, #308]	; 0x134
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001608:	9450      	str	r4, [sp, #320]	; 0x140
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160a:	974e      	str	r7, [sp, #312]	; 0x138
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	954f      	str	r5, [sp, #316]	; 0x13c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800160e:	f7fe fe65 	bl	80002dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LoRa_Reset_Pin */
  GPIO_InitStruct.Pin = LoRa_Reset_Pin;
 8001612:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LoRa_Reset_GPIO_Port, &GPIO_InitStruct);
 8001616:	a94d      	add	r1, sp, #308	; 0x134
 8001618:	484b      	ldr	r0, [pc, #300]	; (8001748 <main+0x1cc>)
  GPIO_InitStruct.Pin = LoRa_Reset_Pin;
 800161a:	934d      	str	r3, [sp, #308]	; 0x134
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161c:	9450      	str	r4, [sp, #320]	; 0x140
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161e:	974e      	str	r7, [sp, #312]	; 0x138
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	954f      	str	r5, [sp, #316]	; 0x13c
  HAL_GPIO_Init(LoRa_Reset_GPIO_Port, &GPIO_InitStruct);
 8001622:	f7fe fe5b 	bl	80002dc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_NSS_Pin */
  GPIO_InitStruct.Pin = SPI_NSS_Pin;
 8001626:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(SPI_NSS_GPIO_Port, &GPIO_InitStruct);
 800162a:	4848      	ldr	r0, [pc, #288]	; (800174c <main+0x1d0>)
 800162c:	a94d      	add	r1, sp, #308	; 0x134
  GPIO_InitStruct.Pin = SPI_NSS_Pin;
 800162e:	934d      	str	r3, [sp, #308]	; 0x134
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001630:	9450      	str	r4, [sp, #320]	; 0x140
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001632:	974e      	str	r7, [sp, #312]	; 0x138
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	954f      	str	r5, [sp, #316]	; 0x13c
  HAL_GPIO_Init(SPI_NSS_GPIO_Port, &GPIO_InitStruct);
 8001636:	f7fe fe51 	bl	80002dc <HAL_GPIO_Init>
  huart1.Init.BaudRate = 115200;
 800163a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Instance = USART1;
 800163e:	4c44      	ldr	r4, [pc, #272]	; (8001750 <main+0x1d4>)
  huart1.Init.BaudRate = 115200;
 8001640:	4844      	ldr	r0, [pc, #272]	; (8001754 <main+0x1d8>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001642:	60a5      	str	r5, [r4, #8]
  huart1.Init.BaudRate = 115200;
 8001644:	e884 0009 	stmia.w	r4, {r0, r3}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001648:	230c      	movs	r3, #12
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800164a:	4620      	mov	r0, r4
  huart1.Init.StopBits = UART_STOPBITS_1;
 800164c:	60e5      	str	r5, [r4, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800164e:	6125      	str	r5, [r4, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001650:	6163      	str	r3, [r4, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001652:	61a5      	str	r5, [r4, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001654:	61e5      	str	r5, [r4, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001656:	f7ff fcbb 	bl	8000fd0 <HAL_UART_Init>
 800165a:	b100      	cbz	r0, 800165e <main+0xe2>
 800165c:	e7fe      	b.n	800165c <main+0xe0>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800165e:	f44f 7282 	mov.w	r2, #260	; 0x104
  hspi1.Instance = SPI1;
 8001662:	4b3d      	ldr	r3, [pc, #244]	; (8001758 <main+0x1dc>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001664:	493d      	ldr	r1, [pc, #244]	; (800175c <main+0x1e0>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001666:	6098      	str	r0, [r3, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001668:	e883 0006 	stmia.w	r3, {r1, r2}
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800166c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001670:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001672:	2218      	movs	r2, #24
 8001674:	61da      	str	r2, [r3, #28]
  hspi1.Init.CRCPolynomial = 10;
 8001676:	220a      	movs	r2, #10
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001678:	60d8      	str	r0, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800167a:	6118      	str	r0, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800167c:	6158      	str	r0, [r3, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800167e:	6218      	str	r0, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001680:	6258      	str	r0, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001682:	6298      	str	r0, [r3, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001684:	4618      	mov	r0, r3
  hspi1.Init.CRCPolynomial = 10;
 8001686:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001688:	f7ff fba0 	bl	8000dcc <HAL_SPI_Init>
 800168c:	4686      	mov	lr, r0
 800168e:	b100      	cbz	r0, 8001692 <main+0x116>
 8001690:	e7fe      	b.n	8001690 <main+0x114>
  SX1278_hw_t LoRaHW = {  .nss =   { .pin  = SPI_NSS_Pin,
 8001692:	f10d 0c18 	add.w	ip, sp, #24
 8001696:	4665      	mov	r5, ip
 8001698:	4e31      	ldr	r6, [pc, #196]	; (8001760 <main+0x1e4>)
  LoRa.hw = &LoRaHW;
 800169a:	f8cd c134 	str.w	ip, [sp, #308]	; 0x134
  SX1278_hw_t LoRaHW = {  .nss =   { .pin  = SPI_NSS_Pin,
 800169e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80016a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016a2:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
  SX1278_begin(&LoRa, SX1278_433MHZ, SX1278_POWER_17DBM, SX1278_LORA_SF_12,SX1278_LORA_BW_125KHZ, 6);
 80016a6:	2307      	movs	r3, #7
  SX1278_hw_t LoRaHW = {  .nss =   { .pin  = SPI_NSS_Pin,
 80016a8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  SX1278_begin(&LoRa, SX1278_433MHZ, SX1278_POWER_17DBM, SX1278_LORA_SF_12,SX1278_LORA_BW_125KHZ, 6);
 80016ac:	2506      	movs	r5, #6
 80016ae:	4671      	mov	r1, lr
 80016b0:	e88d 0028 	stmia.w	sp, {r3, r5}
 80016b4:	463a      	mov	r2, r7
 80016b6:	462b      	mov	r3, r5
 80016b8:	a84d      	add	r0, sp, #308	; 0x134
 80016ba:	f7ff fefe 	bl	80014ba <SX1278_begin>
  ret = SX1278_LoRaEntryRx(&LoRa, 6, 2000);
 80016be:	4629      	mov	r1, r5
 80016c0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80016c4:	a84d      	add	r0, sp, #308	; 0x134
 80016c6:	f7ff fe73 	bl	80013b0 <SX1278_LoRaEntryRx>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80016ca:	4d1e      	ldr	r5, [pc, #120]	; (8001744 <main+0x1c8>)
		ret = SX1278_LoRaRxPacket(&LoRa, 2000);
 80016cc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80016d0:	a84d      	add	r0, sp, #308	; 0x134
 80016d2:	f7ff feb9 	bl	8001448 <SX1278_LoRaRxPacket>
		if (ret > 0) {
 80016d6:	4606      	mov	r6, r0
 80016d8:	b368      	cbz	r0, 8001736 <main+0x1ba>
		  SX1278_read(&LoRa, (uint8_t *) buffer, ret);
 80016da:	4602      	mov	r2, r0
 80016dc:	a90d      	add	r1, sp, #52	; 0x34
 80016de:	a84d      	add	r0, sp, #308	; 0x134
 80016e0:	f7ff ff04 	bl	80014ec <SX1278_read>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80016e4:	2201      	movs	r2, #1
 80016e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016ea:	4628      	mov	r0, r5
 80016ec:	f7fe fed6 	bl	800049c <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 80016f0:	2064      	movs	r0, #100	; 0x64
 80016f2:	f7fe fd73 	bl	80001dc <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80016f6:	2200      	movs	r2, #0
 80016f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016fc:	4628      	mov	r0, r5
 80016fe:	f7fe fecd 	bl	800049c <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 8001702:	2064      	movs	r0, #100	; 0x64
 8001704:	f7fe fd6a 	bl	80001dc <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001708:	2201      	movs	r2, #1
 800170a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800170e:	4628      	mov	r0, r5
 8001710:	f7fe fec4 	bl	800049c <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 8001714:	2064      	movs	r0, #100	; 0x64
 8001716:	f7fe fd61 	bl	80001dc <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800171a:	2200      	movs	r2, #0
 800171c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001720:	4628      	mov	r0, r5
 8001722:	f7fe febb 	bl	800049c <HAL_GPIO_WritePin>
		  HAL_UART_Transmit(&huart1, LoRa.rxBuffer, ret, 1000);
 8001726:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800172a:	b2b2      	uxth	r2, r6
 800172c:	f50d 719f 	add.w	r1, sp, #318	; 0x13e
 8001730:	4620      	mov	r0, r4
 8001732:	f7ff fc7b 	bl	800102c <HAL_UART_Transmit>
		HAL_Delay(1000);
 8001736:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800173a:	f7fe fd4f 	bl	80001dc <HAL_Delay>
		ret = SX1278_LoRaRxPacket(&LoRa, 2000);
 800173e:	e7c5      	b.n	80016cc <main+0x150>
 8001740:	40021000 	.word	0x40021000
 8001744:	40011000 	.word	0x40011000
 8001748:	40010c00 	.word	0x40010c00
 800174c:	40010800 	.word	0x40010800
 8001750:	2000002c 	.word	0x2000002c
 8001754:	40013800 	.word	0x40013800
 8001758:	2000006c 	.word	0x2000006c
 800175c:	40013000 	.word	0x40013000
 8001760:	08001a14 	.word	0x08001a14

08001764 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001764:	4b25      	ldr	r3, [pc, #148]	; (80017fc <HAL_MspInit+0x98>)
{
 8001766:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001768:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800176a:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 800176c:	f042 0201 	orr.w	r2, r2, #1
 8001770:	619a      	str	r2, [r3, #24]
 8001772:	699a      	ldr	r2, [r3, #24]
 8001774:	f002 0201 	and.w	r2, r2, #1
 8001778:	9200      	str	r2, [sp, #0]
 800177a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800177c:	69da      	ldr	r2, [r3, #28]
 800177e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001782:	61da      	str	r2, [r3, #28]
 8001784:	69db      	ldr	r3, [r3, #28]
 8001786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178a:	9301      	str	r3, [sp, #4]
 800178c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800178e:	f7fe fd37 	bl	8000200 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001792:	2200      	movs	r2, #0
 8001794:	f06f 000b 	mvn.w	r0, #11
 8001798:	4611      	mov	r1, r2
 800179a:	f7fe fd43 	bl	8000224 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800179e:	2200      	movs	r2, #0
 80017a0:	f06f 000a 	mvn.w	r0, #10
 80017a4:	4611      	mov	r1, r2
 80017a6:	f7fe fd3d 	bl	8000224 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80017aa:	2200      	movs	r2, #0
 80017ac:	f06f 0009 	mvn.w	r0, #9
 80017b0:	4611      	mov	r1, r2
 80017b2:	f7fe fd37 	bl	8000224 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80017b6:	2200      	movs	r2, #0
 80017b8:	f06f 0004 	mvn.w	r0, #4
 80017bc:	4611      	mov	r1, r2
 80017be:	f7fe fd31 	bl	8000224 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80017c2:	2200      	movs	r2, #0
 80017c4:	f06f 0003 	mvn.w	r0, #3
 80017c8:	4611      	mov	r1, r2
 80017ca:	f7fe fd2b 	bl	8000224 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80017ce:	2200      	movs	r2, #0
 80017d0:	f06f 0001 	mvn.w	r0, #1
 80017d4:	4611      	mov	r1, r2
 80017d6:	f7fe fd25 	bl	8000224 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80017da:	2200      	movs	r2, #0
 80017dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017e0:	4611      	mov	r1, r2
 80017e2:	f7fe fd1f 	bl	8000224 <HAL_NVIC_SetPriority>

    /**DISABLE: JTAG-DP Disabled and SW-DP Disabled 
    */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80017e6:	4a06      	ldr	r2, [pc, #24]	; (8001800 <HAL_MspInit+0x9c>)
 80017e8:	6853      	ldr	r3, [r2, #4]
 80017ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80017f2:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017f4:	b003      	add	sp, #12
 80017f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80017fa:	bf00      	nop
 80017fc:	40021000 	.word	0x40021000
 8001800:	40010000 	.word	0x40010000

08001804 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001804:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 8001806:	6802      	ldr	r2, [r0, #0]
 8001808:	4b15      	ldr	r3, [pc, #84]	; (8001860 <HAL_SPI_MspInit+0x5c>)
 800180a:	429a      	cmp	r2, r3
 800180c:	d124      	bne.n	8001858 <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800180e:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8001812:	699a      	ldr	r2, [r3, #24]
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001814:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001816:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800181a:	619a      	str	r2, [r3, #24]
 800181c:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800181e:	4811      	ldr	r0, [pc, #68]	; (8001864 <HAL_SPI_MspInit+0x60>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001820:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001824:	9301      	str	r3, [sp, #4]
 8001826:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001828:	2328      	movs	r3, #40	; 0x28
 800182a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182c:	2302      	movs	r3, #2
 800182e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001830:	2303      	movs	r3, #3
 8001832:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001834:	f7fe fd52 	bl	80002dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001838:	2310      	movs	r3, #16
 800183a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800183c:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183e:	a902      	add	r1, sp, #8
 8001840:	4808      	ldr	r0, [pc, #32]	; (8001864 <HAL_SPI_MspInit+0x60>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001842:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001846:	f7fe fd49 	bl	80002dc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 800184a:	4a07      	ldr	r2, [pc, #28]	; (8001868 <HAL_SPI_MspInit+0x64>)
 800184c:	6853      	ldr	r3, [r2, #4]
 800184e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001852:	f043 0301 	orr.w	r3, r3, #1
 8001856:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001858:	b007      	add	sp, #28
 800185a:	f85d fb04 	ldr.w	pc, [sp], #4
 800185e:	bf00      	nop
 8001860:	40013000 	.word	0x40013000
 8001864:	40010c00 	.word	0x40010c00
 8001868:	40010000 	.word	0x40010000

0800186c <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800186c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800186e:	6802      	ldr	r2, [r0, #0]
 8001870:	4b12      	ldr	r3, [pc, #72]	; (80018bc <HAL_UART_MspInit+0x50>)
 8001872:	429a      	cmp	r2, r3
 8001874:	d11f      	bne.n	80018b6 <HAL_UART_MspInit+0x4a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001876:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800187a:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187c:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 800187e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001882:	619a      	str	r2, [r3, #24]
 8001884:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001886:	480e      	ldr	r0, [pc, #56]	; (80018c0 <HAL_UART_MspInit+0x54>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001888:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800188c:	9301      	str	r3, [sp, #4]
 800188e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001890:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001894:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001896:	2302      	movs	r3, #2
 8001898:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800189a:	2303      	movs	r3, #3
 800189c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189e:	f7fe fd1d 	bl	80002dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018a6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018a8:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018aa:	a902      	add	r1, sp, #8
 80018ac:	4804      	ldr	r0, [pc, #16]	; (80018c0 <HAL_UART_MspInit+0x54>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ae:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b2:	f7fe fd13 	bl	80002dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80018b6:	b007      	add	sp, #28
 80018b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80018bc:	40013800 	.word	0x40013800
 80018c0:	40010800 	.word	0x40010800

080018c4 <NMI_Handler>:
 80018c4:	4770      	bx	lr

080018c6 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80018c6:	e7fe      	b.n	80018c6 <HardFault_Handler>

080018c8 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80018c8:	e7fe      	b.n	80018c8 <MemManage_Handler>

080018ca <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80018ca:	e7fe      	b.n	80018ca <BusFault_Handler>

080018cc <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80018cc:	e7fe      	b.n	80018cc <UsageFault_Handler>

080018ce <SVC_Handler>:
 80018ce:	4770      	bx	lr

080018d0 <DebugMon_Handler>:
 80018d0:	4770      	bx	lr

080018d2 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80018d2:	4770      	bx	lr

080018d4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80018d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018d6:	f7fe fc6f 	bl	80001b8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80018de:	f7fe bcf8 	b.w	80002d2 <HAL_SYSTICK_IRQHandler>
	...

080018e4 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80018e4:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <SystemInit+0x40>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	f042 0201 	orr.w	r2, r2, #1
 80018ec:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80018ee:	6859      	ldr	r1, [r3, #4]
 80018f0:	4a0d      	ldr	r2, [pc, #52]	; (8001928 <SystemInit+0x44>)
 80018f2:	400a      	ands	r2, r1
 80018f4:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80018fc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001900:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001908:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800190a:	685a      	ldr	r2, [r3, #4]
 800190c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001910:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001912:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001916:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001918:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800191c:	4b03      	ldr	r3, [pc, #12]	; (800192c <SystemInit+0x48>)
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	40021000 	.word	0x40021000
 8001928:	f8ff0000 	.word	0xf8ff0000
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001930:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001932:	e003      	b.n	800193c <LoopCopyDataInit>

08001934 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001934:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001936:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001938:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800193a:	3104      	adds	r1, #4

0800193c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800193c:	480a      	ldr	r0, [pc, #40]	; (8001968 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800193e:	4b0b      	ldr	r3, [pc, #44]	; (800196c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001940:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001942:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001944:	d3f6      	bcc.n	8001934 <CopyDataInit>
  ldr r2, =_sbss
 8001946:	4a0a      	ldr	r2, [pc, #40]	; (8001970 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001948:	e002      	b.n	8001950 <LoopFillZerobss>

0800194a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800194a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800194c:	f842 3b04 	str.w	r3, [r2], #4

08001950 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001950:	4b08      	ldr	r3, [pc, #32]	; (8001974 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001952:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001954:	d3f9      	bcc.n	800194a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001956:	f7ff ffc5 	bl	80018e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800195a:	f000 f80f 	bl	800197c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800195e:	f7ff fe0d 	bl	800157c <main>
  bx lr
 8001962:	4770      	bx	lr
  ldr r3, =_sidata
 8001964:	08001a68 	.word	0x08001a68
  ldr r0, =_sdata
 8001968:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800196c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8001970:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8001974:	200000c4 	.word	0x200000c4

08001978 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001978:	e7fe      	b.n	8001978 <ADC1_2_IRQHandler>
	...

0800197c <__libc_init_array>:
 800197c:	b570      	push	{r4, r5, r6, lr}
 800197e:	2500      	movs	r5, #0
 8001980:	4e0c      	ldr	r6, [pc, #48]	; (80019b4 <__libc_init_array+0x38>)
 8001982:	4c0d      	ldr	r4, [pc, #52]	; (80019b8 <__libc_init_array+0x3c>)
 8001984:	1ba4      	subs	r4, r4, r6
 8001986:	10a4      	asrs	r4, r4, #2
 8001988:	42a5      	cmp	r5, r4
 800198a:	d109      	bne.n	80019a0 <__libc_init_array+0x24>
 800198c:	f000 f82e 	bl	80019ec <_init>
 8001990:	2500      	movs	r5, #0
 8001992:	4e0a      	ldr	r6, [pc, #40]	; (80019bc <__libc_init_array+0x40>)
 8001994:	4c0a      	ldr	r4, [pc, #40]	; (80019c0 <__libc_init_array+0x44>)
 8001996:	1ba4      	subs	r4, r4, r6
 8001998:	10a4      	asrs	r4, r4, #2
 800199a:	42a5      	cmp	r5, r4
 800199c:	d105      	bne.n	80019aa <__libc_init_array+0x2e>
 800199e:	bd70      	pop	{r4, r5, r6, pc}
 80019a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80019a4:	4798      	blx	r3
 80019a6:	3501      	adds	r5, #1
 80019a8:	e7ee      	b.n	8001988 <__libc_init_array+0xc>
 80019aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80019ae:	4798      	blx	r3
 80019b0:	3501      	adds	r5, #1
 80019b2:	e7f2      	b.n	800199a <__libc_init_array+0x1e>
 80019b4:	08001a60 	.word	0x08001a60
 80019b8:	08001a60 	.word	0x08001a60
 80019bc:	08001a60 	.word	0x08001a60
 80019c0:	08001a64 	.word	0x08001a64

080019c4 <memcpy>:
 80019c4:	b510      	push	{r4, lr}
 80019c6:	1e43      	subs	r3, r0, #1
 80019c8:	440a      	add	r2, r1
 80019ca:	4291      	cmp	r1, r2
 80019cc:	d100      	bne.n	80019d0 <memcpy+0xc>
 80019ce:	bd10      	pop	{r4, pc}
 80019d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80019d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80019d8:	e7f7      	b.n	80019ca <memcpy+0x6>

080019da <memset>:
 80019da:	4603      	mov	r3, r0
 80019dc:	4402      	add	r2, r0
 80019de:	4293      	cmp	r3, r2
 80019e0:	d100      	bne.n	80019e4 <memset+0xa>
 80019e2:	4770      	bx	lr
 80019e4:	f803 1b01 	strb.w	r1, [r3], #1
 80019e8:	e7f9      	b.n	80019de <memset+0x4>
	...

080019ec <_init>:
 80019ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019ee:	bf00      	nop
 80019f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019f2:	bc08      	pop	{r3}
 80019f4:	469e      	mov	lr, r3
 80019f6:	4770      	bx	lr

080019f8 <_fini>:
 80019f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019fa:	bf00      	nop
 80019fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019fe:	bc08      	pop	{r3}
 8001a00:	469e      	mov	lr, r3
 8001a02:	4770      	bx	lr
